/*! For license information please see 1477.chunk.js.LICENSE.txt */
(self.webpackChunkstremio_theater = self.webpackChunkstremio_theater || []).push([
    [1477], {
        33: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816);
            e.exports = function(e) {
                function t(t) {
                    var r = new e(t = t || {});
                    r.on("propValue", c.bind(null, "propValue")), r.on("propChanged", c.bind(null, "propChanged")), e.manifest.events.filter((function(e) {
                        return !["propValue", "propChanged"].includes(e)
                    })).forEach((function(e) {
                        r.on(e, function(e) {
                            return function() {
                                o.emit.apply(o, [e].concat(Array.from(arguments)))
                            }
                        }(e))
                    }));
                    var s = null,
                        o = new n,
                        l = !1,
                        u = {
                            videoParams: !1
                        };

                    function c(e, t, r) {
                        "videoParams" !== t && o.emit(e, t, d(t, r)), "stream" === t && (s = r, function(e) {
                            u[e] && o.emit("propChanged", e, d(e, null))
                        }("videoParams"))
                    }

                    function d(e, t) {
                        return "videoParams" === e ? null === s ? null : {
                            hash: s.behaviorHints && "string" == typeof s.behaviorHints.videoHash ? s.behaviorHints.videoHash : null,
                            size: s.behaviorHints && null !== s.behaviorHints.videoSize && isFinite(s.behaviorHints.videoSize) ? s.behaviorHints.videoSize : null,
                            filename: s.behaviorHints && "string" == typeof s.behaviorHints.filename ? s.behaviorHints.filename : null
                        } : t
                    }
                    this.on = function(e, t) {
                        if (l) throw new Error("Video is destroyed");
                        o.on(e, t)
                    }, this.dispatch = function(e) {
                        if (l) throw new Error("Video is destroyed");
                        if (e) switch ((e = a(i(e))).type) {
                            case "observeProp":
                                if ("videoParams" === (n = e.propName) && (o.emit("propValue", n, d(n, null)), u[n] = !0, 1)) return;
                                break;
                            case "command":
                                if (t = e.commandName, e.commandArgs, "destroy" === t && (l = !0, r.dispatch({
                                        type: "command",
                                        commandName: "destroy"
                                    }), o.removeAllListeners(), 1)) return
                        }
                        var t, n;
                        r.dispatch(e)
                    }
                }
                return t.canPlayStream = function(t, r) {
                    return e.canPlayStream(t, r)
                }, t.manifest = {
                    name: e.manifest.name + "WithVideoParams",
                    external: e.manifest.external,
                    props: e.manifest.props.concat(["videoParams"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    })),
                    commands: e.manifest.commands.concat(["destroy"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    })),
                    events: e.manifest.events.concat(["propValue", "propChanged"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    }))
                }, t
            }
        },
        301: (e, t, r) => {
            "use strict";
            var n = r(8336),
                i = Array.prototype.concat,
                a = Array.prototype.slice,
                s = e.exports = function(e) {
                    for (var t = [], r = 0, s = e.length; r < s; r++) {
                        var o = e[r];
                        n(o) ? t = i.call(t, a.call(o)) : t.push(o)
                    }
                    return t
                };
            s.wrap = function(e) {
                return function() {
                    return e(s(arguments))
                }
            }
        },
        344: function(e, t, r) {
            var n;
            e.exports && (this.VTTCue = this.VTTCue || r(8684).VTTCue), (n = this).VTTCue.prototype.toJSON = function() {
                var e = {},
                    t = this;
                return Object.keys(this).forEach((function(r) {
                    "getCueAsHTML" !== r && "hasBeenReset" !== r && "displayState" !== r && (e[r] = t[r])
                })), e
            }, n.VTTCue.create = function(e) {
                if (!e.hasOwnProperty("startTime") || !e.hasOwnProperty("endTime") || !e.hasOwnProperty("text")) throw new Error("You must at least have start time, end time, and text.");
                var t = new n.VTTCue(e.startTime, e.endTime, e.text);
                for (var r in e) t.hasOwnProperty(r) && (t[r] = e[r]);
                return t
            }, n.VTTCue.fromJSON = function(e) {
                return this.create(JSON.parse(e))
            }
        },
        485: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(8742),
                o = r(4044),
                l = /^\{(\\an[1-8])+\}/i;

            function u(e) {
                var t = 100,
                    r = 0,
                    u = "rgb(255, 255, 255)",
                    c = "rgba(0, 0, 0, 0)",
                    d = "rgb(34, 34, 34)",
                    h = 1,
                    f = (e = e || {}).containerElement;
                if (!(f instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var g = document.createElement("video");
                g.style.width = "100%", g.style.height = "100%", g.style.backgroundColor = "black", g.controls = !1, g.playsInline = !0, g.onerror = function() {
                    ! function() {
                        if (y) return;
                        var e;
                        switch (g.error.code) {
                            case 1:
                                e = o.HTML_VIDEO.MEDIA_ERR_ABORTED;
                                break;
                            case 2:
                                e = o.HTML_VIDEO.MEDIA_ERR_NETWORK;
                                break;
                            case 3:
                                e = o.HTML_VIDEO.MEDIA_ERR_DECODE;
                                break;
                            case 4:
                                e = o.HTML_VIDEO.MEDIA_ERR_SRC_NOT_SUPPORTED;
                                break;
                            default:
                                e = o.UNKNOWN_ERROR
                        }
                        L(Object.assign({}, e, {
                            critical: !0,
                            error: g.error
                        }))
                    }()
                }, g.onended = function() {
                    v.emit("ended")
                }, g.onpause = function() {
                    R("paused")
                }, g.onplay = function() {
                    R("paused")
                }, g.ontimeupdate = function() {
                    R("time")
                }, g.ondurationchange = function() {
                    R("duration")
                }, g.onwaiting = function() {
                    R("buffering")
                }, g.onseeking = function() {
                    R("time"), R("buffering")
                }, g.onseeked = function() {
                    R("time"), R("buffering")
                }, g.onstalled = function() {
                    R("buffering")
                }, g.onplaying = function() {
                    R("time"), R("buffering")
                }, g.oncanplay = function() {
                    R("buffering")
                }, g.canplaythrough = function() {
                    R("buffering")
                }, g.onloadedmetadata = function() {
                    R("loaded")
                }, g.onloadeddata = function() {
                    R("buffering")
                }, g.onvolumechange = function() {
                    R("volume"), R("muted")
                }, g.onratechange = function() {
                    R("playbackSpeed")
                }, g.textTracks.onchange = function() {
                    R("subtitlesTracks"), R("selectedSubtitlesTrackId")
                }, f.appendChild(g);
                var p = document.createElement("div");
                p.style.position = "absolute", p.style.right = "0", p.style.bottom = "0", p.style.left = "0", p.style.zIndex = "1", p.style.textAlign = "center", f.style.position = "relative", f.style.zIndex = "0", f.appendChild(p);
                var m, v = new n,
                    y = !1,
                    T = null,
                    b = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        subtitlesTracks: !1,
                        selectedSubtitlesTrackId: !1,
                        subtitlesOffset: !1,
                        subtitlesSize: !1,
                        subtitlesTextColor: !1,
                        subtitlesBackgroundColor: !1,
                        subtitlesOutlineColor: !1,
                        audioTracks: !1,
                        selectedAudioTrackId: !1,
                        volume: !1,
                        muted: !1,
                        playbackSpeed: !1
                    };
                async function E() {
                    m && S(m.text, "show")
                }
                async function S(e, n) {
                    if ("hide" !== n) {
                        for (m = {
                                text: e
                            }; p.hasChildNodes();) p.removeChild(p.lastChild);
                        p.style.bottom = r + "%", p.style.opacity = h;
                        var i = document.createElement("span");
                        i.innerHTML = e, i.style.display = "inline-block", i.style.padding = "0.2em", i.style.fontSize = Math.floor(t / 25) + "vmin", i.style.color = u, i.style.backgroundColor = c, i.style.textShadow = "1px 1px 0.1em " + d, i.style.whiteSpace = "pre-wrap", p.appendChild(i), p.appendChild(document.createElement("br"))
                    } else {
                        for (; p.hasChildNodes();) p.removeChild(p.lastChild);
                        m = null
                    }
                }

                function A(e) {
                    var t = (e.target || {}).activeCues;
                    if (t.length) {
                        if (t.length > 3) return e.target.removeEventListener("cuechange", A), void S("", "hide");
                        var r = "";
                        for (var n in t) {
                            var i = t[n];
                            if (i.text) r += (r ? "\n" : "") + i.text.replace(l, "")
                        }
                        S(r, "show")
                    } else S("", "hide")
                }

                function k(e) {
                    switch (e) {
                        case "stream":
                            return T;
                        case "loaded":
                            return null === T ? null : g.readyState >= g.HAVE_METADATA;
                        case "paused":
                            return null === T ? null : !!g.paused;
                        case "time":
                            return null !== T && null !== g.currentTime && isFinite(g.currentTime) ? Math.floor(1e3 * g.currentTime) : null;
                        case "duration":
                            return null !== T && null !== g.duration && isFinite(g.duration) ? Math.floor(1e3 * g.duration) : null;
                        case "buffering":
                            return null === T ? null : g.readyState < g.HAVE_FUTURE_DATA;
                        case "subtitlesTracks":
                            return null === T ? [] : g.textTracks && Array.from(g.textTracks).length ? Array.from(g.textTracks).filter((function(e) {
                                return "subtitles" === e.kind
                            })).map((function(e, t) {
                                return Object.freeze({
                                    id: "EMBEDDED_" + String(t),
                                    lang: e.language,
                                    label: e.label || null,
                                    origin: "EMBEDDED",
                                    embedded: !0
                                })
                            })) : [];
                        case "selectedSubtitlesTrackId":
                            return null === T ? null : g.textTracks && Array.from(g.textTracks).length ? Array.from(g.textTracks).reduce((function(e, t, r) {
                                return null === e && "hidden" === t.mode ? "EMBEDDED_" + String(r) : e
                            }), null) : null;
                        case "subtitlesOffset":
                            return y ? null : r;
                        case "subtitlesSize":
                            return y ? null : t;
                        case "subtitlesTextColor":
                            return y ? null : u;
                        case "subtitlesBackgroundColor":
                            return y ? null : c;
                        case "subtitlesOutlineColor":
                            return y ? null : d;
                        case "subtitlesOpacity":
                            return y ? null : h;
                        case "audioTracks":
                            return null === T ? [] : g.audioTracks && Array.from(g.audioTracks).length ? Array.from(g.audioTracks).map((function(e, t) {
                                return Object.freeze({
                                    id: "EMBEDDED_" + String(t),
                                    lang: e.language,
                                    label: e.label || null,
                                    origin: "EMBEDDED",
                                    embedded: !0
                                })
                            })) : [];
                        case "selectedAudioTrackId":
                            return null === T ? null : g.audioTracks && Array.from(g.audioTracks).length ? Array.from(g.audioTracks).reduce((function(e, t, r) {
                                return null === e && t.enabled ? "EMBEDDED_" + String(r) : e
                            }), null) : null;
                        case "volume":
                            return y || null === g.volume || !isFinite(g.volume) ? null : Math.floor(100 * g.volume);
                        case "muted":
                            return y ? null : !!g.muted;
                        case "playbackSpeed":
                            return y || null === g.playbackRate || !isFinite(g.playbackRate) ? null : g.playbackRate;
                        default:
                            return null
                    }
                }

                function L(e) {
                    v.emit("error", e), e.critical && I("unload")
                }

                function R(e) {
                    b[e] && v.emit("propChanged", e, k(e))
                }

                function I(e, t) {
                    switch (e) {
                        case "load":
                            I("unload"), t && t.stream && "string" == typeof t.stream.url ? (T = t.stream, R("stream"), R("loaded"), g.autoplay = "boolean" != typeof t.autoplay || t.autoplay, g.currentTime = null !== t.time && isFinite(t.time) ? parseInt(t.time, 10) / 1e3 : 0, R("paused"), R("time"), R("duration"), R("buffering"), g.textTracks && (g.textTracks.onaddtrack = function() {
                                g.textTracks.onaddtrack = null, setTimeout((function() {
                                    R("subtitlesTracks"), R("selectedSubtitlesTrackId")
                                }))
                            }), g.audioTracks && (g.audioTracks.onaddtrack = function() {
                                g.audioTracks.onaddtrack = null, setTimeout((function() {
                                    R("audioTracks"), R("selectedAudioTrackId")
                                }))
                            }), g.src = T.url) : L(Object.assign({}, o.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: t ? t.stream : null
                            }));
                            break;
                        case "unload":
                            T = null, Array.from(g.textTracks).forEach((function(e) {
                                e.oncuechange = null
                            })), g.removeAttribute("src"), g.load(), g.currentTime = 0, R("stream"), R("loaded"), R("paused"), R("time"), R("duration"), R("buffering"), R("subtitlesTracks"), R("selectedSubtitlesTrackId"), R("audioTracks"), R("selectedAudioTrackId");
                            break;
                        case "destroy":
                            I("unload"), y = !0, R("subtitlesOffset"), R("subtitlesSize"), R("subtitlesTextColor"), R("subtitlesBackgroundColor"), R("subtitlesOutlineColor"), R("volume"), R("muted"), R("playbackSpeed"), v.removeAllListeners(), g.onerror = null, g.onended = null, g.onpause = null, g.onplay = null, g.ontimeupdate = null, g.ondurationchange = null, g.onwaiting = null, g.onseeking = null, g.onseeked = null, g.onstalled = null, g.onplaying = null, g.oncanplay = null, g.canplaythrough = null, g.onloadeddata = null, g.onvolumechange = null, g.onratechange = null, g.textTracks.onchange = null, f.removeChild(g)
                    }
                }
                this.on = function(e, t) {
                    if (y) throw new Error("Video is destroyed");
                    v.on(e, t)
                }, this.dispatch = function(e) {
                    if (y) throw new Error("Video is destroyed");
                    if (e) switch ((e = a(i(e))).type) {
                        case "observeProp":
                            return n = e.propName, void(b.hasOwnProperty(n) && (v.emit("propValue", n, k(n)), b[n] = !0));
                        case "setProp":
                            return void
                            function(e, n) {
                                switch (e) {
                                    case "paused":
                                        null !== T && (n ? g.pause() : g.play(), R("paused"));
                                        break;
                                    case "time":
                                        null !== T && null !== n && isFinite(n) && (S("", "hide"), g.currentTime = parseInt(n, 10) / 1e3, R("time"));
                                        break;
                                    case "selectedSubtitlesTrackId":
                                        if (null !== T) {
                                            Array.from(g.textTracks).forEach((function(e, t) {
                                                "hidden" === e.mode && e.removeEventListener("cuechange", A), e.mode = "EMBEDDED_" + String(t) === n ? "hidden" : "disabled", "hidden" === e.mode && e.addEventListener("cuechange", A)
                                            }));
                                            var i = k("subtitlesTracks").find((function(e) {
                                                return e.id === n
                                            }));
                                            S("", "hide"), i && (R("selectedSubtitlesTrackId"), v.emit("subtitlesTrackLoaded", i))
                                        }
                                        break;
                                    case "subtitlesOffset":
                                        null !== n && isFinite(n) && (r = Math.max(0, Math.min(100, parseInt(n, 10))), E(), R("subtitlesOffset"));
                                        break;
                                    case "subtitlesSize":
                                        null !== n && isFinite(n) && (t = Math.max(0, parseInt(n, 10)), E(), R("subtitlesSize"));
                                        break;
                                    case "subtitlesTextColor":
                                        if ("string" == typeof n) {
                                            try {
                                                u = s(n).rgb().string()
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            E(), R("subtitlesTextColor")
                                        }
                                        break;
                                    case "subtitlesBackgroundColor":
                                        if ("string" == typeof n) {
                                            try {
                                                c = s(n).rgb().string()
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            E(), R("subtitlesBackgroundColor")
                                        }
                                        break;
                                    case "subtitlesOutlineColor":
                                        if ("string" == typeof n) {
                                            try {
                                                d = s(n).rgb().string()
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            E(), R("subtitlesOutlineColor")
                                        }
                                        break;
                                    case "subtitlesOpacity":
                                        if ("number" == typeof n) {
                                            try {
                                                h = Math.min(Math.max(n / 100, 0), 1)
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            E(), R("subtitlesOpacity")
                                        }
                                        break;
                                    case "selectedAudioTrackId":
                                        if (null !== T)
                                            for (var a = 0; a < g.audioTracks.length; a++) g.audioTracks[a].enabled = !("EMBEDDED_" + String(a) !== n);
                                        var o = k("audioTracks").find((function(e) {
                                            return e.id === n
                                        }));
                                        o && (R("selectedAudioTrackId"), v.emit("audioTrackLoaded", o));
                                        break;
                                    case "volume":
                                        null !== n && isFinite(n) && (g.muted = !1, g.volume = Math.max(0, Math.min(100, parseInt(n, 10))) / 100, R("muted"), R("volume"));
                                        break;
                                    case "muted":
                                        g.muted = !!n, R("muted");
                                        break;
                                    case "playbackSpeed":
                                        null !== n && isFinite(n) && (g.playbackRate = parseFloat(n), R("playbackSpeed"))
                                }
                            }(e.propName, e.propValue);
                        case "command":
                            return void I(e.commandName, e.commandArgs)
                    }
                    var n;
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            u.canPlayStream = function(e) {
                return e ? Promise.resolve(!0) : Promise.resolve(!1)
            }, u.manifest = {
                name: "TitanVideo",
                external: !1,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "audioTracks", "selectedAudioTrackId", "subtitlesTracks", "selectedSubtitlesTrackId", "subtitlesOffset", "subtitlesSize", "subtitlesTextColor", "subtitlesBackgroundColor", "subtitlesOutlineColor", "subtitlesOpacity", "volume", "muted", "playbackSpeed"],
                commands: ["load", "unload", "destroy"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded", "audioTrackLoaded"]
            }, e.exports = u
        },
        508: e => {
            function t(e) {
                for (var t = "", r = (e = e.replace(/<[a-zA-Z/][^>]*>/g, "")).split(/\n/); r.length > 3;) {
                    for (var n = 3; n < r.length; n++) r[2] += "\n" + r[n];
                    r.splice(3, r.length - 3)
                }
                var i = 0;
                if (!r[0].match(/\d+:\d+:\d+/) && r[1].match(/\d+:\d+:\d+/) && (t += r[0].match(/\w+/) + "\n", i += 1), !r[i].match(/\d+:\d+:\d+/)) return "";
                var a = r[1].match(/(\d+):(\d+):(\d+)(?:,(\d+))?\s*--?>\s*(\d+):(\d+):(\d+)(?:,(\d+))?/);
                return a ? (t += a[1] + ":" + a[2] + ":" + a[3] + "." + a[4] + " --\x3e " + a[5] + ":" + a[6] + ":" + a[7] + "." + a[8] + "\n", r[i += 1] && (t += r[i] + "\n\n"), t) : ""
            }
            e.exports = {
                convert: function(e) {
                    if (e.includes("WEBVTT")) return e;
                    try {
                        return function(e) {
                            var r = e.replace(/\r+/g, ""),
                                n = (r = r.replace(/^\s+|\s+$/g, "")).split("\n\n"),
                                i = "";
                            if (n.length > 0) {
                                i += "WEBVTT\n\n";
                                for (var a = 0; a < n.length; a += 1) i += t(n[a])
                            }
                            return i
                        }(e)
                    } catch (e) {
                        throw new Error("Failed to convert srt to webvtt: " + e.message)
                    }
                }
            }
        },
        659: (e, t, r) => {
            var n = r(7084);
            e.exports = n
        },
        815: e => {
            var t = null;
            e.exports = {
                set: function(e) {
                    t = e
                },
                get: function() {
                    return t
                }
            }
        },
        875: e => {
            "use strict";

            function t(e, t) {
                return Object.prototype.hasOwnProperty.call(e, t)
            }
            e.exports = function(e, r, n, i) {
                r = r || "&", n = n || "=";
                var a = {};
                if ("string" != typeof e || 0 === e.length) return a;
                var s = /\+/g;
                e = e.split(r);
                var o = 1e3;
                i && "number" == typeof i.maxKeys && (o = i.maxKeys);
                var l = e.length;
                o > 0 && l > o && (l = o);
                for (var u = 0; u < l; ++u) {
                    var c, d, h, f, g = e[u].replace(s, "%20"),
                        p = g.indexOf(n);
                    p >= 0 ? (c = g.substr(0, p), d = g.substr(p + 1)) : (c = g, d = ""), h = decodeURIComponent(c), f = decodeURIComponent(d), t(a, h) ? Array.isArray(a[h]) ? a[h].push(f) : a[h] = [a[h], f] : a[h] = f
                }
                return a
            }
        },
        942: (e, t, r) => {
            var n = r(1103);
            t.encode = n.encode, t.decode = n.decode
        },
        985: (e, t, r) => {
            const n = r(4546);

            function i(e) {
                const t = function() {
                        const e = {},
                            t = Object.keys(n);
                        for (let r = t.length, n = 0; n < r; n++) e[t[n]] = {
                            distance: -1,
                            parent: null
                        };
                        return e
                    }(),
                    r = [e];
                for (t[e].distance = 0; r.length;) {
                    const e = r.pop(),
                        i = Object.keys(n[e]);
                    for (let n = i.length, a = 0; a < n; a++) {
                        const n = i[a],
                            s = t[n]; - 1 === s.distance && (s.distance = t[e].distance + 1, s.parent = e, r.unshift(n))
                    }
                }
                return t
            }

            function a(e, t) {
                return function(r) {
                    return t(e(r))
                }
            }

            function s(e, t) {
                const r = [t[e].parent, e];
                let i = n[t[e].parent][e],
                    s = t[e].parent;
                for (; t[s].parent;) r.unshift(t[s].parent), i = a(n[t[s].parent][s], i), s = t[s].parent;
                return i.conversion = r, i
            }
            e.exports = function(e) {
                const t = i(e),
                    r = {},
                    n = Object.keys(t);
                for (let e = n.length, i = 0; i < e; i++) {
                    const e = n[i];
                    null !== t[e].parent && (r[e] = s(e, t))
                }
                return r
            }
        },
        1042: e => {
            function t(e) {
                return e.reduce(((e, t, r, n) => {
                    const i = t.split("-").map((e => parseInt(e)));
                    return e.concat(((e, t = e) => Array.from({
                        length: t - e + 1
                    }, ((t, r) => r + e)))(...i))
                }), [])
            }
            e.exports = t, e.exports.parse = t, e.exports.compose = function(e) {
                return e.reduce(((e, t, r, n) => (0 !== r && t === n[r - 1] + 1 || e.push([]), e[e.length - 1].push(t), e)), []).map((e => e.length > 1 ? `${e[0]}-${e[e.length-1]}` : `${e[0]}`))
            }
        },
        1103: (e, t) => {
            "use strict";
            var r = [255, 255, 26, 27, 28, 29, 30, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255];
            t.encode = function(e) {
                Buffer.isBuffer(e) || (e = new Buffer(e));
                for (var t, r, n = 0, i = 0, a = 0, s = 0, o = new Buffer(8 * (t = e, r = Math.floor(t.length / 5), t.length % 5 == 0 ? r : r + 1)); n < e.length;) {
                    var l = e[n];
                    a > 3 ? (s = (s = l & 255 >> a) << (a = (a + 5) % 8) | (n + 1 < e.length ? e[n + 1] : 0) >> 8 - a, n++) : (s = l >> 8 - (a + 5) & 31, 0 === (a = (a + 5) % 8) && n++), o[i] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567".charCodeAt(s), i++
                }
                for (n = i; n < o.length; n++) o[n] = 61;
                return o
            }, t.decode = function(e) {
                var t, n = 0,
                    i = 0,
                    a = 0;
                Buffer.isBuffer(e) || (e = new Buffer(e));
                for (var s = new Buffer(Math.ceil(5 * e.length / 8)), o = 0; o < e.length && 61 !== e[o]; o++) {
                    var l = e[o] - 48;
                    if (!(l < r.length)) throw new Error("Invalid input - it is not base32 encoded string");
                    i = r[l], n <= 3 ? 0 === (n = (n + 5) % 8) ? (t |= i, s[a] = t, a++, t = 0) : t |= 255 & i << 8 - n : (t |= 255 & i >>> (n = (n + 5) % 8), s[a] = t, a++, t = 255 & i << 8 - n)
                }
                return s.slice(0, a)
            }
        },
        1210: (e, t, r) => {
            var n = r(3762);
            e.exports = n
        },
        1266: (e, t, r) => {
            var n = r(815);
            e.exports = function() {
                return ["Tizen", "webOS", "Titan", "NetTV"].includes(n.get()) || void 0 !== window.qt ? Promise.resolve(!1) : Promise.resolve(!0)
            }
        },
        1362: (e, t, r) => {
            var n = r(8914);
            e.exports = n
        },
        1417: (e, t, r) => {
            e.exports = {
                WebVTT: r(8099).WebVTT,
                VTTCue: r(344).VTTCue,
                VTTRegion: r(7385).VTTRegion
            }
        },
        1615: function() {
            ! function(e) {
                var t = {
                    "": !0,
                    up: !0
                };

                function r(e) {
                    return "number" == typeof e && e >= 0 && e <= 100
                }
                e.VTTRegion = e.VTTRegion || function() {
                    var e = 100,
                        n = 3,
                        i = 0,
                        a = 100,
                        s = 0,
                        o = 100,
                        l = "";
                    Object.defineProperties(this, {
                        width: {
                            enumerable: !0,
                            get: function() {
                                return e
                            },
                            set: function(t) {
                                if (!r(t)) throw new Error("Width must be between 0 and 100.");
                                e = t
                            }
                        },
                        lines: {
                            enumerable: !0,
                            get: function() {
                                return n
                            },
                            set: function(e) {
                                if ("number" != typeof e) throw new TypeError("Lines must be set to a number.");
                                n = e
                            }
                        },
                        regionAnchorY: {
                            enumerable: !0,
                            get: function() {
                                return a
                            },
                            set: function(e) {
                                if (!r(e)) throw new Error("RegionAnchorX must be between 0 and 100.");
                                a = e
                            }
                        },
                        regionAnchorX: {
                            enumerable: !0,
                            get: function() {
                                return i
                            },
                            set: function(e) {
                                if (!r(e)) throw new Error("RegionAnchorY must be between 0 and 100.");
                                i = e
                            }
                        },
                        viewportAnchorY: {
                            enumerable: !0,
                            get: function() {
                                return o
                            },
                            set: function(e) {
                                if (!r(e)) throw new Error("ViewportAnchorY must be between 0 and 100.");
                                o = e
                            }
                        },
                        viewportAnchorX: {
                            enumerable: !0,
                            get: function() {
                                return s
                            },
                            set: function(e) {
                                if (!r(e)) throw new Error("ViewportAnchorX must be between 0 and 100.");
                                s = e
                            }
                        },
                        scroll: {
                            enumerable: !0,
                            get: function() {
                                return l
                            },
                            set: function(e) {
                                var r = function(e) {
                                    return "string" == typeof e && !!t[e.toLowerCase()] && e.toLowerCase()
                                }(e);
                                if (!1 === r) throw new SyntaxError("An invalid or illegal string was specified.");
                                l = r
                            }
                        }
                    })
                }
            }(this)
        },
        1618: (e, t, r) => {
            var n = r(485);
            e.exports = n
        },
        1809: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(8742),
                o = r(4044),
                l = r(7149),
                u = r(4601),
                c = r(508);
            e.exports = function(e) {
                function t(t) {
                    var r = new e(t = t || {});
                    r.on("error", (function(e) {
                        p.emit("error", e), e.critical && _("unload")
                    })), r.on("propValue", w.bind(null, "propValue")), r.on("propChanged", w.bind(null, "propChanged")), e.manifest.events.filter((function(e) {
                        return !["error", "propValue", "propChanged"].includes(e)
                    })).forEach((function(e) {
                        r.on(e, function(e) {
                            return function() {
                                p.emit.apply(p, [e].concat(Array.from(arguments)))
                            }
                        }(e))
                    }));
                    var d = t.containerElement;
                    if (!(d instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                    var h = document.createElement("div");
                    h.style.position = "absolute", h.style.right = "0", h.style.bottom = "0", h.style.left = "0", h.style.zIndex = "1", h.style.textAlign = "center", d.style.position = "relative", d.style.zIndex = "0", d.appendChild(h);
                    var f = {
                            time: null
                        },
                        g = null,
                        p = new n,
                        m = !1,
                        v = [],
                        y = null,
                        T = null,
                        b = 100,
                        E = 0,
                        S = "rgb(255, 255, 255)",
                        A = "rgba(0, 0, 0, 0)",
                        k = "rgb(34, 34, 34)",
                        L = 1,
                        R = {
                            extraSubtitlesTracks: !1,
                            selectedExtraSubtitlesTrackId: !1,
                            extraSubtitlesDelay: !1,
                            extraSubtitlesSize: !1,
                            extraSubtitlesOffset: !1,
                            extraSubtitlesTextColor: !1,
                            extraSubtitlesBackgroundColor: !1,
                            extraSubtitlesOutlineColor: !1,
                            extraSubtitlesOpacity: !1
                        };

                    function I() {
                        for (; h.hasChildNodes();) h.removeChild(h.lastChild);
                        null !== g && null !== f.time && isFinite(f.time) && (h.style.bottom = E + "%", h.style.opacity = L, u.render(g, f.time - T).forEach((function(e) {
                            e.style.display = "inline-block", e.style.padding = "0.2em", e.style.whiteSpace = "pre-wrap";
                            var t = window.screen720p ? 1.538 : 1;
                            e.style.fontSize = Math.floor(b / 25 * t) + "vmin", e.style.color = S, e.style.backgroundColor = A, e.style.textShadow = "1px 1px 0.1em " + k, h.appendChild(e), h.appendChild(document.createElement("br"))
                        })))
                    }

                    function w(e, t, r) {
                        if ("time" === t) f.time = r, I();
                        p.emit(e, t, C(t, r))
                    }

                    function D(e) {
                        R[e] && p.emit("propChanged", e, C(e, null))
                    }

                    function C(e, t) {
                        switch (e) {
                            case "extraSubtitlesTracks":
                                return m ? [] : v.slice();
                            case "selectedExtraSubtitlesTrackId":
                                return m ? null : y;
                            case "extraSubtitlesDelay":
                                return m ? null : T;
                            case "extraSubtitlesSize":
                                return m ? null : b;
                            case "extraSubtitlesOffset":
                                return m ? null : E;
                            case "extraSubtitlesTextColor":
                                return m ? null : S;
                            case "extraSubtitlesBackgroundColor":
                                return m ? null : A;
                            case "extraSubtitlesOutlineColor":
                                return m ? null : k;
                            case "extraSubtitlesOpacity":
                                return m ? null : L;
                            default:
                                return t
                        }
                    }

                    function x(e, t) {
                        switch (e) {
                            case "selectedExtraSubtitlesTrackId":
                                g = null, y = null, T = null;
                                var n = v.find((function(e) {
                                    return e.id === t
                                }));
                                if (n) {
                                    y = n.id, T = 0,
                                        function e(t, i) {
                                            (function(e, t) {
                                                var r = t ? e.fallbackUrl : e.url;
                                                if ("string" == typeof r) return fetch(r).then((function(e) {
                                                    if (e.ok) return e.text();
                                                    throw new Error(e.status + " (" + e.statusText + ")")
                                                }));
                                                if (e.buffer instanceof ArrayBuffer) try {
                                                    const t = new Uint8Array(e.buffer),
                                                        r = (new TextDecoder).decode(t);
                                                    return Promise.resolve(r)
                                                } catch (e) {
                                                    return Promise.reject(e)
                                                }
                                                return Promise.reject("No `url` or `buffer` field available for this track")
                                            })(t, i).then((function(e) {
                                                return c.convert(e)
                                            })).then((function(e) {
                                                return l.parse(e)
                                            })).then((function(e) {
                                                y === n.id && (g = e, I(), p.emit("extraSubtitlesTrackLoaded", n))
                                            })).catch((function(t) {
                                                y === n.id && (i || "string" != typeof n.fallbackUrl ? function(e) {
                                                    p.emit("error", e), e.critical && (_("unload"), r.dispatch({
                                                        type: "command",
                                                        commandName: "unload"
                                                    }))
                                                }(Object.assign({}, o.WITH_HTML_SUBTITLES.LOAD_FAILED, {
                                                    error: t,
                                                    track: n,
                                                    critical: !1
                                                })) : e(n, !0))
                                            }))
                                        }(n)
                                }
                                return I(), D("selectedExtraSubtitlesTrackId"), D("extraSubtitlesDelay"), !0;
                            case "extraSubtitlesDelay":
                                return null !== y && null !== t && isFinite(t) && (T = parseInt(t, 10), I(), D("extraSubtitlesDelay")), !0;
                            case "extraSubtitlesSize":
                                return null !== t && isFinite(t) && (b = Math.max(0, parseInt(t, 10)), I(), D("extraSubtitlesSize")), !0;
                            case "extraSubtitlesOffset":
                                return null !== t && isFinite(t) && (E = Math.max(0, Math.min(100, parseInt(t, 10))), I(), D("extraSubtitlesOffset")), !0;
                            case "extraSubtitlesTextColor":
                                if ("string" == typeof t) {
                                    try {
                                        S = s(t).rgb().string()
                                    } catch (e) {
                                        console.error("withHTMLSubtitles", e)
                                    }
                                    I(), D("extraSubtitlesTextColor")
                                }
                                return !0;
                            case "extraSubtitlesBackgroundColor":
                                if ("string" == typeof t) {
                                    try {
                                        A = s(t).rgb().string()
                                    } catch (e) {
                                        console.error("withHTMLSubtitles", e)
                                    }
                                    I(), D("extraSubtitlesBackgroundColor")
                                }
                                return !0;
                            case "extraSubtitlesOutlineColor":
                                if ("string" == typeof t) {
                                    try {
                                        k = s(t).rgb().string()
                                    } catch (e) {
                                        console.error("withHTMLSubtitles", e)
                                    }
                                    I(), D("extraSubtitlesOutlineColor")
                                }
                                return !0;
                            case "extraSubtitlesOpacity":
                                if ("number" == typeof t) {
                                    try {
                                        L = Math.min(Math.max(t / 100, 0), 1)
                                    } catch (e) {
                                        console.error("withHTMLSubtitles", e)
                                    }
                                    I(), D("extraSubtitlesOpacity")
                                }
                                return !0;
                            default:
                                return !1
                        }
                    }

                    function _(e, t) {
                        switch (e) {
                            case "addExtraSubtitlesTracks":
                                return t && Array.isArray(t.tracks) && (v = v.concat(t.tracks).filter((function(e, t, r) {
                                    return e && "string" == typeof e.id && "string" == typeof e.lang && "string" == typeof e.label && "string" == typeof e.origin && !e.embedded && t === r.findIndex((function(t) {
                                        return t.id === e.id
                                    }))
                                })), D("extraSubtitlesTracks")), !0;
                            case "addLocalSubtitles":
                                if (t && "string" == typeof t.filename && t.buffer instanceof ArrayBuffer) {
                                    var n = "LOCAL_" + v.filter((function(e) {
                                            return e.local
                                        })).length,
                                        i = {
                                            id: n,
                                            url: null,
                                            buffer: t.buffer,
                                            lang: "local",
                                            label: t.filename,
                                            origin: "LOCAL",
                                            local: !0,
                                            embedded: !1
                                        };
                                    v.push(i), D("extraSubtitlesTracks"), p.emit("extraSubtitlesTrackAdded", i)
                                }
                                return !0;
                            case "load":
                                return _("unload"), t.stream && Array.isArray(t.stream.subtitles) && _("addExtraSubtitlesTracks", {
                                    tracks: t.stream.subtitles.map((function(e) {
                                        return Object.assign({}, e, {
                                            origin: "EXCLUSIVE",
                                            exclusive: !0,
                                            embedded: !1
                                        })
                                    }))
                                }), !1;
                            case "unload":
                                return g = null, v = [], y = null, T = null, I(), D("extraSubtitlesTracks"), D("selectedExtraSubtitlesTrackId"), D("extraSubtitlesDelay"), !1;
                            case "destroy":
                                return _("unload"), m = !0, D("extraSubtitlesSize"), D("extraSubtitlesOffset"), D("extraSubtitlesTextColor"), D("extraSubtitlesBackgroundColor"), D("extraSubtitlesOutlineColor"), D("extraSubtitlesOpacity"), r.dispatch({
                                    type: "command",
                                    commandName: "destroy"
                                }), p.removeAllListeners(), d.removeChild(h), !0;
                            default:
                                return !1
                        }
                    }
                    this.on = function(e, t) {
                        if (m) throw new Error("Video is destroyed");
                        p.on(e, t)
                    }, this.dispatch = function(e) {
                        if (m) throw new Error("Video is destroyed");
                        if (e) switch ((e = a(i(e))).type) {
                            case "observeProp":
                                if (function(e) {
                                        switch (e) {
                                            case "extraSubtitlesTracks":
                                            case "selectedExtraSubtitlesTrackId":
                                            case "extraSubtitlesDelay":
                                            case "extraSubtitlesSize":
                                            case "extraSubtitlesOffset":
                                            case "extraSubtitlesTextColor":
                                            case "extraSubtitlesBackgroundColor":
                                            case "extraSubtitlesOutlineColor":
                                            case "extraSubtitlesOpacity":
                                                return p.emit("propValue", e, C(e, null)), R[e] = !0, !0;
                                            default:
                                                return !1
                                        }
                                    }(e.propName)) return;
                                break;
                            case "setProp":
                                if (x(e.propName, e.propValue)) return;
                                break;
                            case "command":
                                if (_(e.commandName, e.commandArgs)) return
                        }
                        r.dispatch(e)
                    }
                }
                return t.canPlayStream = function(t) {
                    return e.canPlayStream(t)
                }, t.manifest = {
                    name: e.manifest.name + "WithHTMLSubtitles",
                    external: e.manifest.external,
                    props: e.manifest.props.concat(["extraSubtitlesTracks", "selectedExtraSubtitlesTrackId", "extraSubtitlesDelay", "extraSubtitlesSize", "extraSubtitlesOffset", "extraSubtitlesTextColor", "extraSubtitlesBackgroundColor", "extraSubtitlesOutlineColor", "extraSubtitlesOpacity"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    })),
                    commands: e.manifest.commands.concat(["load", "unload", "destroy", "addExtraSubtitlesTracks", "addLocalSubtitles"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    })),
                    events: e.manifest.events.concat(["propValue", "propChanged", "error", "extraSubtitlesTrackLoaded", "extraSubtitlesTrackAdded"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    }))
                }, t
            }
        },
        1880: (e, t, r) => {
            const n = r(4546),
                i = r(985),
                a = {};
            Object.keys(n).forEach((e => {
                a[e] = {}, Object.defineProperty(a[e], "channels", {
                    value: n[e].channels
                }), Object.defineProperty(a[e], "labels", {
                    value: n[e].labels
                });
                const t = i(e);
                Object.keys(t).forEach((r => {
                    const n = t[r];
                    a[e][r] = function(e) {
                        const t = function(...t) {
                            const r = t[0];
                            if (null == r) return r;
                            r.length > 1 && (t = r);
                            const n = e(t);
                            if ("object" == typeof n)
                                for (let e = n.length, t = 0; t < e; t++) n[t] = Math.round(n[t]);
                            return n
                        };
                        return "conversion" in e && (t.conversion = e.conversion), t
                    }(n), a[e][r].raw = function(e) {
                        const t = function(...t) {
                            const r = t[0];
                            return null == r ? r : (r.length > 1 && (t = r), e(t))
                        };
                        return "conversion" in e && (t.conversion = e.conversion), t
                    }(n)
                }))
            })), e.exports = a
        },
        2159: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(4044);

            function o(e) {
                var t = null !== (e = e || {}).timeChangedTimeout && isFinite(e.timeChangedTimeout) ? parseInt(e.timeChangedTimeout, 10) : 100,
                    r = e.containerElement;
                if (!(r instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var o = document.createElement("script");
                o.type = "text/javascript", o.src = "https://www.youtube.com/iframe_api", o.onload = function() {
                    if (g) return;
                    if (!YT || "function" != typeof YT.ready) return void y();
                    YT.ready((function() {
                        g || (YT && YT.PlayerState && "function" == typeof YT.Player ? c = new YT.Player(l, {
                            width: "100%",
                            height: "100%",
                            playerVars: {
                                autoplay: 1,
                                cc_load_policy: 3,
                                controls: 0,
                                disablekb: 1,
                                enablejsapi: 1,
                                fs: 0,
                                iv_load_policy: 3,
                                loop: 0,
                                modestbranding: 1,
                                playsinline: 1,
                                rel: 0
                            },
                            events: {
                                onError: T,
                                onReady: b,
                                onApiChange: E,
                                onStateChange: S
                            }
                        }) : y())
                    }))
                }, o.onerror = y, r.appendChild(o);
                var l = document.createElement("div");
                l.style.width = "100%", l.style.height = "100%", l.style.backgroundColor = "black", r.appendChild(l);
                var u = window.setInterval((function() {
                        L("time"), L("volume"), L("muted"), L("playbackSpeed")
                    }), t),
                    c = null,
                    d = !1,
                    h = null,
                    f = new n,
                    g = !1,
                    p = null,
                    m = null,
                    v = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        volume: !1,
                        muted: !1,
                        playbackSpeed: !1,
                        subtitlesTracks: !1,
                        selectedSubtitlesTrackId: !1
                    };

                function y() {
                    g || k(Object.assign({}, s.YOUTUBE_VIDEO.API_LOAD_FAILED, {
                        critical: !0
                    }))
                }

                function T(e) {
                    if (!g) {
                        var t;
                        switch (e.data) {
                            case 2:
                                t = s.YOUTUBE_VIDEO.INVALID_PARAMETER;
                                break;
                            case 5:
                                t = s.YOUTUBE_VIDEO.HTML5_VIDEO;
                                break;
                            case 100:
                                t = s.YOUTUBE_VIDEO.VIDEO_NOT_FOUND;
                                break;
                            case 101:
                            case 150:
                                t = s.YOUTUBE_VIDEO.VIDEO_NOT_EMBEDDABLE;
                                break;
                            default:
                                t = s.UNKNOWN_ERROR
                        }
                        k(Object.assign({}, t, {
                            critical: !0,
                            error: e
                        }))
                    }
                }

                function b() {
                    g || (d = !0, null !== h && (R("load", h), h = null))
                }

                function E() {
                    g || ("function" == typeof c.loadModule && c.loadModule("captions"), "function" == typeof c.setOption && c.setOption("captions", "track", {}), L("paused"), L("time"), L("duration"), L("buffering"), L("volume"), L("muted"), L("playbackSpeed"), L("subtitlesTracks"), L("selectedSubtitlesTrackId"))
                }

                function S(e) {
                    switch (L("buffering"), e.data) {
                        case YT.PlayerState.ENDED:
                            f.emit("ended");
                            break;
                        case YT.PlayerState.CUED:
                        case YT.PlayerState.UNSTARTED:
                        case YT.PlayerState.PAUSED:
                        case YT.PlayerState.PLAYING:
                            L("paused"), L("time"), L("duration")
                    }
                }

                function A(e) {
                    switch (e) {
                        case "stream":
                            return p;
                        case "loaded":
                            return null !== p || null;
                        case "paused":
                            return null === p || "function" != typeof c.getPlayerState ? null : c.getPlayerState() !== YT.PlayerState.PLAYING;
                        case "time":
                            return null !== p && "function" == typeof c.getCurrentTime && null !== c.getCurrentTime() && isFinite(c.getCurrentTime()) ? Math.floor(1e3 * c.getCurrentTime()) : null;
                        case "duration":
                            return null !== p && "function" == typeof c.getDuration && null !== c.getDuration() && isFinite(c.getDuration()) ? Math.floor(1e3 * c.getDuration()) : null;
                        case "buffering":
                            return null === p || "function" != typeof c.getPlayerState ? null : c.getPlayerState() === YT.PlayerState.BUFFERING;
                        case "volume":
                            return null !== p && "function" == typeof c.getVolume && null !== c.getVolume() && isFinite(c.getVolume()) ? c.getVolume() : null;
                        case "muted":
                            return null === p || "function" != typeof c.isMuted ? null : c.isMuted();
                        case "playbackSpeed":
                            return null !== p && "function" == typeof c.getPlaybackRate && null !== c.getPlaybackRate() && isFinite(c.getPlaybackRate()) ? c.getPlaybackRate() : null;
                        case "subtitlesTracks":
                            return null === p || "function" != typeof c.getOption ? [] : (c.getOption("captions", "tracklist") || []).filter((function(e) {
                                return e && "string" == typeof e.languageCode
                            })).map((function(e, t) {
                                return Object.freeze({
                                    id: "EMBEDDED_" + String(t),
                                    lang: e.languageCode,
                                    label: "string" == typeof e.displayName ? e.displayName : e.languageCode,
                                    origin: "EMBEDDED",
                                    embedded: !0
                                })
                            }));
                        case "selectedSubtitlesTrackId":
                            return null === p ? null : m;
                        default:
                            return null
                    }
                }

                function k(e) {
                    f.emit("error", e), e.critical && R("unload")
                }

                function L(e) {
                    v[e] && f.emit("propChanged", e, A(e))
                }

                function R(e, t) {
                    switch (e) {
                        case "load":
                            if (R("unload"), t && t.stream && "string" == typeof t.stream.ytId)
                                if (d) {
                                    p = t.stream, L("stream"), L("loaded");
                                    var n = "boolean" != typeof t.autoplay || t.autoplay,
                                        i = null !== t.time && isFinite(t.time) ? parseInt(t.time, 10) / 1e3 : 0;
                                    n && "function" == typeof c.loadVideoById ? c.loadVideoById({
                                        videoId: t.stream.ytId,
                                        startSeconds: i
                                    }) : "function" == typeof c.cueVideoById && c.cueVideoById({
                                        videoId: t.stream.ytId,
                                        startSeconds: i
                                    }), L("paused"), L("time"), L("duration"), L("buffering"), L("volume"), L("muted"), L("playbackSpeed"), L("subtitlesTracks"), L("selectedSubtitlesTrackId")
                                } else h = t;
                            else k(Object.assign({}, s.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: t ? t.stream : null
                            }));
                            break;
                        case "unload":
                            h = null, p = null, L("stream"), L("loaded"), m = null, d && "function" == typeof c.stopVideo && c.stopVideo(), L("paused"), L("time"), L("duration"), L("buffering"), L("volume"), L("muted"), L("playbackSpeed"), L("subtitlesTracks"), L("selectedSubtitlesTrackId");
                            break;
                        case "destroy":
                            R("unload"), g = !0, f.removeAllListeners(), clearInterval(u), d && "function" == typeof c.destroy && c.destroy(), r.removeChild(o), r.removeChild(l)
                    }
                }
                this.on = function(e, t) {
                    if (g) throw new Error("Video is destroyed");
                    f.on(e, t)
                }, this.dispatch = function(e) {
                    if (g) throw new Error("Video is destroyed");
                    if (e) switch ((e = a(i(e))).type) {
                        case "observeProp":
                            return t = e.propName, void(v.hasOwnProperty(t) && (f.emit("propValue", t, A(t)), v[t] = !0));
                        case "setProp":
                            return void
                            function(e, t) {
                                switch (e) {
                                    case "paused":
                                        null !== p && (t ? "function" == typeof c.pauseVideo && c.pauseVideo() : "function" == typeof c.playVideo && c.playVideo());
                                        break;
                                    case "time":
                                        null !== p && "function" == typeof c.seekTo && null !== t && isFinite(t) && c.seekTo(parseInt(t, 10) / 1e3);
                                        break;
                                    case "volume":
                                        null !== p && null !== t && isFinite(t) && ("function" == typeof c.unMute && c.unMute(), "function" == typeof c.setVolume && c.setVolume(Math.max(0, Math.min(100, parseInt(t, 10)))), L("muted"), L("volume"));
                                        break;
                                    case "muted":
                                        null !== p && (t ? "function" == typeof c.mute && c.mute() : "function" == typeof c.unMute && c.unMute(), L("muted"));
                                        break;
                                    case "playbackSpeed":
                                        null !== p && "function" == typeof c.setPlaybackRate && isFinite(t) && (c.setPlaybackRate(t), L("playbackSpeed"));
                                        break;
                                    case "selectedSubtitlesTrackId":
                                        if (null !== p) {
                                            m = null;
                                            var r = A("subtitlesTracks").find((function(e) {
                                                return e.id === t
                                            }));
                                            "function" == typeof c.setOption && (r ? (m = r.id, c.setOption("captions", "track", {
                                                languageCode: r.lang
                                            }), f.emit("subtitlesTrackLoaded", r)) : c.setOption("captions", "track", {})), L("selectedSubtitlesTrackId")
                                        }
                                }
                            }(e.propName, e.propValue);
                        case "command":
                            return void R(e.commandName, e.commandArgs)
                    }
                    var t;
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            o.canPlayStream = function(e) {
                return Promise.resolve(e && "string" == typeof e.ytId)
            }, o.manifest = {
                name: "YouTubeVideo",
                external: !1,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "volume", "muted", "playbackSpeed", "subtitlesTracks", "selectedSubtitlesTrackId"],
                commands: ["load", "unload", "destroy"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded"]
            }, e.exports = o
        },
        2198: (e, t, r) => {
            var n = r(4406),
                i = r(1362),
                a = r(7193),
                s = r(5708),
                o = r(1618),
                l = r(659),
                u = r(2752),
                c = r(9066),
                d = r(5659),
                h = r(1210),
                f = r(4603),
                g = r(5896);
            e.exports = function(e, t) {
                return e.stream && "string" != typeof e.stream.externalUrl ? t.chromecastTransport && t.chromecastTransport.getCastState() === cast.framework.CastState.CONNECTED ? n : "string" == typeof e.stream.ytId ? g(f(d)) : "string" == typeof e.stream.playerFrameUrl ? g(c) : t.shellTransport ? h(f(i)) : "string" == typeof e.streamingServerURL ? "Tizen" === e.platform ? h(f(s)) : "webOS" === e.platform ? h(f(u)) : "Titan" === e.platform || "NetTV" === e.platform ? h(f(o)) : "Vidaa" === e.platform ? h(f(l)) : h(f(a)) : "string" == typeof e.stream.url ? "Tizen" === e.platform ? g(f(s)) : "webOS" === e.platform ? g(f(u)) : "Titan" === e.platform || "NetTV" === e.platform ? g(f(o)) : "Vidaa" === e.platform ? g(f(l)) : g(f(a)) : null : null
            }
        },
        2258: e => {
            ! function t(r) {
                e.exports = function() {
                    "use strict";

                    function e(e, t) {
                        var r = Object.keys(e);
                        if (Object.getOwnPropertySymbols) {
                            var n = Object.getOwnPropertySymbols(e);
                            t && (n = n.filter((function(t) {
                                return Object.getOwnPropertyDescriptor(e, t).enumerable
                            }))), r.push.apply(r, n)
                        }
                        return r
                    }

                    function n(t) {
                        for (var r = 1; r < arguments.length; r++) {
                            var n = null != arguments[r] ? arguments[r] : {};
                            r % 2 ? e(Object(n), !0).forEach((function(e) {
                                l(t, e, n[e])
                            })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : e(Object(n)).forEach((function(e) {
                                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e))
                            }))
                        }
                        return t
                    }

                    function i(e, t) {
                        if ("object" != typeof e || !e) return e;
                        var r = e[Symbol.toPrimitive];
                        if (void 0 !== r) {
                            var n = r.call(e, t || "default");
                            if ("object" != typeof n) return n;
                            throw new TypeError("@@toPrimitive must return a primitive value.")
                        }
                        return ("string" === t ? String : Number)(e)
                    }

                    function a(e) {
                        var t = i(e, "string");
                        return "symbol" == typeof t ? t : String(t)
                    }

                    function s(e, t) {
                        for (var r = 0; r < t.length; r++) {
                            var n = t[r];
                            n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, a(n.key), n)
                        }
                    }

                    function o(e, t, r) {
                        return t && s(e.prototype, t), r && s(e, r), Object.defineProperty(e, "prototype", {
                            writable: !1
                        }), e
                    }

                    function l(e, t, r) {
                        return (t = a(t)) in e ? Object.defineProperty(e, t, {
                            value: r,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[t] = r, e
                    }

                    function u() {
                        return u = Object.assign ? Object.assign.bind() : function(e) {
                            for (var t = 1; t < arguments.length; t++) {
                                var r = arguments[t];
                                for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n])
                            }
                            return e
                        }, u.apply(this, arguments)
                    }

                    function c(e, t) {
                        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, h(e, t)
                    }

                    function d(e) {
                        return d = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e) {
                            return e.__proto__ || Object.getPrototypeOf(e)
                        }, d(e)
                    }

                    function h(e, t) {
                        return h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e, t) {
                            return e.__proto__ = t, e
                        }, h(e, t)
                    }

                    function f() {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {}))), !0
                        } catch (e) {
                            return !1
                        }
                    }

                    function g(e, t, r) {
                        return g = f() ? Reflect.construct.bind() : function(e, t, r) {
                            var n = [null];
                            n.push.apply(n, t);
                            var i = new(Function.bind.apply(e, n));
                            return r && h(i, r.prototype), i
                        }, g.apply(null, arguments)
                    }

                    function p(e) {
                        try {
                            return -1 !== Function.toString.call(e).indexOf("[native code]")
                        } catch (t) {
                            return "function" == typeof e
                        }
                    }

                    function m(e) {
                        var t = "function" == typeof Map ? new Map : void 0;
                        return m = function(e) {
                            if (null === e || !p(e)) return e;
                            if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
                            if (void 0 !== t) {
                                if (t.has(e)) return t.get(e);
                                t.set(e, r)
                            }

                            function r() {
                                return g(e, arguments, d(this).constructor)
                            }
                            return r.prototype = Object.create(e.prototype, {
                                constructor: {
                                    value: r,
                                    enumerable: !1,
                                    writable: !0,
                                    configurable: !0
                                }
                            }), h(r, e)
                        }, m(e)
                    }

                    function v(e) {
                        if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return e
                    }

                    function y(e, t) {
                        if (e) {
                            if ("string" == typeof e) return T(e, t);
                            var r = Object.prototype.toString.call(e).slice(8, -1);
                            return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? T(e, t) : void 0
                        }
                    }

                    function T(e, t) {
                        (null == t || t > e.length) && (t = e.length);
                        for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
                        return n
                    }

                    function b(e, t) {
                        var r = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
                        if (r) return (r = r.call(e)).next.bind(r);
                        if (Array.isArray(e) || (r = y(e)) || t && e && "number" == typeof e.length) {
                            r && (e = r);
                            var n = 0;
                            return function() {
                                return n >= e.length ? {
                                    done: !0
                                } : {
                                    done: !1,
                                    value: e[n++]
                                }
                            }
                        }
                        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                    }

                    function E(e) {
                        return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e
                    }
                    var S = {
                        exports: {}
                    };
                    ! function(e) {
                        var t, r, n, i, a;
                        t = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, r = /^(?=([^\/?#]*))\1([^]*)$/, n = /(?:\/|^)\.(?=\/)/g, i = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, a = {
                            buildAbsoluteURL: function(e, t, n) {
                                if (n = n || {}, e = e.trim(), !(t = t.trim())) {
                                    if (!n.alwaysNormalize) return e;
                                    var i = a.parseURL(e);
                                    if (!i) throw new Error("Error trying to parse base URL.");
                                    return i.path = a.normalizePath(i.path), a.buildURLFromParts(i)
                                }
                                var s = a.parseURL(t);
                                if (!s) throw new Error("Error trying to parse relative URL.");
                                if (s.scheme) return n.alwaysNormalize ? (s.path = a.normalizePath(s.path), a.buildURLFromParts(s)) : t;
                                var o = a.parseURL(e);
                                if (!o) throw new Error("Error trying to parse base URL.");
                                if (!o.netLoc && o.path && "/" !== o.path[0]) {
                                    var l = r.exec(o.path);
                                    o.netLoc = l[1], o.path = l[2]
                                }
                                o.netLoc && !o.path && (o.path = "/");
                                var u = {
                                    scheme: o.scheme,
                                    netLoc: s.netLoc,
                                    path: null,
                                    params: s.params,
                                    query: s.query,
                                    fragment: s.fragment
                                };
                                if (!s.netLoc && (u.netLoc = o.netLoc, "/" !== s.path[0]))
                                    if (s.path) {
                                        var c = o.path,
                                            d = c.substring(0, c.lastIndexOf("/") + 1) + s.path;
                                        u.path = a.normalizePath(d)
                                    } else u.path = o.path, s.params || (u.params = o.params, s.query || (u.query = o.query));
                                return null === u.path && (u.path = n.alwaysNormalize ? a.normalizePath(s.path) : s.path), a.buildURLFromParts(u)
                            },
                            parseURL: function(e) {
                                var r = t.exec(e);
                                return r ? {
                                    scheme: r[1] || "",
                                    netLoc: r[2] || "",
                                    path: r[3] || "",
                                    params: r[4] || "",
                                    query: r[5] || "",
                                    fragment: r[6] || ""
                                } : null
                            },
                            normalizePath: function(e) {
                                for (e = e.split("").reverse().join("").replace(n, ""); e.length !== (e = e.replace(i, "")).length;);
                                return e.split("").reverse().join("")
                            },
                            buildURLFromParts: function(e) {
                                return e.scheme + e.netLoc + e.path + e.params + e.query + e.fragment
                            }
                        }, e.exports = a
                    }(S);
                    var A = S.exports,
                        k = Number.isFinite || function(e) {
                            return "number" == typeof e && isFinite(e)
                        },
                        L = Number.isSafeInteger || function(e) {
                            return "number" == typeof e && Math.abs(e) <= R
                        },
                        R = Number.MAX_SAFE_INTEGER || 9007199254740991,
                        I = function(e) {
                            return e.MEDIA_ATTACHING = "hlsMediaAttaching", e.MEDIA_ATTACHED = "hlsMediaAttached", e.MEDIA_DETACHING = "hlsMediaDetaching", e.MEDIA_DETACHED = "hlsMediaDetached", e.BUFFER_RESET = "hlsBufferReset", e.BUFFER_CODECS = "hlsBufferCodecs", e.BUFFER_CREATED = "hlsBufferCreated", e.BUFFER_APPENDING = "hlsBufferAppending", e.BUFFER_APPENDED = "hlsBufferAppended", e.BUFFER_EOS = "hlsBufferEos", e.BUFFER_FLUSHING = "hlsBufferFlushing", e.BUFFER_FLUSHED = "hlsBufferFlushed", e.MANIFEST_LOADING = "hlsManifestLoading", e.MANIFEST_LOADED = "hlsManifestLoaded", e.MANIFEST_PARSED = "hlsManifestParsed", e.LEVEL_SWITCHING = "hlsLevelSwitching", e.LEVEL_SWITCHED = "hlsLevelSwitched", e.LEVEL_LOADING = "hlsLevelLoading", e.LEVEL_LOADED = "hlsLevelLoaded", e.LEVEL_UPDATED = "hlsLevelUpdated", e.LEVEL_PTS_UPDATED = "hlsLevelPtsUpdated", e.LEVELS_UPDATED = "hlsLevelsUpdated", e.AUDIO_TRACKS_UPDATED = "hlsAudioTracksUpdated", e.AUDIO_TRACK_SWITCHING = "hlsAudioTrackSwitching", e.AUDIO_TRACK_SWITCHED = "hlsAudioTrackSwitched", e.AUDIO_TRACK_LOADING = "hlsAudioTrackLoading", e.AUDIO_TRACK_LOADED = "hlsAudioTrackLoaded", e.SUBTITLE_TRACKS_UPDATED = "hlsSubtitleTracksUpdated", e.SUBTITLE_TRACKS_CLEARED = "hlsSubtitleTracksCleared", e.SUBTITLE_TRACK_SWITCH = "hlsSubtitleTrackSwitch", e.SUBTITLE_TRACK_LOADING = "hlsSubtitleTrackLoading", e.SUBTITLE_TRACK_LOADED = "hlsSubtitleTrackLoaded", e.SUBTITLE_FRAG_PROCESSED = "hlsSubtitleFragProcessed", e.CUES_PARSED = "hlsCuesParsed", e.NON_NATIVE_TEXT_TRACKS_FOUND = "hlsNonNativeTextTracksFound", e.INIT_PTS_FOUND = "hlsInitPtsFound", e.FRAG_LOADING = "hlsFragLoading", e.FRAG_LOAD_EMERGENCY_ABORTED = "hlsFragLoadEmergencyAborted", e.FRAG_LOADED = "hlsFragLoaded", e.FRAG_DECRYPTED = "hlsFragDecrypted", e.FRAG_PARSING_INIT_SEGMENT = "hlsFragParsingInitSegment", e.FRAG_PARSING_USERDATA = "hlsFragParsingUserdata", e.FRAG_PARSING_METADATA = "hlsFragParsingMetadata", e.FRAG_PARSED = "hlsFragParsed", e.FRAG_BUFFERED = "hlsFragBuffered", e.FRAG_CHANGED = "hlsFragChanged", e.FPS_DROP = "hlsFpsDrop", e.FPS_DROP_LEVEL_CAPPING = "hlsFpsDropLevelCapping", e.MAX_AUTO_LEVEL_UPDATED = "hlsMaxAutoLevelUpdated", e.ERROR = "hlsError", e.DESTROYING = "hlsDestroying", e.KEY_LOADING = "hlsKeyLoading", e.KEY_LOADED = "hlsKeyLoaded", e.LIVE_BACK_BUFFER_REACHED = "hlsLiveBackBufferReached", e.BACK_BUFFER_REACHED = "hlsBackBufferReached", e.STEERING_MANIFEST_LOADED = "hlsSteeringManifestLoaded", e
                        }({}),
                        w = function(e) {
                            return e.NETWORK_ERROR = "networkError", e.MEDIA_ERROR = "mediaError", e.KEY_SYSTEM_ERROR = "keySystemError", e.MUX_ERROR = "muxError", e.OTHER_ERROR = "otherError", e
                        }({}),
                        D = function(e) {
                            return e.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys", e.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess", e.KEY_SYSTEM_NO_SESSION = "keySystemNoSession", e.KEY_SYSTEM_NO_CONFIGURED_LICENSE = "keySystemNoConfiguredLicense", e.KEY_SYSTEM_LICENSE_REQUEST_FAILED = "keySystemLicenseRequestFailed", e.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = "keySystemServerCertificateRequestFailed", e.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = "keySystemServerCertificateUpdateFailed", e.KEY_SYSTEM_SESSION_UPDATE_FAILED = "keySystemSessionUpdateFailed", e.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = "keySystemStatusOutputRestricted", e.KEY_SYSTEM_STATUS_INTERNAL_ERROR = "keySystemStatusInternalError", e.MANIFEST_LOAD_ERROR = "manifestLoadError", e.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut", e.MANIFEST_PARSING_ERROR = "manifestParsingError", e.MANIFEST_INCOMPATIBLE_CODECS_ERROR = "manifestIncompatibleCodecsError", e.LEVEL_EMPTY_ERROR = "levelEmptyError", e.LEVEL_LOAD_ERROR = "levelLoadError", e.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut", e.LEVEL_PARSING_ERROR = "levelParsingError", e.LEVEL_SWITCH_ERROR = "levelSwitchError", e.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError", e.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut", e.SUBTITLE_LOAD_ERROR = "subtitleTrackLoadError", e.SUBTITLE_TRACK_LOAD_TIMEOUT = "subtitleTrackLoadTimeOut", e.FRAG_LOAD_ERROR = "fragLoadError", e.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut", e.FRAG_DECRYPT_ERROR = "fragDecryptError", e.FRAG_PARSING_ERROR = "fragParsingError", e.FRAG_GAP = "fragGap", e.REMUX_ALLOC_ERROR = "remuxAllocError", e.KEY_LOAD_ERROR = "keyLoadError", e.KEY_LOAD_TIMEOUT = "keyLoadTimeOut", e.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError", e.BUFFER_INCOMPATIBLE_CODECS_ERROR = "bufferIncompatibleCodecsError", e.BUFFER_APPEND_ERROR = "bufferAppendError", e.BUFFER_APPENDING_ERROR = "bufferAppendingError", e.BUFFER_STALLED_ERROR = "bufferStalledError", e.BUFFER_FULL_ERROR = "bufferFullError", e.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole", e.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall", e.INTERNAL_EXCEPTION = "internalException", e.INTERNAL_ABORTED = "aborted", e.UNKNOWN = "unknown", e
                        }({}),
                        C = function() {},
                        x = {
                            trace: C,
                            debug: C,
                            log: C,
                            warn: C,
                            info: C,
                            error: C
                        },
                        _ = x;

                    function O(e) {
                        var t = self.console[e];
                        return t ? t.bind(self.console, "[" + e + "] >") : C
                    }

                    function P(e) {
                        for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++) r[n - 1] = arguments[n];
                        r.forEach((function(t) {
                            _[t] = e[t] ? e[t].bind(e) : O(t)
                        }))
                    }

                    function M(e, t) {
                        if ("object" == typeof console && !0 === e || "object" == typeof e) {
                            P(e, "debug", "log", "info", "warn", "error");
                            try {
                                _.log('Debug logs enabled for "' + t + '" in hls.js version 1.5.5-0.canary.9893')
                            } catch (e) {
                                _ = x
                            }
                        } else _ = x
                    }
                    var F = _,
                        N = /^(\d+)x(\d+)$/,
                        U = /(.+?)=(".*?"|.*?)(?:,|$)/g,
                        B = function() {
                            function e(t) {
                                "string" == typeof t && (t = e.parseAttrList(t)), u(this, t)
                            }
                            var t = e.prototype;
                            return t.decimalInteger = function(e) {
                                var t = parseInt(this[e], 10);
                                return t > Number.MAX_SAFE_INTEGER ? 1 / 0 : t
                            }, t.hexadecimalInteger = function(e) {
                                if (this[e]) {
                                    var t = (this[e] || "0x").slice(2);
                                    t = (1 & t.length ? "0" : "") + t;
                                    for (var r = new Uint8Array(t.length / 2), n = 0; n < t.length / 2; n++) r[n] = parseInt(t.slice(2 * n, 2 * n + 2), 16);
                                    return r
                                }
                                return null
                            }, t.hexadecimalIntegerAsNumber = function(e) {
                                var t = parseInt(this[e], 16);
                                return t > Number.MAX_SAFE_INTEGER ? 1 / 0 : t
                            }, t.decimalFloatingPoint = function(e) {
                                return parseFloat(this[e])
                            }, t.optionalFloat = function(e, t) {
                                var r = this[e];
                                return r ? parseFloat(r) : t
                            }, t.enumeratedString = function(e) {
                                return this[e]
                            }, t.bool = function(e) {
                                return "YES" === this[e]
                            }, t.decimalResolution = function(e) {
                                var t = N.exec(this[e]);
                                if (null !== t) return {
                                    width: parseInt(t[1], 10),
                                    height: parseInt(t[2], 10)
                                }
                            }, e.parseAttrList = function(e) {
                                var t, r = {},
                                    n = '"';
                                for (U.lastIndex = 0; null !== (t = U.exec(e));) {
                                    var i = t[2];
                                    0 === i.indexOf(n) && i.lastIndexOf(n) === i.length - 1 && (i = i.slice(1, -1)), r[t[1].trim()] = i
                                }
                                return r
                            }, o(e, [{
                                key: "clientAttrs",
                                get: function() {
                                    return Object.keys(this).filter((function(e) {
                                        return "X-" === e.substring(0, 2)
                                    }))
                                }
                            }]), e
                        }();

                    function G(e) {
                        return "ID" !== e && "CLASS" !== e && "START-DATE" !== e && "DURATION" !== e && "END-DATE" !== e && "END-ON-NEXT" !== e
                    }

                    function V(e) {
                        return "SCTE35-OUT" === e || "SCTE35-IN" === e
                    }
                    var H = function() {
                            function e(e, t) {
                                if (this.attr = void 0, this._startDate = void 0, this._endDate = void 0, this._badValueForSameId = void 0, t) {
                                    var r = t.attr;
                                    for (var n in r)
                                        if (Object.prototype.hasOwnProperty.call(e, n) && e[n] !== r[n]) {
                                            F.warn('DATERANGE tag attribute: "' + n + '" does not match for tags with ID: "' + e.ID + '"'), this._badValueForSameId = n;
                                            break
                                        }
                                    e = u(new B({}), r, e)
                                }
                                if (this.attr = e, this._startDate = new Date(e["START-DATE"]), "END-DATE" in this.attr) {
                                    var i = new Date(this.attr["END-DATE"]);
                                    k(i.getTime()) && (this._endDate = i)
                                }
                            }
                            return o(e, [{
                                key: "id",
                                get: function() {
                                    return this.attr.ID
                                }
                            }, {
                                key: "class",
                                get: function() {
                                    return this.attr.CLASS
                                }
                            }, {
                                key: "startDate",
                                get: function() {
                                    return this._startDate
                                }
                            }, {
                                key: "endDate",
                                get: function() {
                                    if (this._endDate) return this._endDate;
                                    var e = this.duration;
                                    return null !== e ? new Date(this._startDate.getTime() + 1e3 * e) : null
                                }
                            }, {
                                key: "duration",
                                get: function() {
                                    if ("DURATION" in this.attr) {
                                        var e = this.attr.decimalFloatingPoint("DURATION");
                                        if (k(e)) return e
                                    } else if (this._endDate) return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
                                    return null
                                }
                            }, {
                                key: "plannedDuration",
                                get: function() {
                                    return "PLANNED-DURATION" in this.attr ? this.attr.decimalFloatingPoint("PLANNED-DURATION") : null
                                }
                            }, {
                                key: "endOnNext",
                                get: function() {
                                    return this.attr.bool("END-ON-NEXT")
                                }
                            }, {
                                key: "isValid",
                                get: function() {
                                    return !!this.id && !this._badValueForSameId && k(this.startDate.getTime()) && (null === this.duration || this.duration >= 0) && (!this.endOnNext || !!this.class)
                                }
                            }]), e
                        }(),
                        K = function() {
                            this.aborted = !1, this.loaded = 0, this.retry = 0, this.total = 0, this.chunkCount = 0, this.bwEstimate = 0, this.loading = {
                                start: 0,
                                first: 0,
                                end: 0
                            }, this.parsing = {
                                start: 0,
                                end: 0
                            }, this.buffering = {
                                start: 0,
                                first: 0,
                                end: 0
                            }
                        },
                        j = {
                            AUDIO: "audio",
                            VIDEO: "video",
                            AUDIOVIDEO: "audiovideo"
                        },
                        Y = function() {
                            function e(e) {
                                var t;
                                this._byteRange = null, this._url = null, this.baseurl = void 0, this.relurl = void 0, this.elementaryStreams = ((t = {})[j.AUDIO] = null, t[j.VIDEO] = null, t[j.AUDIOVIDEO] = null, t), this.baseurl = e
                            }
                            return e.prototype.setByteRange = function(e, t) {
                                var r, n = e.split("@", 2);
                                r = 1 === n.length ? (null == t ? void 0 : t.byteRangeEndOffset) || 0 : parseInt(n[1]), this._byteRange = [r, parseInt(n[0]) + r]
                            }, o(e, [{
                                key: "byteRange",
                                get: function() {
                                    return this._byteRange ? this._byteRange : []
                                }
                            }, {
                                key: "byteRangeStartOffset",
                                get: function() {
                                    return this.byteRange[0]
                                }
                            }, {
                                key: "byteRangeEndOffset",
                                get: function() {
                                    return this.byteRange[1]
                                }
                            }, {
                                key: "url",
                                get: function() {
                                    return !this._url && this.baseurl && this.relurl && (this._url = A.buildAbsoluteURL(this.baseurl, this.relurl, {
                                        alwaysNormalize: !0
                                    })), this._url || ""
                                },
                                set: function(e) {
                                    this._url = e
                                }
                            }]), e
                        }(),
                        W = function(e) {
                            function t(t, r) {
                                var n;
                                return (n = e.call(this, r) || this)._decryptdata = null, n.rawProgramDateTime = null, n.programDateTime = null, n.tagList = [], n.duration = 0, n.sn = 0, n.levelkeys = void 0, n.type = void 0, n.loader = null, n.keyLoader = null, n.level = -1, n.cc = 0, n.startPTS = void 0, n.endPTS = void 0, n.startDTS = void 0, n.endDTS = void 0, n.start = 0, n.deltaPTS = void 0, n.maxStartPTS = void 0, n.minEndPTS = void 0, n.stats = new K, n.data = void 0, n.bitrateTest = !1, n.title = null, n.initSegment = null, n.endList = void 0, n.gap = void 0, n.urlId = 0, n.type = t, n
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.setKeyFormat = function(e) {
                                if (this.levelkeys) {
                                    var t = this.levelkeys[e];
                                    t && !this._decryptdata && (this._decryptdata = t.getDecryptData(this.sn))
                                }
                            }, r.abortRequests = function() {
                                var e, t;
                                null == (e = this.loader) || e.abort(), null == (t = this.keyLoader) || t.abort()
                            }, r.setElementaryStreamInfo = function(e, t, r, n, i, a) {
                                void 0 === a && (a = !1);
                                var s = this.elementaryStreams,
                                    o = s[e];
                                o ? (o.startPTS = Math.min(o.startPTS, t), o.endPTS = Math.max(o.endPTS, r), o.startDTS = Math.min(o.startDTS, n), o.endDTS = Math.max(o.endDTS, i)) : s[e] = {
                                    startPTS: t,
                                    endPTS: r,
                                    startDTS: n,
                                    endDTS: i,
                                    partial: a
                                }
                            }, r.clearElementaryStreamInfo = function() {
                                var e = this.elementaryStreams;
                                e[j.AUDIO] = null, e[j.VIDEO] = null, e[j.AUDIOVIDEO] = null
                            }, o(t, [{
                                key: "decryptdata",
                                get: function() {
                                    if (!this.levelkeys && !this._decryptdata) return null;
                                    if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {
                                        var e = this.levelkeys.identity;
                                        if (e) this._decryptdata = e.getDecryptData(this.sn);
                                        else {
                                            var t = Object.keys(this.levelkeys);
                                            if (1 === t.length) return this._decryptdata = this.levelkeys[t[0]].getDecryptData(this.sn)
                                        }
                                    }
                                    return this._decryptdata
                                }
                            }, {
                                key: "end",
                                get: function() {
                                    return this.start + this.duration
                                }
                            }, {
                                key: "endProgramDateTime",
                                get: function() {
                                    if (null === this.programDateTime) return null;
                                    if (!k(this.programDateTime)) return null;
                                    var e = k(this.duration) ? this.duration : 0;
                                    return this.programDateTime + 1e3 * e
                                }
                            }, {
                                key: "encrypted",
                                get: function() {
                                    var e;
                                    if (null != (e = this._decryptdata) && e.encrypted) return !0;
                                    if (this.levelkeys) {
                                        var t = Object.keys(this.levelkeys),
                                            r = t.length;
                                        if (r > 1 || 1 === r && this.levelkeys[t[0]].encrypted) return !0
                                    }
                                    return !1
                                }
                            }]), t
                        }(Y),
                        q = function(e) {
                            function t(t, r, n, i, a) {
                                var s;
                                (s = e.call(this, n) || this).fragOffset = 0, s.duration = 0, s.gap = !1, s.independent = !1, s.relurl = void 0, s.fragment = void 0, s.index = void 0, s.stats = new K, s.duration = t.decimalFloatingPoint("DURATION"), s.gap = t.bool("GAP"), s.independent = t.bool("INDEPENDENT"), s.relurl = t.enumeratedString("URI"), s.fragment = r, s.index = i;
                                var o = t.enumeratedString("BYTERANGE");
                                return o && s.setByteRange(o, a), a && (s.fragOffset = a.fragOffset + a.duration), s
                            }
                            return c(t, e), o(t, [{
                                key: "start",
                                get: function() {
                                    return this.fragment.start + this.fragOffset
                                }
                            }, {
                                key: "end",
                                get: function() {
                                    return this.start + this.duration
                                }
                            }, {
                                key: "loaded",
                                get: function() {
                                    var e = this.elementaryStreams;
                                    return !!(e.audio || e.video || e.audiovideo)
                                }
                            }]), t
                        }(Y),
                        z = 10,
                        X = function() {
                            function e(e) {
                                this.PTSKnown = !1, this.alignedSliding = !1, this.averagetargetduration = void 0, this.endCC = 0, this.endSN = 0, this.fragments = void 0, this.fragmentHint = void 0, this.partList = null, this.dateRanges = void 0, this.live = !0, this.ageHeader = 0, this.advancedDateTime = void 0, this.updated = !0, this.advanced = !0, this.availabilityDelay = void 0, this.misses = 0, this.startCC = 0, this.startSN = 0, this.startTimeOffset = null, this.targetduration = 0, this.totalduration = 0, this.type = null, this.url = void 0, this.m3u8 = "", this.version = null, this.canBlockReload = !1, this.canSkipUntil = 0, this.canSkipDateRanges = !1, this.skippedSegments = 0, this.recentlyRemovedDateranges = void 0, this.partHoldBack = 0, this.holdBack = 0, this.partTarget = 0, this.preloadHint = void 0, this.renditionReports = void 0, this.tuneInGoal = 0, this.deltaUpdateFailed = void 0, this.driftStartTime = 0, this.driftEndTime = 0, this.driftStart = 0, this.driftEnd = 0, this.encryptedFragments = void 0, this.playlistParsingError = null, this.variableList = null, this.hasVariableRefs = !1, this.fragments = [], this.encryptedFragments = [], this.dateRanges = {}, this.url = e
                            }
                            return e.prototype.reloaded = function(e) {
                                if (!e) return this.advanced = !0, void(this.updated = !0);
                                var t = this.lastPartSn - e.lastPartSn,
                                    r = this.lastPartIndex - e.lastPartIndex;
                                this.updated = this.endSN !== e.endSN || !!r || !!t || !this.live, this.advanced = this.endSN > e.endSN || t > 0 || 0 === t && r > 0, this.updated || this.advanced ? this.misses = Math.floor(.6 * e.misses) : this.misses = e.misses + 1, this.availabilityDelay = e.availabilityDelay
                            }, o(e, [{
                                key: "hasProgramDateTime",
                                get: function() {
                                    return !!this.fragments.length && k(this.fragments[this.fragments.length - 1].programDateTime)
                                }
                            }, {
                                key: "levelTargetDuration",
                                get: function() {
                                    return this.averagetargetduration || this.targetduration || z
                                }
                            }, {
                                key: "drift",
                                get: function() {
                                    var e = this.driftEndTime - this.driftStartTime;
                                    return e > 0 ? 1e3 * (this.driftEnd - this.driftStart) / e : 1
                                }
                            }, {
                                key: "edge",
                                get: function() {
                                    return this.partEnd || this.fragmentEnd
                                }
                            }, {
                                key: "partEnd",
                                get: function() {
                                    var e;
                                    return null != (e = this.partList) && e.length ? this.partList[this.partList.length - 1].end : this.fragmentEnd
                                }
                            }, {
                                key: "fragmentEnd",
                                get: function() {
                                    var e;
                                    return null != (e = this.fragments) && e.length ? this.fragments[this.fragments.length - 1].end : 0
                                }
                            }, {
                                key: "age",
                                get: function() {
                                    return this.advancedDateTime ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3 : 0
                                }
                            }, {
                                key: "lastPartIndex",
                                get: function() {
                                    var e;
                                    return null != (e = this.partList) && e.length ? this.partList[this.partList.length - 1].index : -1
                                }
                            }, {
                                key: "lastPartSn",
                                get: function() {
                                    var e;
                                    return null != (e = this.partList) && e.length ? this.partList[this.partList.length - 1].fragment.sn : this.endSN
                                }
                            }]), e
                        }();

                    function $(e) {
                        return Uint8Array.from(atob(e), (function(e) {
                            return e.charCodeAt(0)
                        }))
                    }

                    function J(e) {
                        var t = ee(e).subarray(0, 16),
                            r = new Uint8Array(16);
                        return r.set(t, 16 - t.length), r
                    }

                    function Q(e) {
                        var t = function(e, t, r) {
                            var n = e[t];
                            e[t] = e[r], e[r] = n
                        };
                        t(e, 0, 3), t(e, 1, 2), t(e, 4, 5), t(e, 6, 7)
                    }

                    function Z(e) {
                        var t = e.split(":"),
                            r = null;
                        if ("data" === t[0] && 2 === t.length) {
                            var n = t[1].split(";"),
                                i = n[n.length - 1].split(",");
                            if (2 === i.length) {
                                var a = "base64" === i[0],
                                    s = i[1];
                                a ? (n.splice(-1, 1), r = $(s)) : r = J(s)
                            }
                        }
                        return r
                    }

                    function ee(e) {
                        return Uint8Array.from(unescape(encodeURIComponent(e)), (function(e) {
                            return e.charCodeAt(0)
                        }))
                    }
                    var te = "undefined" != typeof self ? self : void 0,
                        re = {
                            CLEARKEY: "org.w3.clearkey",
                            FAIRPLAY: "com.apple.fps",
                            PLAYREADY: "com.microsoft.playready",
                            WIDEVINE: "com.widevine.alpha"
                        },
                        ne = {
                            CLEARKEY: "org.w3.clearkey",
                            FAIRPLAY: "com.apple.streamingkeydelivery",
                            PLAYREADY: "com.microsoft.playready",
                            WIDEVINE: "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"
                        };

                    function ie(e) {
                        switch (e) {
                            case ne.FAIRPLAY:
                                return re.FAIRPLAY;
                            case ne.PLAYREADY:
                                return re.PLAYREADY;
                            case ne.WIDEVINE:
                                return re.WIDEVINE;
                            case ne.CLEARKEY:
                                return re.CLEARKEY
                        }
                    }
                    var ae = {
                        WIDEVINE: "edef8ba979d64acea3c827dcd51d21ed"
                    };

                    function se(e) {
                        if (e === ae.WIDEVINE) return re.WIDEVINE
                    }

                    function oe(e) {
                        switch (e) {
                            case re.FAIRPLAY:
                                return ne.FAIRPLAY;
                            case re.PLAYREADY:
                                return ne.PLAYREADY;
                            case re.WIDEVINE:
                                return ne.WIDEVINE;
                            case re.CLEARKEY:
                                return ne.CLEARKEY
                        }
                    }

                    function le(e) {
                        var t = e.drmSystems,
                            r = e.widevineLicenseUrl,
                            n = t ? [re.FAIRPLAY, re.WIDEVINE, re.PLAYREADY, re.CLEARKEY].filter((function(e) {
                                return !!t[e]
                            })) : [];
                        return !n[re.WIDEVINE] && r && n.push(re.WIDEVINE), n
                    }
                    var ue, ce = null != te && null != (ue = te.navigator) && ue.requestMediaKeySystemAccess ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator) : null;

                    function de(e, t, r, n) {
                        var i;
                        switch (e) {
                            case re.FAIRPLAY:
                                i = ["cenc", "sinf"];
                                break;
                            case re.WIDEVINE:
                            case re.PLAYREADY:
                                i = ["cenc"];
                                break;
                            case re.CLEARKEY:
                                i = ["cenc", "keyids"];
                                break;
                            default:
                                throw new Error("Unknown key-system: " + e)
                        }
                        return he(i, t, r, n)
                    }

                    function he(e, t, r, n) {
                        return [{
                            initDataTypes: e,
                            persistentState: n.persistentState || "optional",
                            distinctiveIdentifier: n.distinctiveIdentifier || "optional",
                            sessionTypes: n.sessionTypes || [n.sessionType || "temporary"],
                            audioCapabilities: t.map((function(e) {
                                return {
                                    contentType: 'audio/mp4; codecs="' + e + '"',
                                    robustness: n.audioRobustness || "",
                                    encryptionScheme: n.audioEncryptionScheme || null
                                }
                            })),
                            videoCapabilities: r.map((function(e) {
                                return {
                                    contentType: 'video/mp4; codecs="' + e + '"',
                                    robustness: n.videoRobustness || "",
                                    encryptionScheme: n.videoEncryptionScheme || null
                                }
                            }))
                        }]
                    }

                    function fe(e, t, r) {
                        return Uint8Array.prototype.slice ? e.slice(t, r) : new Uint8Array(Array.prototype.slice.call(e, t, r))
                    }
                    var ge, pe = function(e, t) {
                            return t + 10 <= e.length && 73 === e[t] && 68 === e[t + 1] && 51 === e[t + 2] && e[t + 3] < 255 && e[t + 4] < 255 && e[t + 6] < 128 && e[t + 7] < 128 && e[t + 8] < 128 && e[t + 9] < 128
                        },
                        me = function(e, t) {
                            return t + 10 <= e.length && 51 === e[t] && 68 === e[t + 1] && 73 === e[t + 2] && e[t + 3] < 255 && e[t + 4] < 255 && e[t + 6] < 128 && e[t + 7] < 128 && e[t + 8] < 128 && e[t + 9] < 128
                        },
                        ve = function(e, t) {
                            for (var r = t, n = 0; pe(e, t);) n += 10, n += ye(e, t + 6), me(e, t + 10) && (n += 10), t += n;
                            if (n > 0) return e.subarray(r, r + n)
                        },
                        ye = function(e, t) {
                            var r = 0;
                            return r = (127 & e[t]) << 21, r |= (127 & e[t + 1]) << 14, r |= (127 & e[t + 2]) << 7, r |= 127 & e[t + 3]
                        },
                        Te = function(e, t) {
                            return pe(e, t) && ye(e, t + 6) + 10 <= e.length - t
                        },
                        be = function(e) {
                            for (var t = Ae(e), r = 0; r < t.length; r++) {
                                var n = t[r];
                                if (Ee(n)) return we(n)
                            }
                        },
                        Ee = function(e) {
                            return e && "PRIV" === e.key && "com.apple.streaming.transportStreamTimestamp" === e.info
                        },
                        Se = function(e) {
                            var t = String.fromCharCode(e[0], e[1], e[2], e[3]),
                                r = ye(e, 4),
                                n = 10;
                            return {
                                type: t,
                                size: r,
                                data: e.subarray(n, n + r)
                            }
                        },
                        Ae = function(e) {
                            for (var t = 0, r = []; pe(e, t);) {
                                for (var n = ye(e, t + 6), i = (t += 10) + n; t + 8 < i;) {
                                    var a = Se(e.subarray(t)),
                                        s = ke(a);
                                    s && r.push(s), t += a.size + 10
                                }
                                me(e, t) && (t += 10)
                            }
                            return r
                        },
                        ke = function(e) {
                            return "PRIV" === e.type ? Le(e) : "W" === e.type[0] ? Ie(e) : Re(e)
                        },
                        Le = function(e) {
                            if (!(e.size < 2)) {
                                var t = De(e.data, !0),
                                    r = new Uint8Array(e.data.subarray(t.length + 1));
                                return {
                                    key: e.type,
                                    info: t,
                                    data: r.buffer
                                }
                            }
                        },
                        Re = function(e) {
                            if (!(e.size < 2)) {
                                if ("TXXX" === e.type) {
                                    var t = 1,
                                        r = De(e.data.subarray(t), !0);
                                    t += r.length + 1;
                                    var n = De(e.data.subarray(t));
                                    return {
                                        key: e.type,
                                        info: r,
                                        data: n
                                    }
                                }
                                var i = De(e.data.subarray(1));
                                return {
                                    key: e.type,
                                    data: i
                                }
                            }
                        },
                        Ie = function(e) {
                            if ("WXXX" === e.type) {
                                if (e.size < 2) return;
                                var t = 1,
                                    r = De(e.data.subarray(t), !0);
                                t += r.length + 1;
                                var n = De(e.data.subarray(t));
                                return {
                                    key: e.type,
                                    info: r,
                                    data: n
                                }
                            }
                            var i = De(e.data);
                            return {
                                key: e.type,
                                data: i
                            }
                        },
                        we = function(e) {
                            if (8 === e.data.byteLength) {
                                var t = new Uint8Array(e.data),
                                    r = 1 & t[3],
                                    n = (t[4] << 23) + (t[5] << 15) + (t[6] << 7) + t[7];
                                return n /= 45, r && (n += 47721858.84), Math.round(n)
                            }
                        },
                        De = function(e, t) {
                            void 0 === t && (t = !1);
                            var r = Ce();
                            if (r) {
                                var n = r.decode(e);
                                if (t) {
                                    var i = n.indexOf("\0");
                                    return -1 !== i ? n.substring(0, i) : n
                                }
                                return n.replace(/\0/g, "")
                            }
                            for (var a, s, o, l = e.length, u = "", c = 0; c < l;) {
                                if (0 === (a = e[c++]) && t) return u;
                                if (0 !== a && 3 !== a) switch (a >> 4) {
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                    case 7:
                                        u += String.fromCharCode(a);
                                        break;
                                    case 12:
                                    case 13:
                                        s = e[c++], u += String.fromCharCode((31 & a) << 6 | 63 & s);
                                        break;
                                    case 14:
                                        s = e[c++], o = e[c++], u += String.fromCharCode((15 & a) << 12 | (63 & s) << 6 | 63 & o)
                                }
                            }
                            return u
                        };

                    function Ce() {
                        if (!navigator.userAgent.includes("PlayStation 4")) return ge || void 0 === self.TextDecoder || (ge = new self.TextDecoder("utf-8")), ge
                    }
                    var xe = {
                            hexDump: function(e) {
                                for (var t = "", r = 0; r < e.length; r++) {
                                    var n = e[r].toString(16);
                                    n.length < 2 && (n = "0" + n), t += n
                                }
                                return t
                            }
                        },
                        _e = Math.pow(2, 32) - 1,
                        Oe = [].push,
                        Pe = {
                            video: 1,
                            audio: 2,
                            id3: 3,
                            text: 4
                        };

                    function Me(e) {
                        return String.fromCharCode.apply(null, e)
                    }

                    function Fe(e, t) {
                        var r = e[t] << 8 | e[t + 1];
                        return r < 0 ? 65536 + r : r
                    }

                    function Ne(e, t) {
                        var r = Be(e, t);
                        return r < 0 ? 4294967296 + r : r
                    }

                    function Ue(e, t) {
                        var r = Ne(e, t);
                        return r *= Math.pow(2, 32), r += Ne(e, t + 4)
                    }

                    function Be(e, t) {
                        return e[t] << 24 | e[t + 1] << 16 | e[t + 2] << 8 | e[t + 3]
                    }

                    function Ge(e, t, r) {
                        e[t] = r >> 24, e[t + 1] = r >> 16 & 255, e[t + 2] = r >> 8 & 255, e[t + 3] = 255 & r
                    }

                    function Ve(e) {
                        for (var t = e.byteLength, r = 0; r < t;) {
                            var n = Ne(e, r);
                            if (n > 8 && 109 === e[r + 4] && 111 === e[r + 5] && 111 === e[r + 6] && 102 === e[r + 7]) return !0;
                            r = n > 1 ? r + n : t
                        }
                        return !1
                    }

                    function He(e, t) {
                        var r = [];
                        if (!t.length) return r;
                        for (var n = e.byteLength, i = 0; i < n;) {
                            var a = Ne(e, i),
                                s = a > 1 ? i + a : n;
                            if (Me(e.subarray(i + 4, i + 8)) === t[0])
                                if (1 === t.length) r.push(e.subarray(i + 8, s));
                                else {
                                    var o = He(e.subarray(i + 8, s), t.slice(1));
                                    o.length && Oe.apply(r, o)
                                }
                            i = s
                        }
                        return r
                    }

                    function Ke(e) {
                        var t = [],
                            r = e[0],
                            n = 8,
                            i = Ne(e, n);
                        n += 4;
                        var a = 0,
                            s = 0;
                        0 === r ? (a = Ne(e, n), s = Ne(e, n + 4), n += 8) : (a = Ue(e, n), s = Ue(e, n + 8), n += 16), n += 2;
                        var o = e.length + s,
                            l = Fe(e, n);
                        n += 2;
                        for (var u = 0; u < l; u++) {
                            var c = n,
                                d = Ne(e, c);
                            c += 4;
                            var h = 2147483647 & d;
                            if (1 == (2147483648 & d) >>> 31) return F.warn("SIDX has hierarchical references (not supported)"), null;
                            var f = Ne(e, c);
                            c += 4, t.push({
                                referenceSize: h,
                                subsegmentDuration: f,
                                info: {
                                    duration: f / i,
                                    start: o,
                                    end: o + h - 1
                                }
                            }), o += h, n = c += 4
                        }
                        return {
                            earliestPresentationTime: a,
                            timescale: i,
                            version: r,
                            referencesCount: l,
                            references: t
                        }
                    }

                    function je(e) {
                        for (var t = [], r = He(e, ["moov", "trak"]), i = 0; i < r.length; i++) {
                            var a = r[i],
                                s = He(a, ["tkhd"])[0];
                            if (s) {
                                var o = s[0],
                                    l = Ne(s, 0 === o ? 12 : 20),
                                    u = He(a, ["mdia", "mdhd"])[0];
                                if (u) {
                                    var c = Ne(u, 0 === (o = u[0]) ? 12 : 20),
                                        d = He(a, ["mdia", "hdlr"])[0];
                                    if (d) {
                                        var h = Me(d.subarray(8, 12)),
                                            f = {
                                                soun: j.AUDIO,
                                                vide: j.VIDEO
                                            }[h];
                                        if (f) {
                                            var g = Ye(He(a, ["mdia", "minf", "stbl", "stsd"])[0]);
                                            t[l] = {
                                                timescale: c,
                                                type: f
                                            }, t[f] = n({
                                                timescale: c,
                                                id: l
                                            }, g)
                                        }
                                    }
                                }
                            }
                        }
                        return He(e, ["moov", "mvex", "trex"]).forEach((function(e) {
                            var r = Ne(e, 4),
                                n = t[r];
                            n && (n.default = {
                                duration: Ne(e, 12),
                                flags: Ne(e, 20)
                            })
                        })), t
                    }

                    function Ye(e) {
                        var t = e.subarray(8),
                            r = t.subarray(86),
                            n = Me(t.subarray(4, 8)),
                            i = n,
                            a = "enca" === n || "encv" === n;
                        if (a) {
                            var s = He(t, [n])[0];
                            He(s.subarray("enca" === n ? 28 : 78), ["sinf"]).forEach((function(e) {
                                var t = He(e, ["schm"])[0];
                                if (t) {
                                    var r = Me(t.subarray(4, 8));
                                    if ("cbcs" === r || "cenc" === r) {
                                        var n = He(e, ["frma"])[0];
                                        n && (i = Me(n))
                                    }
                                }
                            }))
                        }
                        switch (i) {
                            case "avc1":
                            case "avc2":
                            case "avc3":
                            case "avc4":
                                var o = He(r, ["avcC"])[0];
                                i += "." + qe(o[1]) + qe(o[2]) + qe(o[3]);
                                break;
                            case "mp4a":
                                var l = He(t, [n])[0],
                                    u = He(l.subarray(28), ["esds"])[0];
                                if (u && u.length > 12) {
                                    var c = 4;
                                    if (3 !== u[c++]) break;
                                    c = We(u, c), c += 2;
                                    var d = u[c++];
                                    if (128 & d && (c += 2), 64 & d && (c += u[c++]), 4 !== u[c++]) break;
                                    c = We(u, c);
                                    var h = u[c++];
                                    if (64 !== h) break;
                                    if (i += "." + qe(h), c += 12, 5 !== u[c++]) break;
                                    c = We(u, c);
                                    var f = u[c++],
                                        g = (248 & f) >> 3;
                                    31 === g && (g += 1 + ((7 & f) << 3) + ((224 & u[c]) >> 5)), i += "." + g
                                }
                                break;
                            case "hvc1":
                            case "hev1":
                                var p = He(r, ["hvcC"])[0],
                                    m = p[1],
                                    v = ["", "A", "B", "C"][m >> 6],
                                    y = 31 & m,
                                    T = Ne(p, 2),
                                    b = (32 & m) >> 5 ? "H" : "L",
                                    E = p[12],
                                    S = p.subarray(6, 12);
                                i += "." + v + y, i += "." + T.toString(16).toUpperCase(), i += "." + b + E;
                                for (var A = "", k = S.length; k--;) {
                                    var L = S[k];
                                    (L || A) && (A = "." + L.toString(16).toUpperCase() + A)
                                }
                                i += A;
                                break;
                            case "dvh1":
                            case "dvhe":
                                var R = He(r, ["dvcC"])[0],
                                    I = R[2] >> 1 & 127,
                                    w = R[2] << 5 & 32 | R[3] >> 3 & 31;
                                i += "." + ze(I) + "." + ze(w);
                                break;
                            case "vp09":
                                var D = He(r, ["vpcC"])[0],
                                    C = D[4],
                                    x = D[5],
                                    _ = D[6] >> 4 & 15;
                                i += "." + ze(C) + "." + ze(x) + "." + ze(_);
                                break;
                            case "av01":
                                var O = He(r, ["av1C"])[0],
                                    P = O[1] >>> 5,
                                    M = 31 & O[1],
                                    F = O[2] >>> 7 ? "H" : "M",
                                    N = (64 & O[2]) >> 6,
                                    U = (32 & O[2]) >> 5,
                                    B = 2 === P && N ? U ? 12 : 10 : N ? 10 : 8,
                                    G = (16 & O[2]) >> 4,
                                    V = (8 & O[2]) >> 3,
                                    H = (4 & O[2]) >> 2,
                                    K = 3 & O[2],
                                    j = 1,
                                    Y = 1,
                                    W = 1,
                                    q = 0;
                                i += "." + P + "." + ze(M) + F + "." + ze(B) + "." + G + "." + V + H + K + "." + ze(j) + "." + ze(Y) + "." + ze(W) + "." + q
                        }
                        return {
                            codec: i,
                            encrypted: a
                        }
                    }

                    function We(e, t) {
                        for (var r = t + 5; 128 & e[t++] && t < r;);
                        return t
                    }

                    function qe(e) {
                        return ("0" + e.toString(16).toUpperCase()).slice(-2)
                    }

                    function ze(e) {
                        return (e < 10 ? "0" : "") + e
                    }

                    function Xe(e, t) {
                        if (!e || !t) return e;
                        var r = t.keyId;
                        return r && t.isCommonEncryption && He(e, ["moov", "trak"]).forEach((function(e) {
                            var t = He(e, ["mdia", "minf", "stbl", "stsd"])[0].subarray(8),
                                n = He(t, ["enca"]),
                                i = n.length > 0;
                            i || (n = He(t, ["encv"])), n.forEach((function(e) {
                                He(i ? e.subarray(28) : e.subarray(78), ["sinf"]).forEach((function(e) {
                                    var t = $e(e);
                                    if (t) {
                                        var n = t.subarray(8, 24);
                                        n.some((function(e) {
                                            return 0 !== e
                                        })) || (F.log("[eme] Patching keyId in 'enc" + (i ? "a" : "v") + ">sinf>>tenc' box: " + xe.hexDump(n) + " -> " + xe.hexDump(r)), t.set(r, 8))
                                    }
                                }))
                            }))
                        })), e
                    }

                    function $e(e) {
                        var t = He(e, ["schm"])[0];
                        if (t) {
                            var r = Me(t.subarray(4, 8));
                            if ("cbcs" === r || "cenc" === r) return He(e, ["schi", "tenc"])[0]
                        }
                        return F.error("[eme] missing 'schm' box"), null
                    }

                    function Je(e, t) {
                        return He(t, ["moof", "traf"]).reduce((function(t, r) {
                            var n = He(r, ["tfdt"])[0],
                                i = n[0],
                                a = He(r, ["tfhd"]).reduce((function(t, r) {
                                    var a = Ne(r, 4),
                                        s = e[a];
                                    if (s) {
                                        var o = Ne(n, 4);
                                        if (1 === i) {
                                            if (o === _e) return F.warn("[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time"), t;
                                            o *= _e + 1, o += Ne(n, 8)
                                        }
                                        var l = o / (s.timescale || 9e4);
                                        if (k(l) && (null === t || l < t)) return l
                                    }
                                    return t
                                }), null);
                            return null !== a && k(a) && (null === t || a < t) ? a : t
                        }), null)
                    }

                    function Qe(e, t) {
                        for (var r = 1 / 0, n = 0, i = 0, a = He(e, ["sidx"]), s = 0; s < a.length; s++) {
                            var o = Ke(a[s]);
                            if (null != o && o.references) {
                                r = Math.min(r, o.earliestPresentationTime / o.timescale);
                                var l = o.references.reduce((function(e, t) {
                                    return e + t.info.duration || 0
                                }), 0);
                                i = (n = Math.max(n, l + o.earliestPresentationTime / o.timescale)) - r
                            }
                        }
                        if (i && k(i)) return i;
                        for (var u = 0, c = 0, d = 0, h = He(e, ["moof", "traf"]), f = 0; f < h.length; f++) {
                            var g = h[f],
                                p = He(g, ["tfhd"])[0],
                                m = t[Ne(p, 4)];
                            if (m) {
                                var v = m.default,
                                    y = Ne(p, 0) | (null == v ? void 0 : v.flags),
                                    T = null == v ? void 0 : v.duration;
                                8 & y && (T = Ne(p, 2 & y ? 12 : 8));
                                for (var b = m.timescale || 9e4, E = He(g, ["trun"]), S = 0; S < E.length; S++) !(u = Ze(E[S])) && T && (u = T * Ne(E[S], 4)), m.type === j.VIDEO ? c += u / b : m.type === j.AUDIO && (d += u / b)
                            }
                        }
                        return c || d
                    }

                    function Ze(e) {
                        var t = Ne(e, 0),
                            r = 8;
                        1 & t && (r += 4), 4 & t && (r += 4);
                        for (var n = 0, i = Ne(e, 4), a = 0; a < i; a++) 256 & t && (n += Ne(e, r), r += 4), 512 & t && (r += 4), 1024 & t && (r += 4), 2048 & t && (r += 4);
                        return n
                    }

                    function et(e, t, r) {
                        He(t, ["moof", "traf"]).forEach((function(t) {
                            He(t, ["tfhd"]).forEach((function(n) {
                                var i = Ne(n, 4),
                                    a = e[i];
                                if (a) {
                                    var s = a.timescale || 9e4;
                                    He(t, ["tfdt"]).forEach((function(e) {
                                        var t = e[0],
                                            n = r * s;
                                        if (n) {
                                            var i = Ne(e, 4);
                                            if (0 === t) i -= n, Ge(e, 4, i = Math.max(i, 0));
                                            else {
                                                i *= Math.pow(2, 32), i += Ne(e, 8), i -= n, i = Math.max(i, 0);
                                                var a = Math.floor(i / (_e + 1)),
                                                    o = Math.floor(i % (_e + 1));
                                                Ge(e, 4, a), Ge(e, 8, o)
                                            }
                                        }
                                    }))
                                }
                            }))
                        }))
                    }

                    function tt(e) {
                        var t = {
                                valid: null,
                                remainder: null
                            },
                            r = He(e, ["moof"]);
                        if (r.length < 2) return t.remainder = e, t;
                        var n = r[r.length - 1];
                        return t.valid = fe(e, 0, n.byteOffset - 8), t.remainder = fe(e, n.byteOffset - 8), t
                    }

                    function rt(e, t) {
                        var r = new Uint8Array(e.length + t.length);
                        return r.set(e), r.set(t, e.length), r
                    }

                    function nt(e, t) {
                        var r = [],
                            n = t.samples,
                            i = t.timescale,
                            a = t.id,
                            s = !1;
                        return He(n, ["moof"]).map((function(o) {
                            var l = o.byteOffset - 8;
                            He(o, ["traf"]).map((function(o) {
                                var u = He(o, ["tfdt"]).map((function(e) {
                                    var t = e[0],
                                        r = Ne(e, 4);
                                    return 1 === t && (r *= Math.pow(2, 32), r += Ne(e, 8)), r / i
                                }))[0];
                                return void 0 !== u && (e = u), He(o, ["tfhd"]).map((function(u) {
                                    var c = Ne(u, 4),
                                        d = 16777215 & Ne(u, 0),
                                        h = 0,
                                        f = !!(16 & d),
                                        g = 0,
                                        p = !!(32 & d),
                                        m = 8;
                                    c === a && (!!(1 & d) && (m += 8), !!(2 & d) && (m += 4), !!(8 & d) && (h = Ne(u, m), m += 4), f && (g = Ne(u, m), m += 4), p && (m += 4), "video" === t.type && (s = it(t.codec)), He(o, ["trun"]).map((function(a) {
                                        var o = a[0],
                                            u = 16777215 & Ne(a, 0),
                                            c = !!(1 & u),
                                            d = 0,
                                            f = !!(4 & u),
                                            p = !!(256 & u),
                                            m = 0,
                                            v = !!(512 & u),
                                            y = 0,
                                            T = !!(1024 & u),
                                            b = !!(2048 & u),
                                            E = 0,
                                            S = Ne(a, 4),
                                            A = 8;
                                        c && (d = Ne(a, A), A += 4), f && (A += 4);
                                        for (var k = d + l, L = 0; L < S; L++) {
                                            if (p ? (m = Ne(a, A), A += 4) : m = h, v ? (y = Ne(a, A), A += 4) : y = g, T && (A += 4), b && (E = 0 === o ? Ne(a, A) : Be(a, A), A += 4), t.type === j.VIDEO)
                                                for (var R = 0; R < y;) {
                                                    var I = Ne(n, k);
                                                    at(s, n[k += 4]) && st(n.subarray(k, k + I), s ? 2 : 1, e + E / i, r), k += I, R += I + 4
                                                }
                                            e += m / i
                                        }
                                    })))
                                }))
                            }))
                        })), r
                    }

                    function it(e) {
                        if (!e) return !1;
                        var t = e.indexOf("."),
                            r = t < 0 ? e : e.substring(0, t);
                        return "hvc1" === r || "hev1" === r || "dvh1" === r || "dvhe" === r
                    }

                    function at(e, t) {
                        if (e) {
                            var r = t >> 1 & 63;
                            return 39 === r || 40 === r
                        }
                        return 6 == (31 & t)
                    }

                    function st(e, t, r, n) {
                        var i = ot(e),
                            a = 0;
                        a += t;
                        for (var s = 0, o = 0, l = 0; a < i.length;) {
                            s = 0;
                            do {
                                if (a >= i.length) break;
                                s += l = i[a++]
                            } while (255 === l);
                            o = 0;
                            do {
                                if (a >= i.length) break;
                                o += l = i[a++]
                            } while (255 === l);
                            var u = i.length - a,
                                c = a;
                            if (o < u) a += o;
                            else if (o > u) {
                                F.error("Malformed SEI payload. " + o + " is too small, only " + u + " bytes left to parse.");
                                break
                            }
                            if (4 === s) {
                                if (181 === i[c++]) {
                                    var d = Fe(i, c);
                                    if (c += 2, 49 === d) {
                                        var h = Ne(i, c);
                                        if (c += 4, 1195456820 === h) {
                                            var f = i[c++];
                                            if (3 === f) {
                                                var g = i[c++],
                                                    p = 64 & g,
                                                    m = p ? 2 + 3 * (31 & g) : 0,
                                                    v = new Uint8Array(m);
                                                if (p) {
                                                    v[0] = g;
                                                    for (var y = 1; y < m; y++) v[y] = i[c++]
                                                }
                                                n.push({
                                                    type: f,
                                                    payloadType: s,
                                                    pts: r,
                                                    bytes: v
                                                })
                                            }
                                        }
                                    }
                                }
                            } else if (5 === s && o > 16) {
                                for (var T = [], b = 0; b < 16; b++) {
                                    var E = i[c++].toString(16);
                                    T.push(1 == E.length ? "0" + E : E), 3 !== b && 5 !== b && 7 !== b && 9 !== b || T.push("-")
                                }
                                for (var S = o - 16, A = new Uint8Array(S), k = 0; k < S; k++) A[k] = i[c++];
                                n.push({
                                    payloadType: s,
                                    pts: r,
                                    uuid: T.join(""),
                                    userData: De(A),
                                    userDataBytes: A
                                })
                            }
                        }
                    }

                    function ot(e) {
                        for (var t = e.byteLength, r = [], n = 1; n < t - 2;) 0 === e[n] && 0 === e[n + 1] && 3 === e[n + 2] ? (r.push(n + 2), n += 2) : n++;
                        if (0 === r.length) return e;
                        var i = t - r.length,
                            a = new Uint8Array(i),
                            s = 0;
                        for (n = 0; n < i; s++, n++) s === r[0] && (s++, r.shift()), a[n] = e[s];
                        return a
                    }

                    function lt(e) {
                        var t = e[0],
                            r = "",
                            n = "",
                            i = 0,
                            a = 0,
                            s = 0,
                            o = 0,
                            l = 0,
                            u = 0;
                        if (0 === t) {
                            for (;
                                "\0" !== Me(e.subarray(u, u + 1));) r += Me(e.subarray(u, u + 1)), u += 1;
                            for (r += Me(e.subarray(u, u + 1)), u += 1;
                                "\0" !== Me(e.subarray(u, u + 1));) n += Me(e.subarray(u, u + 1)), u += 1;
                            n += Me(e.subarray(u, u + 1)), u += 1, i = Ne(e, 12), a = Ne(e, 16), o = Ne(e, 20), l = Ne(e, 24), u = 28
                        } else if (1 === t) {
                            i = Ne(e, u += 4);
                            var c = Ne(e, u += 4),
                                d = Ne(e, u += 4);
                            for (u += 4, s = Math.pow(2, 32) * c + d, L(s) || (s = Number.MAX_SAFE_INTEGER, F.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box")), o = Ne(e, u), l = Ne(e, u += 4), u += 4;
                                "\0" !== Me(e.subarray(u, u + 1));) r += Me(e.subarray(u, u + 1)), u += 1;
                            for (r += Me(e.subarray(u, u + 1)), u += 1;
                                "\0" !== Me(e.subarray(u, u + 1));) n += Me(e.subarray(u, u + 1)), u += 1;
                            n += Me(e.subarray(u, u + 1)), u += 1
                        }
                        return {
                            schemeIdUri: r,
                            value: n,
                            timeScale: i,
                            presentationTime: s,
                            presentationTimeDelta: a,
                            eventDuration: o,
                            id: l,
                            payload: e.subarray(u, e.byteLength)
                        }
                    }

                    function ut(e) {
                        for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++) r[n - 1] = arguments[n];
                        for (var i = r.length, a = 8, s = i; s--;) a += r[s].byteLength;
                        var o = new Uint8Array(a);
                        for (o[0] = a >> 24 & 255, o[1] = a >> 16 & 255, o[2] = a >> 8 & 255, o[3] = 255 & a, o.set(e, 4), s = 0, a = 8; s < i; s++) o.set(r[s], a), a += r[s].byteLength;
                        return o
                    }

                    function ct(e, t, r) {
                        if (16 !== e.byteLength) throw new RangeError("Invalid system id");
                        var n, i, a;
                        if (t) {
                            n = 1, i = new Uint8Array(16 * t.length);
                            for (var s = 0; s < t.length; s++) {
                                var o = t[s];
                                if (16 !== o.byteLength) throw new RangeError("Invalid key");
                                i.set(o, 16 * s)
                            }
                        } else n = 0, i = new Uint8Array;
                        n > 0 ? (a = new Uint8Array(4), t.length > 0 && new DataView(a.buffer).setUint32(0, t.length, !1)) : a = new Uint8Array;
                        var l = new Uint8Array(4);
                        return r && r.byteLength > 0 && new DataView(l.buffer).setUint32(0, r.byteLength, !1), ut([112, 115, 115, 104], new Uint8Array([n, 0, 0, 0]), e, a, i, l, r || new Uint8Array)
                    }

                    function dt(e) {
                        if (!(e instanceof ArrayBuffer) || e.byteLength < 32) return null;
                        var t = {
                                version: 0,
                                systemId: "",
                                kids: null,
                                data: null
                            },
                            r = new DataView(e),
                            n = r.getUint32(0);
                        if (e.byteLength !== n && n > 44) return null;
                        if (1886614376 !== r.getUint32(4)) return null;
                        if (t.version = r.getUint32(8) >>> 24, t.version > 1) return null;
                        t.systemId = xe.hexDump(new Uint8Array(e, 12, 16));
                        var i = r.getUint32(28);
                        if (0 === t.version) {
                            if (n - 32 < i) return null;
                            t.data = new Uint8Array(e, 32, i)
                        } else if (1 === t.version) {
                            t.kids = [];
                            for (var a = 0; a < i; a++) t.kids.push(new Uint8Array(e, 32 + 16 * a, 16))
                        }
                        return t
                    }
                    var ht = {},
                        ft = function() {
                            function e(e, t, r, n, i) {
                                void 0 === n && (n = [1]), void 0 === i && (i = null), this.uri = void 0, this.method = void 0, this.keyFormat = void 0, this.keyFormatVersions = void 0, this.encrypted = void 0, this.isCommonEncryption = void 0, this.iv = null, this.key = null, this.keyId = null, this.pssh = null, this.method = e, this.uri = t, this.keyFormat = r, this.keyFormatVersions = n, this.iv = i, this.encrypted = !!e && "NONE" !== e, this.isCommonEncryption = this.encrypted && "AES-128" !== e
                            }
                            e.clearKeyUriToKeyIdMap = function() {
                                ht = {}
                            };
                            var t = e.prototype;
                            return t.isSupported = function() {
                                if (this.method) {
                                    if ("AES-128" === this.method || "NONE" === this.method) return !0;
                                    if ("identity" === this.keyFormat) return "SAMPLE-AES" === this.method;
                                    switch (this.keyFormat) {
                                        case ne.FAIRPLAY:
                                        case ne.WIDEVINE:
                                        case ne.PLAYREADY:
                                        case ne.CLEARKEY:
                                            return -1 !== ["ISO-23001-7", "SAMPLE-AES", "SAMPLE-AES-CENC", "SAMPLE-AES-CTR"].indexOf(this.method)
                                    }
                                }
                                return !1
                            }, t.getDecryptData = function(t) {
                                if (!this.encrypted || !this.uri) return null;
                                if ("AES-128" === this.method && this.uri && !this.iv) {
                                    "number" != typeof t && ("AES-128" !== this.method || this.iv || F.warn('missing IV for initialization segment with method="' + this.method + '" - compliance issue'), t = 0);
                                    var r = gt(t);
                                    return new e(this.method, this.uri, "identity", this.keyFormatVersions, r)
                                }
                                var n = Z(this.uri);
                                if (n) switch (this.keyFormat) {
                                    case ne.WIDEVINE:
                                        this.pssh = n, n.length >= 22 && (this.keyId = n.subarray(n.length - 22, n.length - 6));
                                        break;
                                    case ne.PLAYREADY:
                                        var i = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
                                        this.pssh = ct(i, null, n);
                                        var a = new Uint16Array(n.buffer, n.byteOffset, n.byteLength / 2),
                                            s = String.fromCharCode.apply(null, Array.from(a)),
                                            o = s.substring(s.indexOf("<"), s.length),
                                            l = (new DOMParser).parseFromString(o, "text/xml").getElementsByTagName("KID")[0];
                                        if (l) {
                                            var u = l.childNodes[0] ? l.childNodes[0].nodeValue : l.getAttribute("VALUE");
                                            if (u) {
                                                var c = $(u).subarray(0, 16);
                                                Q(c), this.keyId = c
                                            }
                                        }
                                        break;
                                    default:
                                        var d = n.subarray(0, 16);
                                        if (16 !== d.length) {
                                            var h = new Uint8Array(16);
                                            h.set(d, 16 - d.length), d = h
                                        }
                                        this.keyId = d
                                }
                                if (!this.keyId || 16 !== this.keyId.byteLength) {
                                    var f = ht[this.uri];
                                    if (!f) {
                                        var g = Object.keys(ht).length % Number.MAX_SAFE_INTEGER;
                                        f = new Uint8Array(16), new DataView(f.buffer, 12, 4).setUint32(0, g), ht[this.uri] = f
                                    }
                                    this.keyId = f
                                }
                                return this
                            }, e
                        }();

                    function gt(e) {
                        for (var t = new Uint8Array(16), r = 12; r < 16; r++) t[r] = e >> 8 * (15 - r) & 255;
                        return t
                    }
                    var pt = /\{\$([a-zA-Z0-9-_]+)\}/g;

                    function mt(e) {
                        return pt.test(e)
                    }

                    function vt(e, t, r) {
                        if (null !== e.variableList || e.hasVariableRefs)
                            for (var n = r.length; n--;) {
                                var i = r[n],
                                    a = t[i];
                                a && (t[i] = yt(e, a))
                            }
                    }

                    function yt(e, t) {
                        if (null !== e.variableList || e.hasVariableRefs) {
                            var r = e.variableList;
                            return t.replace(pt, (function(t) {
                                var n = t.substring(2, t.length - 1),
                                    i = null == r ? void 0 : r[n];
                                return void 0 === i ? (e.playlistParsingError || (e.playlistParsingError = new Error('Missing preceding EXT-X-DEFINE tag for Variable Reference: "' + n + '"')), t) : i
                            }))
                        }
                        return t
                    }

                    function Tt(e, t, r) {
                        var n, i, a = e.variableList;
                        if (a || (e.variableList = a = {}), "QUERYPARAM" in t) {
                            n = t.QUERYPARAM;
                            try {
                                var s = new self.URL(r).searchParams;
                                if (!s.has(n)) throw new Error('"' + n + '" does not match any query parameter in URI: "' + r + '"');
                                i = s.get(n)
                            } catch (t) {
                                e.playlistParsingError || (e.playlistParsingError = new Error("EXT-X-DEFINE QUERYPARAM: " + t.message))
                            }
                        } else n = t.NAME, i = t.VALUE;
                        n in a ? e.playlistParsingError || (e.playlistParsingError = new Error('EXT-X-DEFINE duplicate Variable Name declarations: "' + n + '"')) : a[n] = i || ""
                    }

                    function bt(e, t, r) {
                        var n = t.IMPORT;
                        if (r && n in r) {
                            var i = e.variableList;
                            i || (e.variableList = i = {}), i[n] = r[n]
                        } else e.playlistParsingError || (e.playlistParsingError = new Error('EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "' + n + '"'))
                    }

                    function Et(e) {
                        if (void 0 === e && (e = !0), "undefined" != typeof self) return (e || !self.MediaSource) && self.ManagedMediaSource || self.MediaSource || self.WebKitMediaSource
                    }
                    var St = {
                        audio: {
                            a3ds: 1,
                            "ac-3": .95,
                            "ac-4": 1,
                            alac: .9,
                            alaw: 1,
                            dra1: 1,
                            "dts+": 1,
                            "dts-": 1,
                            dtsc: 1,
                            dtse: 1,
                            dtsh: 1,
                            "ec-3": .9,
                            enca: 1,
                            fLaC: .9,
                            flac: .9,
                            FLAC: .9,
                            g719: 1,
                            g726: 1,
                            m4ae: 1,
                            mha1: 1,
                            mha2: 1,
                            mhm1: 1,
                            mhm2: 1,
                            mlpa: 1,
                            mp4a: 1,
                            "raw ": 1,
                            Opus: 1,
                            opus: 1,
                            samr: 1,
                            sawb: 1,
                            sawp: 1,
                            sevc: 1,
                            sqcp: 1,
                            ssmv: 1,
                            twos: 1,
                            ulaw: 1
                        },
                        video: {
                            avc1: 1,
                            avc2: 1,
                            avc3: 1,
                            avc4: 1,
                            avcp: 1,
                            av01: .8,
                            drac: 1,
                            dva1: 1,
                            dvav: 1,
                            dvh1: .7,
                            dvhe: .7,
                            encv: 1,
                            hev1: .75,
                            hvc1: .75,
                            mjp2: 1,
                            mp4v: 1,
                            mvc1: 1,
                            mvc2: 1,
                            mvc3: 1,
                            mvc4: 1,
                            resv: 1,
                            rv60: 1,
                            s263: 1,
                            svc1: 1,
                            svc2: 1,
                            "vc-1": 1,
                            vp08: 1,
                            vp09: .9
                        },
                        text: {
                            stpp: 1,
                            wvtt: 1
                        }
                    };

                    function At(e, t) {
                        var r = St[t];
                        return !!r && !!r[e.slice(0, 4)]
                    }

                    function kt(e, t, r) {
                        return void 0 === r && (r = !0), !e.split(",").some((function(e) {
                            return !Lt(e, t, r)
                        }))
                    }

                    function Lt(e, t, r) {
                        var n;
                        void 0 === r && (r = !0);
                        var i = Et(r);
                        return null != (n = null == i ? void 0 : i.isTypeSupported(Rt(e, t))) && n
                    }

                    function Rt(e, t) {
                        return t + '/mp4;codecs="' + e + '"'
                    }

                    function It(e) {
                        if (e) {
                            var t = e.substring(0, 4);
                            return St.video[t]
                        }
                        return 2
                    }

                    function wt(e) {
                        return e.split(",").reduce((function(e, t) {
                            var r = St.video[t];
                            return r ? (2 * r + e) / (e ? 3 : 2) : (St.audio[t] + e) / (e ? 2 : 1)
                        }), 0)
                    }
                    var Dt = {};

                    function Ct(e, t) {
                        if (void 0 === t && (t = !0), Dt[e]) return Dt[e];
                        for (var r = {
                                flac: ["flac", "fLaC", "FLAC"],
                                opus: ["opus", "Opus"]
                            }[e], n = 0; n < r.length; n++)
                            if (Lt(r[n], "audio", t)) return Dt[e] = r[n], r[n];
                        return e
                    }
                    var xt = /flac|opus/i;

                    function _t(e, t) {
                        return void 0 === t && (t = !0), e.replace(xt, (function(e) {
                            return Ct(e.toLowerCase(), t)
                        }))
                    }

                    function Ot(e, t) {
                        return e && "mp4a" !== e ? e : t
                    }

                    function Pt(e) {
                        var t = e.split(".");
                        if (t.length > 2) {
                            var r = t.shift() + ".";
                            return r += parseInt(t.shift()).toString(16), r += ("000" + parseInt(t.shift()).toString(16)).slice(-4)
                        }
                        return e
                    }
                    var Mt = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g,
                        Ft = /#EXT-X-MEDIA:(.*)/g,
                        Nt = /^#EXT(?:INF|-X-TARGETDURATION):/m,
                        Ut = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /(?!#) *(\S[\S ]*)/.source, /#EXT-X-BYTERANGE:*(.+)/.source, /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /#.*/.source].join("|"), "g"),
                        Bt = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|")),
                        Gt = function() {
                            function e() {}
                            return e.findGroup = function(e, t) {
                                for (var r = 0; r < e.length; r++) {
                                    var n = e[r];
                                    if (n.id === t) return n
                                }
                            }, e.resolve = function(e, t) {
                                return A.buildAbsoluteURL(t, e, {
                                    alwaysNormalize: !0
                                })
                            }, e.isMediaPlaylist = function(e) {
                                return Nt.test(e)
                            }, e.parseMasterPlaylist = function(t, r) {
                                var n, i = {
                                        contentSteering: null,
                                        levels: [],
                                        playlistParsingError: null,
                                        sessionData: null,
                                        sessionKeys: null,
                                        startTimeOffset: null,
                                        variableList: null,
                                        hasVariableRefs: mt(t)
                                    },
                                    a = [];
                                for (Mt.lastIndex = 0; null != (n = Mt.exec(t));)
                                    if (n[1]) {
                                        var s, o = new B(n[1]);
                                        vt(i, o, ["CODECS", "SUPPLEMENTAL-CODECS", "ALLOWED-CPC", "PATHWAY-ID", "STABLE-VARIANT-ID", "AUDIO", "VIDEO", "SUBTITLES", "CLOSED-CAPTIONS", "NAME"]);
                                        var l = yt(i, n[2]),
                                            u = {
                                                attrs: o,
                                                bitrate: o.decimalInteger("BANDWIDTH") || o.decimalInteger("AVERAGE-BANDWIDTH"),
                                                name: o.NAME,
                                                url: e.resolve(l, r)
                                            },
                                            c = o.decimalResolution("RESOLUTION");
                                        c && (u.width = c.width, u.height = c.height), Kt(o.CODECS, u), null != (s = u.unknownCodecs) && s.length || a.push(u), i.levels.push(u)
                                    } else if (n[3]) {
                                    var d = n[3],
                                        h = n[4];
                                    switch (d) {
                                        case "SESSION-DATA":
                                            var f = new B(h);
                                            vt(i, f, ["DATA-ID", "LANGUAGE", "VALUE", "URI"]);
                                            var g = f["DATA-ID"];
                                            g && (null === i.sessionData && (i.sessionData = {}), i.sessionData[g] = f);
                                            break;
                                        case "SESSION-KEY":
                                            var p = Vt(h, r, i);
                                            p.encrypted && p.isSupported() ? (null === i.sessionKeys && (i.sessionKeys = []), i.sessionKeys.push(p)) : F.warn('[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' + h + '"');
                                            break;
                                        case "DEFINE":
                                            var m = new B(h);
                                            vt(i, m, ["NAME", "VALUE", "QUERYPARAM"]), Tt(i, m, r);
                                            break;
                                        case "CONTENT-STEERING":
                                            var v = new B(h);
                                            vt(i, v, ["SERVER-URI", "PATHWAY-ID"]), i.contentSteering = {
                                                uri: e.resolve(v["SERVER-URI"], r),
                                                pathwayId: v["PATHWAY-ID"] || "."
                                            };
                                            break;
                                        case "START":
                                            i.startTimeOffset = Ht(h)
                                    }
                                }
                                var y = a.length > 0 && a.length < i.levels.length;
                                return i.levels = y ? a : i.levels, 0 === i.levels.length && (i.playlistParsingError = new Error("no levels found in manifest")), i
                            }, e.parseMasterPlaylistMedia = function(t, r, n) {
                                var i, a = {},
                                    s = n.levels,
                                    o = {
                                        AUDIO: s.map((function(e) {
                                            return {
                                                id: e.attrs.AUDIO,
                                                audioCodec: e.audioCodec
                                            }
                                        })),
                                        SUBTITLES: s.map((function(e) {
                                            return {
                                                id: e.attrs.SUBTITLES,
                                                textCodec: e.textCodec
                                            }
                                        })),
                                        "CLOSED-CAPTIONS": []
                                    },
                                    l = 0;
                                for (Ft.lastIndex = 0; null !== (i = Ft.exec(t));) {
                                    var u = new B(i[1]),
                                        c = u.TYPE;
                                    if (c) {
                                        var d = o[c],
                                            h = a[c] || [];
                                        a[c] = h, vt(n, u, ["URI", "GROUP-ID", "LANGUAGE", "ASSOC-LANGUAGE", "STABLE-RENDITION-ID", "NAME", "INSTREAM-ID", "CHARACTERISTICS", "CHANNELS"]);
                                        var f = u.LANGUAGE,
                                            g = u["ASSOC-LANGUAGE"],
                                            p = u.CHANNELS,
                                            m = u.CHARACTERISTICS,
                                            v = u["INSTREAM-ID"],
                                            y = {
                                                attrs: u,
                                                bitrate: 0,
                                                id: l++,
                                                groupId: u["GROUP-ID"] || "",
                                                name: u.NAME || f || "",
                                                type: c,
                                                default: u.bool("DEFAULT"),
                                                autoselect: u.bool("AUTOSELECT"),
                                                forced: u.bool("FORCED"),
                                                lang: f,
                                                url: u.URI ? e.resolve(u.URI, r) : ""
                                            };
                                        if (g && (y.assocLang = g), p && (y.channels = p), m && (y.characteristics = m), v && (y.instreamId = v), null != d && d.length) {
                                            var T = e.findGroup(d, y.groupId) || d[0];
                                            jt(y, T, "audioCodec"), jt(y, T, "textCodec")
                                        }
                                        h.push(y)
                                    }
                                }
                                return a
                            }, e.parseLevelPlaylist = function(e, t, r, n, i, a) {
                                var s, o, l, c = new X(t),
                                    d = c.fragments,
                                    h = null,
                                    f = 0,
                                    g = 0,
                                    p = 0,
                                    m = 0,
                                    v = null,
                                    y = new W(n, t),
                                    T = -1,
                                    b = !1,
                                    E = null;
                                for (Ut.lastIndex = 0, c.m3u8 = e, c.hasVariableRefs = mt(e); null !== (s = Ut.exec(e));) {
                                    b && (b = !1, (y = new W(n, t)).start = p, y.sn = f, y.cc = m, y.level = r, h && (y.initSegment = h, y.rawProgramDateTime = h.rawProgramDateTime, h.rawProgramDateTime = null, E && (y.setByteRange(E), E = null)));
                                    var S = s[1];
                                    if (S) {
                                        y.duration = parseFloat(S);
                                        var A = (" " + s[2]).slice(1);
                                        y.title = A || null, y.tagList.push(A ? ["INF", S, A] : ["INF", S])
                                    } else if (s[3]) {
                                        if (k(y.duration)) {
                                            y.start = p, l && zt(y, l, c), y.sn = f, y.level = r, y.cc = m, d.push(y);
                                            var L = (" " + s[3]).slice(1);
                                            y.relurl = yt(c, L), Wt(y, v), v = y, p += y.duration, f++, g = 0, b = !0
                                        }
                                    } else if (s[4]) {
                                        var R = (" " + s[4]).slice(1);
                                        v ? y.setByteRange(R, v) : y.setByteRange(R)
                                    } else if (s[5]) y.rawProgramDateTime = (" " + s[5]).slice(1), y.tagList.push(["PROGRAM-DATE-TIME", y.rawProgramDateTime]), -1 === T && (T = d.length);
                                    else {
                                        if (!(s = s[0].match(Bt))) {
                                            F.warn("No matches on slow regex match for level playlist!");
                                            continue
                                        }
                                        for (o = 1; o < s.length && void 0 === s[o]; o++);
                                        var I = (" " + s[o]).slice(1),
                                            w = (" " + s[o + 1]).slice(1),
                                            D = s[o + 2] ? (" " + s[o + 2]).slice(1) : "";
                                        switch (I) {
                                            case "PLAYLIST-TYPE":
                                                c.type = w.toUpperCase();
                                                break;
                                            case "MEDIA-SEQUENCE":
                                                f = c.startSN = parseInt(w);
                                                break;
                                            case "SKIP":
                                                var C = new B(w);
                                                vt(c, C, ["RECENTLY-REMOVED-DATERANGES"]);
                                                var x = C.decimalInteger("SKIPPED-SEGMENTS");
                                                if (k(x)) {
                                                    c.skippedSegments = x;
                                                    for (var _ = x; _--;) d.unshift(null);
                                                    f += x
                                                }
                                                var O = C.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                                                O && (c.recentlyRemovedDateranges = O.split("\t"));
                                                break;
                                            case "TARGETDURATION":
                                                c.targetduration = Math.max(parseInt(w), 1);
                                                break;
                                            case "VERSION":
                                                c.version = parseInt(w);
                                                break;
                                            case "INDEPENDENT-SEGMENTS":
                                            case "EXTM3U":
                                                break;
                                            case "ENDLIST":
                                                c.live = !1;
                                                break;
                                            case "#":
                                                (w || D) && y.tagList.push(D ? [w, D] : [w]);
                                                break;
                                            case "DISCONTINUITY":
                                                m++, y.tagList.push(["DIS"]);
                                                break;
                                            case "GAP":
                                                y.gap = !0, y.tagList.push([I]);
                                                break;
                                            case "BITRATE":
                                                y.tagList.push([I, w]);
                                                break;
                                            case "DATERANGE":
                                                var P = new B(w);
                                                vt(c, P, ["ID", "CLASS", "START-DATE", "END-DATE", "SCTE35-CMD", "SCTE35-OUT", "SCTE35-IN"]), vt(c, P, P.clientAttrs);
                                                var M = new H(P, c.dateRanges[P.ID]);
                                                M.isValid || c.skippedSegments ? c.dateRanges[M.id] = M : F.warn('Ignoring invalid DATERANGE tag: "' + w + '"'), y.tagList.push(["EXT-X-DATERANGE", w]);
                                                break;
                                            case "DEFINE":
                                                var N = new B(w);
                                                vt(c, N, ["NAME", "VALUE", "IMPORT", "QUERYPARAM"]), "IMPORT" in N ? bt(c, N, a) : Tt(c, N, t);
                                                break;
                                            case "DISCONTINUITY-SEQUENCE":
                                                m = parseInt(w);
                                                break;
                                            case "KEY":
                                                var U = Vt(w, t, c);
                                                if (U.isSupported()) {
                                                    if ("NONE" === U.method) {
                                                        l = void 0;
                                                        break
                                                    }
                                                    l || (l = {}), l[U.keyFormat] && (l = u({}, l)), l[U.keyFormat] = U
                                                } else F.warn('[Keys] Ignoring invalid EXT-X-KEY tag: "' + w + '"');
                                                break;
                                            case "START":
                                                c.startTimeOffset = Ht(w);
                                                break;
                                            case "MAP":
                                                var G = new B(w);
                                                if (vt(c, G, ["BYTERANGE", "URI"]), y.duration) {
                                                    var V = new W(n, t);
                                                    qt(V, G, r, l), h = V, y.initSegment = h, h.rawProgramDateTime && !y.rawProgramDateTime && (y.rawProgramDateTime = h.rawProgramDateTime)
                                                } else {
                                                    var K = y.byteRangeEndOffset;
                                                    if (K) {
                                                        var j = y.byteRangeStartOffset;
                                                        E = K - j + "@" + j
                                                    } else E = null;
                                                    qt(y, G, r, l), h = y, b = !0
                                                }
                                                break;
                                            case "SERVER-CONTROL":
                                                var Y = new B(w);
                                                c.canBlockReload = Y.bool("CAN-BLOCK-RELOAD"), c.canSkipUntil = Y.optionalFloat("CAN-SKIP-UNTIL", 0), c.canSkipDateRanges = c.canSkipUntil > 0 && Y.bool("CAN-SKIP-DATERANGES"), c.partHoldBack = Y.optionalFloat("PART-HOLD-BACK", 0), c.holdBack = Y.optionalFloat("HOLD-BACK", 0);
                                                break;
                                            case "PART-INF":
                                                var z = new B(w);
                                                c.partTarget = z.decimalFloatingPoint("PART-TARGET");
                                                break;
                                            case "PART":
                                                var $ = c.partList;
                                                $ || ($ = c.partList = []);
                                                var J = g > 0 ? $[$.length - 1] : void 0,
                                                    Q = g++,
                                                    Z = new B(w);
                                                vt(c, Z, ["BYTERANGE", "URI"]);
                                                var ee = new q(Z, y, t, Q, J);
                                                $.push(ee), y.duration += ee.duration;
                                                break;
                                            case "PRELOAD-HINT":
                                                var te = new B(w);
                                                vt(c, te, ["URI"]), c.preloadHint = te;
                                                break;
                                            case "RENDITION-REPORT":
                                                var re = new B(w);
                                                vt(c, re, ["URI"]), c.renditionReports = c.renditionReports || [], c.renditionReports.push(re);
                                                break;
                                            default:
                                                F.warn("line parsed but not handled: " + s)
                                        }
                                    }
                                }
                                v && !v.relurl ? (d.pop(), p -= v.duration, c.partList && (c.fragmentHint = v)) : c.partList && (Wt(y, v), y.cc = m, c.fragmentHint = y, l && zt(y, l, c));
                                var ne = d.length,
                                    ie = d[0],
                                    ae = d[ne - 1];
                                if ((p += c.skippedSegments * c.targetduration) > 0 && ne && ae) {
                                    c.averagetargetduration = p / ne;
                                    var se = ae.sn;
                                    c.endSN = "initSegment" !== se ? se : 0, c.live || (ae.endList = !0), ie && (c.startCC = ie.cc)
                                } else c.endSN = 0, c.startCC = 0;
                                return c.fragmentHint && (p += c.fragmentHint.duration), c.totalduration = p, c.endCC = m, T > 0 && Yt(d, T), c
                            }, e
                        }();

                    function Vt(e, t, r) {
                        var n, i, a = new B(e);
                        vt(r, a, ["KEYFORMAT", "KEYFORMATVERSIONS", "URI", "IV", "URI"]);
                        var s = null != (n = a.METHOD) ? n : "",
                            o = a.URI,
                            l = a.hexadecimalInteger("IV"),
                            u = a.KEYFORMATVERSIONS,
                            c = null != (i = a.KEYFORMAT) ? i : "identity";
                        o && a.IV && !l && F.error("Invalid IV: " + a.IV);
                        var d = o ? Gt.resolve(o, t) : "",
                            h = (u || "1").split("/").map(Number).filter(Number.isFinite);
                        return new ft(s, d, c, h, l)
                    }

                    function Ht(e) {
                        var t = new B(e).decimalFloatingPoint("TIME-OFFSET");
                        return k(t) ? t : null
                    }

                    function Kt(e, t) {
                        var r = (e || "").split(/[ ,]+/).filter((function(e) {
                            return e
                        }));
                        ["video", "audio", "text"].forEach((function(e) {
                            var n = r.filter((function(t) {
                                return At(t, e)
                            }));
                            n.length && (t[e + "Codec"] = n.join(","), r = r.filter((function(e) {
                                return -1 === n.indexOf(e)
                            })))
                        })), t.unknownCodecs = r
                    }

                    function jt(e, t, r) {
                        var n = t[r];
                        n && (e[r] = n)
                    }

                    function Yt(e, t) {
                        for (var r = e[t], n = t; n--;) {
                            var i = e[n];
                            if (!i) return;
                            i.programDateTime = r.programDateTime - 1e3 * i.duration, r = i
                        }
                    }

                    function Wt(e, t) {
                        e.rawProgramDateTime ? e.programDateTime = Date.parse(e.rawProgramDateTime) : null != t && t.programDateTime && (e.programDateTime = t.endProgramDateTime), k(e.programDateTime) || (e.programDateTime = null, e.rawProgramDateTime = null)
                    }

                    function qt(e, t, r, n) {
                        e.relurl = t.URI, t.BYTERANGE && e.setByteRange(t.BYTERANGE), e.level = r, e.sn = "initSegment", n && (e.levelkeys = n), e.initSegment = null
                    }

                    function zt(e, t, r) {
                        e.levelkeys = t;
                        var n = r.encryptedFragments;
                        n.length && n[n.length - 1].levelkeys === t || !Object.keys(t).some((function(e) {
                            return t[e].isCommonEncryption
                        })) || n.push(e)
                    }
                    var Xt = {
                            MANIFEST: "manifest",
                            LEVEL: "level",
                            AUDIO_TRACK: "audioTrack",
                            SUBTITLE_TRACK: "subtitleTrack"
                        },
                        $t = {
                            MAIN: "main",
                            AUDIO: "audio",
                            SUBTITLE: "subtitle"
                        };

                    function Jt(e) {
                        switch (e.type) {
                            case Xt.AUDIO_TRACK:
                                return $t.AUDIO;
                            case Xt.SUBTITLE_TRACK:
                                return $t.SUBTITLE;
                            default:
                                return $t.MAIN
                        }
                    }

                    function Qt(e, t) {
                        var r = e.url;
                        return void 0 !== r && 0 !== r.indexOf("data:") || (r = t.url), r
                    }
                    var Zt = function() {
                        function e(e) {
                            this.hls = void 0, this.loaders = Object.create(null), this.variableList = null, this.hls = e, this.registerListeners()
                        }
                        var t = e.prototype;
                        return t.startLoad = function(e) {}, t.stopLoad = function() {
                            this.destroyInternalLoaders()
                        }, t.registerListeners = function() {
                            var e = this.hls;
                            e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.LEVEL_LOADING, this.onLevelLoading, this), e.on(I.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), e.on(I.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this)
                        }, t.unregisterListeners = function() {
                            var e = this.hls;
                            e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.LEVEL_LOADING, this.onLevelLoading, this), e.off(I.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), e.off(I.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this)
                        }, t.createInternalLoader = function(e) {
                            var t = this.hls.config,
                                r = t.pLoader,
                                n = t.loader,
                                i = new(r || n)(t);
                            return this.loaders[e.type] = i, i
                        }, t.getInternalLoader = function(e) {
                            return this.loaders[e.type]
                        }, t.resetInternalLoader = function(e) {
                            this.loaders[e] && delete this.loaders[e]
                        }, t.destroyInternalLoaders = function() {
                            for (var e in this.loaders) {
                                var t = this.loaders[e];
                                t && t.destroy(), this.resetInternalLoader(e)
                            }
                        }, t.destroy = function() {
                            this.variableList = null, this.unregisterListeners(), this.destroyInternalLoaders()
                        }, t.onManifestLoading = function(e, t) {
                            var r = t.url;
                            this.variableList = null, this.load({
                                id: null,
                                level: 0,
                                responseType: "text",
                                type: Xt.MANIFEST,
                                url: r,
                                deliveryDirectives: null
                            })
                        }, t.onLevelLoading = function(e, t) {
                            var r = t.id,
                                n = t.level,
                                i = t.pathwayId,
                                a = t.url,
                                s = t.deliveryDirectives;
                            this.load({
                                id: r,
                                level: n,
                                pathwayId: i,
                                responseType: "text",
                                type: Xt.LEVEL,
                                url: a,
                                deliveryDirectives: s
                            })
                        }, t.onAudioTrackLoading = function(e, t) {
                            var r = t.id,
                                n = t.groupId,
                                i = t.url,
                                a = t.deliveryDirectives;
                            this.load({
                                id: r,
                                groupId: n,
                                level: null,
                                responseType: "text",
                                type: Xt.AUDIO_TRACK,
                                url: i,
                                deliveryDirectives: a
                            })
                        }, t.onSubtitleTrackLoading = function(e, t) {
                            var r = t.id,
                                n = t.groupId,
                                i = t.url,
                                a = t.deliveryDirectives;
                            this.load({
                                id: r,
                                groupId: n,
                                level: null,
                                responseType: "text",
                                type: Xt.SUBTITLE_TRACK,
                                url: i,
                                deliveryDirectives: a
                            })
                        }, t.load = function(e) {
                            var t, r, n, i = this,
                                a = this.hls.config,
                                s = this.getInternalLoader(e);
                            if (s) {
                                var o = s.context;
                                if (o && o.url === e.url && o.level === e.level) return void F.trace("[playlist-loader]: playlist request ongoing");
                                F.log("[playlist-loader]: aborting previous loader for type: " + e.type), s.abort()
                            }
                            if (r = e.type === Xt.MANIFEST ? a.manifestLoadPolicy.default : u({}, a.playlistLoadPolicy.default, {
                                    timeoutRetry: null,
                                    errorRetry: null
                                }), s = this.createInternalLoader(e), k(null == (t = e.deliveryDirectives) ? void 0 : t.part) && (e.type === Xt.LEVEL && null !== e.level ? n = this.hls.levels[e.level].details : e.type === Xt.AUDIO_TRACK && null !== e.id ? n = this.hls.audioTracks[e.id].details : e.type === Xt.SUBTITLE_TRACK && null !== e.id && (n = this.hls.subtitleTracks[e.id].details), n)) {
                                var l = n.partTarget,
                                    c = n.targetduration;
                                if (l && c) {
                                    var d = 1e3 * Math.max(3 * l, .8 * c);
                                    r = u({}, r, {
                                        maxTimeToFirstByteMs: Math.min(d, r.maxTimeToFirstByteMs),
                                        maxLoadTimeMs: Math.min(d, r.maxTimeToFirstByteMs)
                                    })
                                }
                            }
                            var h = r.errorRetry || r.timeoutRetry || {},
                                f = {
                                    loadPolicy: r,
                                    timeout: r.maxLoadTimeMs,
                                    maxRetry: h.maxNumRetry || 0,
                                    retryDelay: h.retryDelayMs || 0,
                                    maxRetryDelay: h.maxRetryDelayMs || 0
                                },
                                g = {
                                    onSuccess: function(e, t, r, n) {
                                        var a = i.getInternalLoader(r);
                                        i.resetInternalLoader(r.type);
                                        var s = e.data;
                                        0 === s.indexOf("#EXTM3U") ? (t.parsing.start = performance.now(), Gt.isMediaPlaylist(s) ? i.handleTrackOrLevelPlaylist(e, t, r, n || null, a) : i.handleMasterPlaylist(e, t, r, n)) : i.handleManifestParsingError(e, r, new Error("no EXTM3U delimiter"), n || null, t)
                                    },
                                    onError: function(e, t, r, n) {
                                        i.handleNetworkError(t, r, !1, e, n)
                                    },
                                    onTimeout: function(e, t, r) {
                                        i.handleNetworkError(t, r, !0, void 0, e)
                                    }
                                };
                            s.load(e, f, g)
                        }, t.handleMasterPlaylist = function(e, t, r, n) {
                            var i = this.hls,
                                a = e.data,
                                s = Qt(e, r),
                                o = Gt.parseMasterPlaylist(a, s);
                            if (o.playlistParsingError) this.handleManifestParsingError(e, r, o.playlistParsingError, n, t);
                            else {
                                var l = o.contentSteering,
                                    u = o.levels,
                                    c = o.sessionData,
                                    d = o.sessionKeys,
                                    h = o.startTimeOffset,
                                    f = o.variableList;
                                this.variableList = f;
                                var g = Gt.parseMasterPlaylistMedia(a, s, o),
                                    p = g.AUDIO,
                                    m = void 0 === p ? [] : p,
                                    v = g.SUBTITLES,
                                    y = g["CLOSED-CAPTIONS"];
                                m.length && (m.some((function(e) {
                                    return !e.url
                                })) || !u[0].audioCodec || u[0].attrs.AUDIO || (F.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"), m.unshift({
                                    type: "main",
                                    name: "main",
                                    groupId: "main",
                                    default: !1,
                                    autoselect: !1,
                                    forced: !1,
                                    id: -1,
                                    attrs: new B({}),
                                    bitrate: 0,
                                    url: ""
                                }))), i.trigger(I.MANIFEST_LOADED, {
                                    levels: u,
                                    audioTracks: m,
                                    subtitles: v,
                                    captions: y,
                                    contentSteering: l,
                                    url: s,
                                    stats: t,
                                    networkDetails: n,
                                    sessionData: c,
                                    sessionKeys: d,
                                    startTimeOffset: h,
                                    variableList: f
                                })
                            }
                        }, t.handleTrackOrLevelPlaylist = function(e, t, r, n, i) {
                            var a = this.hls,
                                s = r.id,
                                o = r.level,
                                l = r.type,
                                u = Qt(e, r),
                                c = 0,
                                d = k(o) ? o : k(s) ? s : 0,
                                h = Jt(r),
                                f = Gt.parseLevelPlaylist(e.data, u, d, h, c, this.variableList);
                            if (l === Xt.MANIFEST) {
                                var g = {
                                    attrs: new B({}),
                                    bitrate: 0,
                                    details: f,
                                    name: "",
                                    url: u
                                };
                                a.trigger(I.MANIFEST_LOADED, {
                                    levels: [g],
                                    audioTracks: [],
                                    url: u,
                                    stats: t,
                                    networkDetails: n,
                                    sessionData: null,
                                    sessionKeys: null,
                                    contentSteering: null,
                                    startTimeOffset: null,
                                    variableList: null
                                })
                            }
                            t.parsing.end = performance.now(), r.levelDetails = f, this.handlePlaylistLoaded(f, e, t, r, n, i)
                        }, t.handleManifestParsingError = function(e, t, r, n, i) {
                            this.hls.trigger(I.ERROR, {
                                type: w.NETWORK_ERROR,
                                details: D.MANIFEST_PARSING_ERROR,
                                fatal: t.type === Xt.MANIFEST,
                                url: e.url,
                                err: r,
                                error: r,
                                reason: r.message,
                                response: e,
                                context: t,
                                networkDetails: n,
                                stats: i
                            })
                        }, t.handleNetworkError = function(e, t, r, i, a) {
                            void 0 === r && (r = !1);
                            var s = "A network " + (r ? "timeout" : "error" + (i ? " (status " + i.code + ")" : "")) + " occurred while loading " + e.type;
                            e.type === Xt.LEVEL ? s += ": " + e.level + " id: " + e.id : e.type !== Xt.AUDIO_TRACK && e.type !== Xt.SUBTITLE_TRACK || (s += " id: " + e.id + ' group-id: "' + e.groupId + '"');
                            var o = new Error(s);
                            F.warn("[playlist-loader]: " + s);
                            var l = D.UNKNOWN,
                                u = !1,
                                c = this.getInternalLoader(e);
                            switch (e.type) {
                                case Xt.MANIFEST:
                                    l = r ? D.MANIFEST_LOAD_TIMEOUT : D.MANIFEST_LOAD_ERROR, u = !0;
                                    break;
                                case Xt.LEVEL:
                                    l = r ? D.LEVEL_LOAD_TIMEOUT : D.LEVEL_LOAD_ERROR, u = !1;
                                    break;
                                case Xt.AUDIO_TRACK:
                                    l = r ? D.AUDIO_TRACK_LOAD_TIMEOUT : D.AUDIO_TRACK_LOAD_ERROR, u = !1;
                                    break;
                                case Xt.SUBTITLE_TRACK:
                                    l = r ? D.SUBTITLE_TRACK_LOAD_TIMEOUT : D.SUBTITLE_LOAD_ERROR, u = !1
                            }
                            c && this.resetInternalLoader(e.type);
                            var d = {
                                type: w.NETWORK_ERROR,
                                details: l,
                                fatal: u,
                                url: e.url,
                                loader: c,
                                context: e,
                                error: o,
                                networkDetails: t,
                                stats: a
                            };
                            if (i) {
                                var h = (null == t ? void 0 : t.url) || e.url;
                                d.response = n({
                                    url: h,
                                    data: void 0
                                }, i)
                            }
                            this.hls.trigger(I.ERROR, d)
                        }, t.handlePlaylistLoaded = function(e, t, r, n, i, a) {
                            var s = this.hls,
                                o = n.type,
                                l = n.level,
                                u = n.id,
                                c = n.groupId,
                                d = n.deliveryDirectives,
                                h = Qt(t, n),
                                f = Jt(n),
                                g = "number" == typeof n.level && f === $t.MAIN ? l : void 0;
                            if (e.fragments.length) {
                                e.targetduration || (e.playlistParsingError = new Error("Missing Target Duration"));
                                var p = e.playlistParsingError;
                                if (p) s.trigger(I.ERROR, {
                                    type: w.NETWORK_ERROR,
                                    details: D.LEVEL_PARSING_ERROR,
                                    fatal: !1,
                                    url: h,
                                    error: p,
                                    reason: p.message,
                                    response: t,
                                    context: n,
                                    level: g,
                                    parent: f,
                                    networkDetails: i,
                                    stats: r
                                });
                                else switch (e.live && a && (a.getCacheAge && (e.ageHeader = a.getCacheAge() || 0), a.getCacheAge && !isNaN(e.ageHeader) || (e.ageHeader = 0)), o) {
                                    case Xt.MANIFEST:
                                    case Xt.LEVEL:
                                        s.trigger(I.LEVEL_LOADED, {
                                            details: e,
                                            level: g || 0,
                                            id: u || 0,
                                            stats: r,
                                            networkDetails: i,
                                            deliveryDirectives: d
                                        });
                                        break;
                                    case Xt.AUDIO_TRACK:
                                        s.trigger(I.AUDIO_TRACK_LOADED, {
                                            details: e,
                                            id: u || 0,
                                            groupId: c || "",
                                            stats: r,
                                            networkDetails: i,
                                            deliveryDirectives: d
                                        });
                                        break;
                                    case Xt.SUBTITLE_TRACK:
                                        s.trigger(I.SUBTITLE_TRACK_LOADED, {
                                            details: e,
                                            id: u || 0,
                                            groupId: c || "",
                                            stats: r,
                                            networkDetails: i,
                                            deliveryDirectives: d
                                        })
                                }
                            } else {
                                var m = new Error("No Segments found in Playlist");
                                s.trigger(I.ERROR, {
                                    type: w.NETWORK_ERROR,
                                    details: D.LEVEL_EMPTY_ERROR,
                                    fatal: !1,
                                    url: h,
                                    error: m,
                                    reason: m.message,
                                    response: t,
                                    context: n,
                                    level: g,
                                    parent: f,
                                    networkDetails: i,
                                    stats: r
                                })
                            }
                        }, e
                    }();

                    function er(e, t) {
                        var r;
                        try {
                            r = new Event("addtrack")
                        } catch (e) {
                            (r = document.createEvent("Event")).initEvent("addtrack", !1, !1)
                        }
                        r.track = e, t.dispatchEvent(r)
                    }

                    function tr(e, t) {
                        var r = e.mode;
                        if ("disabled" === r && (e.mode = "hidden"), e.cues && !e.cues.getCueById(t.id)) try {
                            if (e.addCue(t), !e.cues.getCueById(t.id)) throw new Error("addCue is failed for: " + t)
                        } catch (r) {
                            F.debug("[texttrack-utils]: " + r);
                            try {
                                var n = new self.TextTrackCue(t.startTime, t.endTime, t.text);
                                n.id = t.id, e.addCue(n)
                            } catch (e) {
                                F.debug("[texttrack-utils]: Legacy TextTrackCue fallback failed: " + e)
                            }
                        }
                        "disabled" === r && (e.mode = r)
                    }

                    function rr(e) {
                        var t = e.mode;
                        if ("disabled" === t && (e.mode = "hidden"), e.cues)
                            for (var r = e.cues.length; r--;) e.removeCue(e.cues[r]);
                        "disabled" === t && (e.mode = t)
                    }

                    function nr(e, t, r, n) {
                        var i = e.mode;
                        if ("disabled" === i && (e.mode = "hidden"), e.cues && e.cues.length > 0)
                            for (var a = ar(e.cues, t, r), s = 0; s < a.length; s++) n && !n(a[s]) || e.removeCue(a[s]);
                        "disabled" === i && (e.mode = i)
                    }

                    function ir(e, t) {
                        if (t < e[0].startTime) return 0;
                        var r = e.length - 1;
                        if (t > e[r].endTime) return -1;
                        for (var n = 0, i = r; n <= i;) {
                            var a = Math.floor((i + n) / 2);
                            if (t < e[a].startTime) i = a - 1;
                            else {
                                if (!(t > e[a].startTime && n < r)) return a;
                                n = a + 1
                            }
                        }
                        return e[n].startTime - t < t - e[i].startTime ? n : i
                    }

                    function ar(e, t, r) {
                        var n = [],
                            i = ir(e, t);
                        if (i > -1)
                            for (var a = i, s = e.length; a < s; a++) {
                                var o = e[a];
                                if (o.startTime >= t && o.endTime <= r) n.push(o);
                                else if (o.startTime > r) return n
                            }
                        return n
                    }

                    function sr(e) {
                        for (var t = [], r = 0; r < e.length; r++) {
                            var n = e[r];
                            "subtitles" !== n.kind && "captions" !== n.kind || !n.label || t.push(e[r])
                        }
                        return t
                    }
                    var or = {
                            audioId3: "org.id3",
                            dateRange: "com.apple.quicktime.HLS",
                            emsg: "https://aomedia.org/emsg/ID3"
                        },
                        lr = .25;

                    function ur() {
                        if ("undefined" != typeof self) return self.VTTCue || self.TextTrackCue
                    }

                    function cr(e, t, r, i, a) {
                        var s = new e(t, r, "");
                        try {
                            s.value = i, a && (s.type = a)
                        } catch (o) {
                            s = new e(t, r, JSON.stringify(a ? n({
                                type: a
                            }, i) : i))
                        }
                        return s
                    }
                    var dr = function() {
                        var e = ur();
                        try {
                            e && new e(0, Number.POSITIVE_INFINITY, "")
                        } catch (e) {
                            return Number.MAX_VALUE
                        }
                        return Number.POSITIVE_INFINITY
                    }();

                    function hr(e, t) {
                        return e.getTime() / 1e3 - t
                    }

                    function fr(e) {
                        return Uint8Array.from(e.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer
                    }
                    var gr = function() {
                            function e(e) {
                                this.hls = void 0, this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = e, this._registerListeners()
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this._unregisterListeners(), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = null
                            }, t._registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), e.on(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.on(I.LEVEL_UPDATED, this.onLevelUpdated, this)
                            }, t._unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), e.off(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.off(I.LEVEL_UPDATED, this.onLevelUpdated, this)
                            }, t.onMediaAttached = function(e, t) {
                                this.media = t.media
                            }, t.onMediaDetaching = function() {
                                this.id3Track && (rr(this.id3Track), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {})
                            }, t.onManifestLoading = function() {
                                this.dateRangeCuesAppended = {}
                            }, t.createTrack = function(e) {
                                var t = this.getID3Track(e.textTracks);
                                return t.mode = "hidden", t
                            }, t.getID3Track = function(e) {
                                if (this.media) {
                                    for (var t = 0; t < e.length; t++) {
                                        var r = e[t];
                                        if ("metadata" === r.kind && "id3" === r.label) return er(r, this.media), r
                                    }
                                    return this.media.addTextTrack("metadata", "id3")
                                }
                            }, t.onFragParsingMetadata = function(e, t) {
                                if (this.media) {
                                    var r = this.hls.config,
                                        n = r.enableEmsgMetadataCues,
                                        i = r.enableID3MetadataCues;
                                    if (n || i) {
                                        var a = t.samples;
                                        this.id3Track || (this.id3Track = this.createTrack(this.media));
                                        var s = ur();
                                        if (s)
                                            for (var o = 0; o < a.length; o++) {
                                                var l = a[o].type;
                                                if ((l !== or.emsg || n) && i) {
                                                    var u = Ae(a[o].data);
                                                    if (u) {
                                                        var c = a[o].pts,
                                                            d = c + a[o].duration;
                                                        d > dr && (d = dr), d - c <= 0 && (d = c + lr);
                                                        for (var h = 0; h < u.length; h++) {
                                                            var f = u[h];
                                                            if (!Ee(f)) {
                                                                this.updateId3CueEnds(c, l);
                                                                var g = cr(s, c, d, f, l);
                                                                g && this.id3Track.addCue(g)
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                    }
                                }
                            }, t.updateId3CueEnds = function(e, t) {
                                var r, n = null == (r = this.id3Track) ? void 0 : r.cues;
                                if (n)
                                    for (var i = n.length; i--;) {
                                        var a = n[i];
                                        a.type === t && a.startTime < e && a.endTime === dr && (a.endTime = e)
                                    }
                            }, t.onBufferFlushing = function(e, t) {
                                var r = t.startOffset,
                                    n = t.endOffset,
                                    i = t.type,
                                    a = this.id3Track,
                                    s = this.hls;
                                if (s) {
                                    var o = s.config,
                                        l = o.enableEmsgMetadataCues,
                                        u = o.enableID3MetadataCues;
                                    a && (l || u) && nr(a, r, n, "audio" === i ? function(e) {
                                        return e.type === or.audioId3 && u
                                    } : "video" === i ? function(e) {
                                        return e.type === or.emsg && l
                                    } : function(e) {
                                        return e.type === or.audioId3 && u || e.type === or.emsg && l
                                    })
                                }
                            }, t.onLevelUpdated = function(e, t) {
                                var r = this,
                                    n = t.details;
                                if (this.media && n.hasProgramDateTime && this.hls.config.enableDateRangeMetadataCues) {
                                    var i = this.dateRangeCuesAppended,
                                        a = this.id3Track,
                                        s = n.dateRanges,
                                        o = Object.keys(s);
                                    if (a)
                                        for (var l = Object.keys(i).filter((function(e) {
                                                return !o.includes(e)
                                            })), u = function() {
                                                var e = l[c];
                                                Object.keys(i[e].cues).forEach((function(t) {
                                                    a.removeCue(i[e].cues[t])
                                                })), delete i[e]
                                            }, c = l.length; c--;) u();
                                    var d = n.fragments[n.fragments.length - 1];
                                    if (0 !== o.length && k(null == d ? void 0 : d.programDateTime)) {
                                        this.id3Track || (this.id3Track = this.createTrack(this.media));
                                        for (var h = d.programDateTime / 1e3 - d.start, f = ur(), g = function() {
                                                var e = o[p],
                                                    t = s[e],
                                                    n = hr(t.startDate, h),
                                                    a = i[e],
                                                    l = (null == a ? void 0 : a.cues) || {},
                                                    u = (null == a ? void 0 : a.durationKnown) || !1,
                                                    c = dr,
                                                    d = t.endDate;
                                                if (d) c = hr(d, h), u = !0;
                                                else if (t.endOnNext && !u) {
                                                    var g = o.reduce((function(e, r) {
                                                        if (r !== t.id) {
                                                            var n = s[r];
                                                            if (n.class === t.class && n.startDate > t.startDate && (!e || t.startDate < e.startDate)) return n
                                                        }
                                                        return e
                                                    }), null);
                                                    g && (c = hr(g.startDate, h), u = !0)
                                                }
                                                for (var m = Object.keys(t.attr), v = 0; v < m.length; v++) {
                                                    var y = m[v];
                                                    if (G(y)) {
                                                        var T = l[y];
                                                        if (T) u && !a.durationKnown && (T.endTime = c);
                                                        else if (f) {
                                                            var b = t.attr[y];
                                                            V(y) && (b = fr(b));
                                                            var E = cr(f, n, c, {
                                                                key: y,
                                                                data: b
                                                            }, or.dateRange);
                                                            E && (E.id = e, r.id3Track.addCue(E), l[y] = E)
                                                        }
                                                    }
                                                }
                                                i[e] = {
                                                    cues: l,
                                                    dateRange: t,
                                                    durationKnown: u
                                                }
                                            }, p = 0; p < o.length; p++) g()
                                    }
                                }
                            }, e
                        }(),
                        pr = function() {
                            function e(e) {
                                var t = this;
                                this.hls = void 0, this.config = void 0, this.media = null, this.levelDetails = null, this.currentTime = 0, this.stallCount = 0, this._latency = null, this.timeupdateHandler = function() {
                                    return t.timeupdate()
                                }, this.hls = e, this.config = e.config, this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.unregisterListeners(), this.onMediaDetaching(), this.levelDetails = null, this.hls = this.timeupdateHandler = null
                            }, t.registerListeners = function() {
                                this.hls.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.on(I.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(I.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.on(I.ERROR, this.onError, this)
                            }, t.unregisterListeners = function() {
                                this.hls.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.off(I.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.off(I.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.off(I.ERROR, this.onError, this)
                            }, t.onMediaAttached = function(e, t) {
                                this.media = t.media, this.media.addEventListener("timeupdate", this.timeupdateHandler)
                            }, t.onMediaDetaching = function() {
                                this.media && (this.media.removeEventListener("timeupdate", this.timeupdateHandler), this.media = null)
                            }, t.onManifestLoading = function() {
                                this.levelDetails = null, this._latency = null, this.stallCount = 0
                            }, t.onLevelUpdated = function(e, t) {
                                var r = t.details;
                                this.levelDetails = r, r.advanced && this.timeupdate(), !r.live && this.media && this.media.removeEventListener("timeupdate", this.timeupdateHandler)
                            }, t.onError = function(e, t) {
                                var r;
                                t.details === D.BUFFER_STALLED_ERROR && (this.stallCount++, null != (r = this.levelDetails) && r.live && F.warn("[playback-rate-controller]: Stall detected, adjusting target latency"))
                            }, t.timeupdate = function() {
                                var e = this.media,
                                    t = this.levelDetails;
                                if (e && t) {
                                    this.currentTime = e.currentTime;
                                    var r = this.computeLatency();
                                    if (null !== r) {
                                        this._latency = r;
                                        var n = this.config,
                                            i = n.lowLatencyMode,
                                            a = n.maxLiveSyncPlaybackRate;
                                        if (i && 1 !== a && t.live) {
                                            var s = this.targetLatency;
                                            if (null !== s) {
                                                var o = r - s;
                                                if (o < Math.min(this.maxLatency, s + t.targetduration) && o > .05 && this.forwardBufferLength > 1) {
                                                    var l = Math.min(2, Math.max(1, a)),
                                                        u = Math.round(2 / (1 + Math.exp(-.75 * o - this.edgeStalled)) * 20) / 20;
                                                    e.playbackRate = Math.min(l, Math.max(1, u))
                                                } else 1 !== e.playbackRate && 0 !== e.playbackRate && (e.playbackRate = 1)
                                            }
                                        }
                                    }
                                }
                            }, t.estimateLiveEdge = function() {
                                var e = this.levelDetails;
                                return null === e ? null : e.edge + e.age
                            }, t.computeLatency = function() {
                                var e = this.estimateLiveEdge();
                                return null === e ? null : e - this.currentTime
                            }, o(e, [{
                                key: "latency",
                                get: function() {
                                    return this._latency || 0
                                }
                            }, {
                                key: "maxLatency",
                                get: function() {
                                    var e = this.config,
                                        t = this.levelDetails;
                                    return void 0 !== e.liveMaxLatencyDuration ? e.liveMaxLatencyDuration : t ? e.liveMaxLatencyDurationCount * t.targetduration : 0
                                }
                            }, {
                                key: "targetLatency",
                                get: function() {
                                    var e = this.levelDetails;
                                    if (null === e) return null;
                                    var t = e.holdBack,
                                        r = e.partHoldBack,
                                        n = e.targetduration,
                                        i = this.config,
                                        a = i.liveSyncDuration,
                                        s = i.liveSyncDurationCount,
                                        o = i.lowLatencyMode,
                                        l = this.hls.userConfig,
                                        u = o && r || t;
                                    (l.liveSyncDuration || l.liveSyncDurationCount || 0 === u) && (u = void 0 !== a ? a : s * n);
                                    var c = n,
                                        d = 1;
                                    return u + Math.min(this.stallCount * d, c)
                                }
                            }, {
                                key: "liveSyncPosition",
                                get: function() {
                                    var e = this.estimateLiveEdge(),
                                        t = this.targetLatency,
                                        r = this.levelDetails;
                                    if (null === e || null === t || null === r) return null;
                                    var n = r.edge,
                                        i = e - t - this.edgeStalled,
                                        a = n - r.totalduration,
                                        s = n - (this.config.lowLatencyMode && r.partTarget || r.targetduration);
                                    return Math.min(Math.max(a, i), s)
                                }
                            }, {
                                key: "drift",
                                get: function() {
                                    var e = this.levelDetails;
                                    return null === e ? 1 : e.drift
                                }
                            }, {
                                key: "edgeStalled",
                                get: function() {
                                    var e = this.levelDetails;
                                    if (null === e) return 0;
                                    var t = 3 * (this.config.lowLatencyMode && e.partTarget || e.targetduration);
                                    return Math.max(e.age - t, 0)
                                }
                            }, {
                                key: "forwardBufferLength",
                                get: function() {
                                    var e = this.media,
                                        t = this.levelDetails;
                                    if (!e || !t) return 0;
                                    var r = e.buffered.length;
                                    return (r ? e.buffered.end(r - 1) : t.edge) - this.currentTime
                                }
                            }]), e
                        }(),
                        mr = ["NONE", "TYPE-0", "TYPE-1", null];

                    function vr(e) {
                        return mr.indexOf(e) > -1
                    }
                    var yr = ["SDR", "PQ", "HLG"];

                    function Tr(e) {
                        return !!e && yr.indexOf(e) > -1
                    }
                    var br = {
                        No: "",
                        Yes: "YES",
                        v2: "v2"
                    };

                    function Er(e, t) {
                        var r = e.canSkipUntil,
                            n = e.canSkipDateRanges,
                            i = e.endSN;
                        return r && (void 0 !== t ? t - i : 0) < r ? n ? br.v2 : br.Yes : br.No
                    }
                    var Sr = function() {
                            function e(e, t, r) {
                                this.msn = void 0, this.part = void 0, this.skip = void 0, this.msn = e, this.part = t, this.skip = r
                            }
                            return e.prototype.addDirectives = function(e) {
                                var t = new self.URL(e);
                                return void 0 !== this.msn && t.searchParams.set("_HLS_msn", this.msn.toString()), void 0 !== this.part && t.searchParams.set("_HLS_part", this.part.toString()), this.skip && t.searchParams.set("_HLS_skip", this.skip), t.href
                            }, e
                        }(),
                        Ar = function() {
                            function e(e) {
                                this._attrs = void 0, this.audioCodec = void 0, this.bitrate = void 0, this.codecSet = void 0, this.url = void 0, this.frameRate = void 0, this.height = void 0, this.id = void 0, this.name = void 0, this.videoCodec = void 0, this.width = void 0, this.details = void 0, this.fragmentError = 0, this.loadError = 0, this.loaded = void 0, this.realBitrate = 0, this.supportedPromise = void 0, this.supportedResult = void 0, this._avgBitrate = 0, this._audioGroups = void 0, this._subtitleGroups = void 0, this._urlId = 0, this.url = [e.url], this._attrs = [e.attrs], this.bitrate = e.bitrate, e.details && (this.details = e.details), this.id = e.id || 0, this.name = e.name, this.width = e.width || 0, this.height = e.height || 0, this.frameRate = e.attrs.optionalFloat("FRAME-RATE", 0), this._avgBitrate = e.attrs.decimalInteger("AVERAGE-BANDWIDTH"), this.audioCodec = e.audioCodec, this.videoCodec = e.videoCodec, this.codecSet = [e.videoCodec, e.audioCodec].filter((function(e) {
                                    return !!e
                                })).map((function(e) {
                                    return e.substring(0, 4)
                                })).join(","), this.addGroupId("audio", e.attrs.AUDIO), this.addGroupId("text", e.attrs.SUBTITLES)
                            }
                            var t = e.prototype;
                            return t.hasAudioGroup = function(e) {
                                return kr(this._audioGroups, e)
                            }, t.hasSubtitleGroup = function(e) {
                                return kr(this._subtitleGroups, e)
                            }, t.addGroupId = function(e, t) {
                                if (t)
                                    if ("audio" === e) {
                                        var r = this._audioGroups;
                                        r || (r = this._audioGroups = []), -1 === r.indexOf(t) && r.push(t)
                                    } else if ("text" === e) {
                                    var n = this._subtitleGroups;
                                    n || (n = this._subtitleGroups = []), -1 === n.indexOf(t) && n.push(t)
                                }
                            }, t.addFallback = function() {}, o(e, [{
                                key: "maxBitrate",
                                get: function() {
                                    return Math.max(this.realBitrate, this.bitrate)
                                }
                            }, {
                                key: "averageBitrate",
                                get: function() {
                                    return this._avgBitrate || this.realBitrate || this.bitrate
                                }
                            }, {
                                key: "attrs",
                                get: function() {
                                    return this._attrs[0]
                                }
                            }, {
                                key: "codecs",
                                get: function() {
                                    return this.attrs.CODECS || ""
                                }
                            }, {
                                key: "pathwayId",
                                get: function() {
                                    return this.attrs["PATHWAY-ID"] || "."
                                }
                            }, {
                                key: "videoRange",
                                get: function() {
                                    return this.attrs["VIDEO-RANGE"] || "SDR"
                                }
                            }, {
                                key: "score",
                                get: function() {
                                    return this.attrs.optionalFloat("SCORE", 0)
                                }
                            }, {
                                key: "uri",
                                get: function() {
                                    return this.url[0] || ""
                                }
                            }, {
                                key: "audioGroups",
                                get: function() {
                                    return this._audioGroups
                                }
                            }, {
                                key: "subtitleGroups",
                                get: function() {
                                    return this._subtitleGroups
                                }
                            }, {
                                key: "urlId",
                                get: function() {
                                    return 0
                                },
                                set: function(e) {}
                            }, {
                                key: "audioGroupIds",
                                get: function() {
                                    return this.audioGroups ? [this.audioGroupId] : void 0
                                }
                            }, {
                                key: "textGroupIds",
                                get: function() {
                                    return this.subtitleGroups ? [this.textGroupId] : void 0
                                }
                            }, {
                                key: "audioGroupId",
                                get: function() {
                                    var e;
                                    return null == (e = this.audioGroups) ? void 0 : e[0]
                                }
                            }, {
                                key: "textGroupId",
                                get: function() {
                                    var e;
                                    return null == (e = this.subtitleGroups) ? void 0 : e[0]
                                }
                            }]), e
                        }();

                    function kr(e, t) {
                        return !(!t || !e) && -1 !== e.indexOf(t)
                    }

                    function Lr(e, t) {
                        var r = t.startPTS;
                        if (k(r)) {
                            var n, i = 0;
                            t.sn > e.sn ? (i = r - e.start, n = e) : (i = e.start - r, n = t), n.duration !== i && (n.duration = i)
                        } else t.sn > e.sn ? e.cc === t.cc && e.minEndPTS ? t.start = e.start + (e.minEndPTS - e.start) : t.start = e.start + e.duration : t.start = Math.max(e.start - t.duration, 0)
                    }

                    function Rr(e, t, r, n, i, a) {
                        n - r <= 0 && (F.warn("Fragment should have a positive duration", t), n = r + t.duration, a = i + t.duration);
                        var s = r,
                            o = n,
                            l = t.startPTS,
                            u = t.endPTS;
                        if (k(l)) {
                            var c = Math.abs(l - r);
                            k(t.deltaPTS) ? t.deltaPTS = Math.max(c, t.deltaPTS) : t.deltaPTS = c, s = Math.max(r, l), r = Math.min(r, l), i = Math.min(i, t.startDTS), o = Math.min(n, u), n = Math.max(n, u), a = Math.max(a, t.endDTS)
                        }
                        var d = r - t.start;
                        0 !== t.start && (t.start = r), t.duration = n - t.start, t.startPTS = r, t.maxStartPTS = s, t.startDTS = i, t.endPTS = n, t.minEndPTS = o, t.endDTS = a;
                        var h, f = t.sn;
                        if (!e || f < e.startSN || f > e.endSN) return 0;
                        var g = f - e.startSN,
                            p = e.fragments;
                        for (p[g] = t, h = g; h > 0; h--) Lr(p[h], p[h - 1]);
                        for (h = g; h < p.length - 1; h++) Lr(p[h], p[h + 1]);
                        return e.fragmentHint && Lr(p[p.length - 1], e.fragmentHint), e.PTSKnown = e.alignedSliding = !0, d
                    }

                    function Ir(e, t) {
                        for (var r = null, n = e.fragments, i = n.length - 1; i >= 0; i--) {
                            var a = n[i].initSegment;
                            if (a) {
                                r = a;
                                break
                            }
                        }
                        e.fragmentHint && delete e.fragmentHint.endPTS;
                        var s, o = 0;
                        if (Cr(e, t, (function(e, n) {
                                e.relurl && (o = e.cc - n.cc), k(e.startPTS) && k(e.endPTS) && (n.start = n.startPTS = e.startPTS, n.startDTS = e.startDTS, n.maxStartPTS = e.maxStartPTS, n.endPTS = e.endPTS, n.endDTS = e.endDTS, n.minEndPTS = e.minEndPTS, n.duration = e.endPTS - e.startPTS, n.duration && (s = n), t.PTSKnown = t.alignedSliding = !0), n.elementaryStreams = e.elementaryStreams, n.loader = e.loader, n.stats = e.stats, e.initSegment && (n.initSegment = e.initSegment, r = e.initSegment)
                            })), r && (t.fragmentHint ? t.fragments.concat(t.fragmentHint) : t.fragments).forEach((function(e) {
                                var t;
                                !e || e.initSegment && e.initSegment.relurl !== (null == (t = r) ? void 0 : t.relurl) || (e.initSegment = r)
                            })), t.skippedSegments)
                            if (t.deltaUpdateFailed = t.fragments.some((function(e) {
                                    return !e
                                })), t.deltaUpdateFailed) {
                                F.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
                                for (var l = t.skippedSegments; l--;) t.fragments.shift();
                                t.startSN = t.fragments[0].sn, t.startCC = t.fragments[0].cc
                            } else t.canSkipDateRanges && (t.dateRanges = wr(e.dateRanges, t.dateRanges, t.recentlyRemovedDateranges));
                        var u = t.fragments;
                        if (o) {
                            F.warn("discontinuity sliding from playlist, take drift into account");
                            for (var c = 0; c < u.length; c++) u[c].cc += o
                        }
                        t.skippedSegments && (t.startCC = t.fragments[0].cc), Dr(e.partList, t.partList, (function(e, t) {
                            t.elementaryStreams = e.elementaryStreams, t.stats = e.stats
                        })), s ? Rr(t, s, s.startPTS, s.endPTS, s.startDTS, s.endDTS) : xr(e, t), u.length && (t.totalduration = t.edge - u[0].start), t.driftStartTime = e.driftStartTime, t.driftStart = e.driftStart;
                        var d = t.advancedDateTime;
                        if (t.advanced && d) {
                            var h = t.edge;
                            t.driftStart || (t.driftStartTime = d, t.driftStart = h), t.driftEndTime = d, t.driftEnd = h
                        } else t.driftEndTime = e.driftEndTime, t.driftEnd = e.driftEnd, t.advancedDateTime = e.advancedDateTime
                    }

                    function wr(e, t, r) {
                        var n = u({}, e);
                        return r && r.forEach((function(e) {
                            delete n[e]
                        })), Object.keys(t).forEach((function(e) {
                            var r = new H(t[e].attr, n[e]);
                            r.isValid ? n[e] = r : F.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(t[e].attr) + '"')
                        })), n
                    }

                    function Dr(e, t, r) {
                        if (e && t)
                            for (var n = 0, i = 0, a = e.length; i <= a; i++) {
                                var s = e[i],
                                    o = t[i + n];
                                s && o && s.index === o.index && s.fragment.sn === o.fragment.sn ? r(s, o) : n--
                            }
                    }

                    function Cr(e, t, r) {
                        for (var n = t.skippedSegments, i = Math.max(e.startSN, t.startSN) - t.startSN, a = (e.fragmentHint ? 1 : 0) + (n ? t.endSN : Math.min(e.endSN, t.endSN)) - t.startSN, s = t.startSN - e.startSN, o = t.fragmentHint ? t.fragments.concat(t.fragmentHint) : t.fragments, l = e.fragmentHint ? e.fragments.concat(e.fragmentHint) : e.fragments, u = i; u <= a; u++) {
                            var c = l[s + u],
                                d = o[u];
                            n && !d && u < n && (d = t.fragments[u] = c), c && d && r(c, d)
                        }
                    }

                    function xr(e, t) {
                        var r = t.startSN + t.skippedSegments - e.startSN,
                            n = e.fragments;
                        r < 0 || r >= n.length || _r(t, n[r].start)
                    }

                    function _r(e, t) {
                        if (t) {
                            for (var r = e.fragments, n = e.skippedSegments; n < r.length; n++) r[n].start += t;
                            e.fragmentHint && (e.fragmentHint.start += t)
                        }
                    }

                    function Or(e, t) {
                        void 0 === t && (t = 1 / 0);
                        var r = 1e3 * e.targetduration;
                        if (e.updated) {
                            var n = e.fragments,
                                i = 4;
                            if (n.length && r * i > t) {
                                var a = 1e3 * n[n.length - 1].duration;
                                a < r && (r = a)
                            }
                        } else r /= 2;
                        return Math.round(r)
                    }

                    function Pr(e, t, r) {
                        if (null == e || !e.details) return null;
                        var n = e.details,
                            i = n.fragments[t - n.startSN];
                        return i || ((i = n.fragmentHint) && i.sn === t ? i : t < n.startSN && r && r.sn === t ? r : null)
                    }

                    function Mr(e, t, r) {
                        var n;
                        return null != e && e.details ? Fr(null == (n = e.details) ? void 0 : n.partList, t, r) : null
                    }

                    function Fr(e, t, r) {
                        if (e)
                            for (var n = e.length; n--;) {
                                var i = e[n];
                                if (i.index === r && i.fragment.sn === t) return i
                            }
                        return null
                    }

                    function Nr(e) {
                        e.forEach((function(e, t) {
                            var r = e.details;
                            null != r && r.fragments && r.fragments.forEach((function(e) {
                                e.level = t
                            }))
                        }))
                    }

                    function Ur(e) {
                        switch (e.details) {
                            case D.FRAG_LOAD_TIMEOUT:
                            case D.KEY_LOAD_TIMEOUT:
                            case D.LEVEL_LOAD_TIMEOUT:
                            case D.MANIFEST_LOAD_TIMEOUT:
                                return !0
                        }
                        return !1
                    }

                    function Br(e, t) {
                        var r = Ur(t);
                        return e.default[(r ? "timeout" : "error") + "Retry"]
                    }

                    function Gr(e, t) {
                        var r = "linear" === e.backoff ? 1 : Math.pow(2, t);
                        return Math.min(r * e.retryDelayMs, e.maxRetryDelayMs)
                    }

                    function Vr(e) {
                        return n(n({}, e), {
                            errorRetry: null,
                            timeoutRetry: null
                        })
                    }

                    function Hr(e, t, r, n) {
                        if (!e) return !1;
                        var i = null == n ? void 0 : n.code,
                            a = t < e.maxNumRetry && (Kr(i) || !!r);
                        return e.shouldRetry ? e.shouldRetry(e, t, r, n, a) : a
                    }

                    function Kr(e) {
                        return 0 === e && !1 === navigator.onLine || !!e && (e < 400 || e > 499)
                    }
                    var jr = {
                        search: function(e, t) {
                            for (var r = 0, n = e.length - 1, i = null, a = null; r <= n;) {
                                var s = t(a = e[i = (r + n) / 2 | 0]);
                                if (s > 0) r = i + 1;
                                else {
                                    if (!(s < 0)) return a;
                                    n = i - 1
                                }
                            }
                            return null
                        }
                    };

                    function Yr(e, t, r) {
                        if (null === t || !Array.isArray(e) || !e.length || !k(t)) return null;
                        if (t < (e[0].programDateTime || 0)) return null;
                        if (t >= (e[e.length - 1].endProgramDateTime || 0)) return null;
                        r = r || 0;
                        for (var n = 0; n < e.length; ++n) {
                            var i = e[n];
                            if (zr(t, r, i)) return i
                        }
                        return null
                    }

                    function Wr(e, t, r, n) {
                        void 0 === r && (r = 0), void 0 === n && (n = 0);
                        var i = null;
                        if (e) {
                            i = t[e.sn - t[0].sn + 1] || null;
                            var a = e.endDTS - r;
                            a > 0 && a < 15e-7 && (r += 15e-7)
                        } else 0 === r && 0 === t[0].start && (i = t[0]);
                        if (i && (!e || e.level === i.level) && 0 === qr(r, n, i)) return i;
                        var s = jr.search(t, qr.bind(null, r, n));
                        return !s || s === e && i ? i : s
                    }

                    function qr(e, t, r) {
                        if (void 0 === e && (e = 0), void 0 === t && (t = 0), r.start <= e && r.start + r.duration > e) return 0;
                        var n = Math.min(t, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
                        return r.start + r.duration - n <= e ? 1 : r.start - n > e && r.start ? -1 : 0
                    }

                    function zr(e, t, r) {
                        var n = 1e3 * Math.min(t, r.duration + (r.deltaPTS ? r.deltaPTS : 0));
                        return (r.endProgramDateTime || 0) - n > e
                    }

                    function Xr(e, t) {
                        return jr.search(e, (function(e) {
                            return e.cc < t ? 1 : e.cc > t ? -1 : 0
                        }))
                    }
                    var $r = {
                            DoNothing: 0,
                            SendEndCallback: 1,
                            SendAlternateToPenaltyBox: 2,
                            RemoveAlternatePermanently: 3,
                            InsertDiscontinuity: 4,
                            RetryRequest: 5
                        },
                        Jr = {
                            None: 0,
                            MoveAllAlternatesMatchingHost: 1,
                            MoveAllAlternatesMatchingHDCP: 2,
                            SwitchToSDR: 4
                        },
                        Qr = function() {
                            function e(e) {
                                this.hls = void 0, this.playlistError = 0, this.penalizedRenditions = {}, this.log = void 0, this.warn = void 0, this.error = void 0, this.hls = e, this.log = F.log.bind(F, "[info]:"), this.warn = F.warn.bind(F, "[warning]:"), this.error = F.error.bind(F, "[error]:"), this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.ERROR, this.onError, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.LEVEL_UPDATED, this.onLevelUpdated, this)
                            }, t.unregisterListeners = function() {
                                var e = this.hls;
                                e && (e.off(I.ERROR, this.onError, this), e.off(I.ERROR, this.onErrorOut, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.LEVEL_UPDATED, this.onLevelUpdated, this))
                            }, t.destroy = function() {
                                this.unregisterListeners(), this.hls = null, this.penalizedRenditions = {}
                            }, t.startLoad = function(e) {}, t.stopLoad = function() {
                                this.playlistError = 0
                            }, t.getVariantLevelIndex = function(e) {
                                return (null == e ? void 0 : e.type) === $t.MAIN ? e.level : this.hls.loadLevel
                            }, t.onManifestLoading = function() {
                                this.playlistError = 0, this.penalizedRenditions = {}
                            }, t.onLevelUpdated = function() {
                                this.playlistError = 0
                            }, t.onError = function(e, t) {
                                var r, n;
                                if (!t.fatal) {
                                    var i = this.hls,
                                        a = t.context;
                                    switch (t.details) {
                                        case D.FRAG_LOAD_ERROR:
                                        case D.FRAG_LOAD_TIMEOUT:
                                        case D.KEY_LOAD_ERROR:
                                        case D.KEY_LOAD_TIMEOUT:
                                            return void(t.errorAction = this.getFragRetryOrSwitchAction(t));
                                        case D.FRAG_PARSING_ERROR:
                                            if (null != (r = t.frag) && r.gap) return void(t.errorAction = {
                                                action: $r.DoNothing,
                                                flags: Jr.None
                                            });
                                        case D.FRAG_GAP:
                                        case D.FRAG_DECRYPT_ERROR:
                                            return t.errorAction = this.getFragRetryOrSwitchAction(t), void(t.errorAction.action = $r.SendAlternateToPenaltyBox);
                                        case D.LEVEL_EMPTY_ERROR:
                                        case D.LEVEL_PARSING_ERROR:
                                            var s, o, l = t.parent === $t.MAIN ? t.level : i.loadLevel;
                                            return void(t.details === D.LEVEL_EMPTY_ERROR && null != (s = t.context) && null != (o = s.levelDetails) && o.live ? t.errorAction = this.getPlaylistRetryOrSwitchAction(t, l) : (t.levelRetry = !1, t.errorAction = this.getLevelSwitchAction(t, l)));
                                        case D.LEVEL_LOAD_ERROR:
                                        case D.LEVEL_LOAD_TIMEOUT:
                                            return void("number" == typeof(null == a ? void 0 : a.level) && (t.errorAction = this.getPlaylistRetryOrSwitchAction(t, a.level)));
                                        case D.AUDIO_TRACK_LOAD_ERROR:
                                        case D.AUDIO_TRACK_LOAD_TIMEOUT:
                                        case D.SUBTITLE_LOAD_ERROR:
                                        case D.SUBTITLE_TRACK_LOAD_TIMEOUT:
                                            if (a) {
                                                var u = i.levels[i.loadLevel];
                                                if (u && (a.type === Xt.AUDIO_TRACK && u.hasAudioGroup(a.groupId) || a.type === Xt.SUBTITLE_TRACK && u.hasSubtitleGroup(a.groupId))) return t.errorAction = this.getPlaylistRetryOrSwitchAction(t, i.loadLevel), t.errorAction.action = $r.SendAlternateToPenaltyBox, void(t.errorAction.flags = Jr.MoveAllAlternatesMatchingHost)
                                            }
                                            return;
                                        case D.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
                                            var c = i.levels[i.loadLevel],
                                                d = null == c ? void 0 : c.attrs["HDCP-LEVEL"];
                                            return void(d ? t.errorAction = {
                                                action: $r.SendAlternateToPenaltyBox,
                                                flags: Jr.MoveAllAlternatesMatchingHDCP,
                                                hdcpLevel: d
                                            } : this.keySystemError(t));
                                        case D.BUFFER_ADD_CODEC_ERROR:
                                        case D.REMUX_ALLOC_ERROR:
                                        case D.BUFFER_APPEND_ERROR:
                                            return void(t.errorAction = this.getLevelSwitchAction(t, null != (n = t.level) ? n : i.loadLevel));
                                        case D.INTERNAL_EXCEPTION:
                                        case D.BUFFER_APPENDING_ERROR:
                                        case D.BUFFER_FULL_ERROR:
                                        case D.LEVEL_SWITCH_ERROR:
                                        case D.BUFFER_STALLED_ERROR:
                                        case D.BUFFER_SEEK_OVER_HOLE:
                                        case D.BUFFER_NUDGE_ON_STALL:
                                            return void(t.errorAction = {
                                                action: $r.DoNothing,
                                                flags: Jr.None
                                            })
                                    }
                                    t.type === w.KEY_SYSTEM_ERROR && this.keySystemError(t)
                                }
                            }, t.keySystemError = function(e) {
                                var t = this.getVariantLevelIndex(e.frag);
                                e.levelRetry = !1, e.errorAction = this.getLevelSwitchAction(e, t)
                            }, t.getPlaylistRetryOrSwitchAction = function(e, t) {
                                var r = Br(this.hls.config.playlistLoadPolicy, e),
                                    n = this.playlistError++;
                                if (Hr(r, n, Ur(e), e.response)) return {
                                    action: $r.RetryRequest,
                                    flags: Jr.None,
                                    retryConfig: r,
                                    retryCount: n
                                };
                                var i = this.getLevelSwitchAction(e, t);
                                return r && (i.retryConfig = r, i.retryCount = n), i
                            }, t.getFragRetryOrSwitchAction = function(e) {
                                var t = this.hls,
                                    r = this.getVariantLevelIndex(e.frag),
                                    n = t.levels[r],
                                    i = t.config,
                                    a = i.fragLoadPolicy,
                                    s = i.keyLoadPolicy,
                                    o = Br(e.details.startsWith("key") ? s : a, e),
                                    l = t.levels.reduce((function(e, t) {
                                        return e + t.fragmentError
                                    }), 0);
                                if (n && (e.details !== D.FRAG_GAP && n.fragmentError++, Hr(o, l, Ur(e), e.response))) return {
                                    action: $r.RetryRequest,
                                    flags: Jr.None,
                                    retryConfig: o,
                                    retryCount: l
                                };
                                var u = this.getLevelSwitchAction(e, r);
                                return o && (u.retryConfig = o, u.retryCount = l), u
                            }, t.getLevelSwitchAction = function(e, t) {
                                var r = this.hls;
                                null == t && (t = r.loadLevel);
                                var n = this.hls.levels[t];
                                if (n) {
                                    var i, a, s = e.details;
                                    n.loadError++, s === D.BUFFER_APPEND_ERROR && n.fragmentError++;
                                    var o = -1,
                                        l = r.levels,
                                        u = r.loadLevel,
                                        c = r.minAutoLevel,
                                        d = r.maxAutoLevel;
                                    r.autoLevelEnabled || (r.loadLevel = -1);
                                    for (var h, f = null == (i = e.frag) ? void 0 : i.type, g = (f === $t.AUDIO && s === D.FRAG_PARSING_ERROR || "audio" === e.sourceBufferName && (s === D.BUFFER_ADD_CODEC_ERROR || s === D.BUFFER_APPEND_ERROR)) && l.some((function(e) {
                                            var t = e.audioCodec;
                                            return n.audioCodec !== t
                                        })), p = "video" === e.sourceBufferName && (s === D.BUFFER_ADD_CODEC_ERROR || s === D.BUFFER_APPEND_ERROR) && l.some((function(e) {
                                            var t = e.codecSet,
                                                r = e.audioCodec;
                                            return n.codecSet !== t && n.audioCodec === r
                                        })), m = null != (a = e.context) ? a : {}, v = m.type, y = m.groupId, T = function() {
                                            var t = (b + u) % l.length;
                                            if (t !== u && t >= c && t <= d && 0 === l[t].loadError) {
                                                var r, i, a = l[t];
                                                if (s === D.FRAG_GAP && e.frag) {
                                                    var h = l[t].details;
                                                    if (h) {
                                                        var m = Wr(e.frag, h.fragments, e.frag.start);
                                                        if (null != m && m.gap) return 0
                                                    }
                                                } else {
                                                    if (v === Xt.AUDIO_TRACK && a.hasAudioGroup(y) || v === Xt.SUBTITLE_TRACK && a.hasSubtitleGroup(y)) return 0;
                                                    if (f === $t.AUDIO && null != (r = n.audioGroups) && r.some((function(e) {
                                                            return a.hasAudioGroup(e)
                                                        })) || f === $t.SUBTITLE && null != (i = n.subtitleGroups) && i.some((function(e) {
                                                            return a.hasSubtitleGroup(e)
                                                        })) || g && n.audioCodec === a.audioCodec || !g && n.audioCodec !== a.audioCodec || p && n.codecSet === a.codecSet) return 0
                                                }
                                                return o = t, 1
                                            }
                                        }, b = l.length; b-- && (0 === (h = T()) || 1 !== h););
                                    if (o > -1 && r.loadLevel !== o) return e.levelRetry = !0, this.playlistError = 0, {
                                        action: $r.SendAlternateToPenaltyBox,
                                        flags: Jr.None,
                                        nextAutoLevel: o
                                    }
                                }
                                return {
                                    action: $r.SendAlternateToPenaltyBox,
                                    flags: Jr.MoveAllAlternatesMatchingHost
                                }
                            }, t.onErrorOut = function(e, t) {
                                var r;
                                switch (null == (r = t.errorAction) ? void 0 : r.action) {
                                    case $r.DoNothing:
                                        break;
                                    case $r.SendAlternateToPenaltyBox:
                                        this.sendAlternateToPenaltyBox(t), t.errorAction.resolved || t.details === D.FRAG_GAP ? /MediaSource readyState: ended/.test(t.error.message) && (this.warn('MediaSource ended after "' + t.sourceBufferName + '" sourceBuffer append error. Attempting to recover from media error.'), this.hls.recoverMediaError()) : t.fatal = !0
                                }
                                t.fatal && this.hls.stopLoad()
                            }, t.sendAlternateToPenaltyBox = function(e) {
                                var t = this.hls,
                                    r = e.errorAction;
                                if (r) {
                                    var n = r.flags,
                                        i = r.hdcpLevel,
                                        a = r.nextAutoLevel;
                                    switch (n) {
                                        case Jr.None:
                                            this.switchLevel(e, a);
                                            break;
                                        case Jr.MoveAllAlternatesMatchingHDCP:
                                            i && (t.maxHdcpLevel = mr[mr.indexOf(i) - 1], r.resolved = !0), this.warn('Restricting playback to HDCP-LEVEL of "' + t.maxHdcpLevel + '" or lower')
                                    }
                                    r.resolved || this.switchLevel(e, a)
                                }
                            }, t.switchLevel = function(e, t) {
                                void 0 !== t && e.errorAction && (this.warn("switching to level " + t + " after " + e.details), this.hls.nextAutoLevel = t, e.errorAction.resolved = !0, this.hls.nextLoadLevel = this.hls.nextAutoLevel)
                            }, e
                        }(),
                        Zr = function() {
                            function e(e, t) {
                                this.hls = void 0, this.timer = -1, this.requestScheduled = -1, this.canLoad = !1, this.log = void 0, this.warn = void 0, this.log = F.log.bind(F, t + ":"), this.warn = F.warn.bind(F, t + ":"), this.hls = e
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.clearTimer(), this.hls = this.log = this.warn = null
                            }, t.clearTimer = function() {
                                -1 !== this.timer && (self.clearTimeout(this.timer), this.timer = -1)
                            }, t.startLoad = function() {
                                this.canLoad = !0, this.requestScheduled = -1, this.loadPlaylist()
                            }, t.stopLoad = function() {
                                this.canLoad = !1, this.clearTimer()
                            }, t.switchParams = function(e, t) {
                                var r = null == t ? void 0 : t.renditionReports;
                                if (r) {
                                    for (var n = -1, i = 0; i < r.length; i++) {
                                        var a = r[i],
                                            s = void 0;
                                        try {
                                            s = new self.URL(a.URI, t.url).href
                                        } catch (e) {
                                            F.warn("Could not construct new URL for Rendition Report: " + e), s = a.URI || ""
                                        }
                                        if (s === e) {
                                            n = i;
                                            break
                                        }
                                        s === e.substring(0, s.length) && (n = i)
                                    }
                                    if (-1 !== n) {
                                        var o = r[n],
                                            l = parseInt(o["LAST-MSN"]) || (null == t ? void 0 : t.lastPartSn),
                                            u = parseInt(o["LAST-PART"]) || (null == t ? void 0 : t.lastPartIndex);
                                        if (this.hls.config.lowLatencyMode) {
                                            var c = Math.min(t.age - t.partTarget, t.targetduration);
                                            u >= 0 && c > t.partTarget && (u += 1)
                                        }
                                        return new Sr(l, u >= 0 ? u : void 0, br.No)
                                    }
                                }
                            }, t.loadPlaylist = function(e) {
                                -1 === this.requestScheduled && (this.requestScheduled = self.performance.now())
                            }, t.shouldLoadPlaylist = function(e) {
                                return this.canLoad && !!e && !!e.url && (!e.details || e.details.live)
                            }, t.shouldReloadPlaylist = function(e) {
                                return -1 === this.timer && -1 === this.requestScheduled && this.shouldLoadPlaylist(e)
                            }, t.playlistLoaded = function(e, t, r) {
                                var n = this,
                                    i = t.details,
                                    a = t.stats,
                                    s = self.performance.now(),
                                    o = a.loading.first ? Math.max(0, s - a.loading.first) : 0;
                                if (i.advancedDateTime = Date.now() - o, i.live || null != r && r.live) {
                                    if (i.reloaded(r), r && this.log("live playlist " + e + " " + (i.advanced ? "REFRESHED " + i.lastPartSn + "-" + i.lastPartIndex : i.updated ? "UPDATED" : "MISSED")), r && i.fragments.length > 0 && Ir(r, i), !this.canLoad || !i.live) return;
                                    var l, u = void 0,
                                        c = void 0;
                                    if (i.canBlockReload && i.endSN && i.advanced) {
                                        var d = this.hls.config.lowLatencyMode,
                                            h = i.lastPartSn,
                                            f = i.endSN,
                                            g = i.lastPartIndex,
                                            p = h === f; - 1 !== g ? (u = p ? f + 1 : h, c = p ? d ? 0 : g : g + 1) : u = f + 1;
                                        var m = i.age,
                                            v = m + i.ageHeader,
                                            y = Math.min(v - i.partTarget, 1.5 * i.targetduration);
                                        if (y > 0) {
                                            if (r && y > r.tuneInGoal) this.warn("CDN Tune-in goal increased from: " + r.tuneInGoal + " to: " + y + " with playlist age: " + i.age), y = 0;
                                            else {
                                                var T = Math.floor(y / i.targetduration);
                                                u += T, void 0 !== c && (c += Math.round(y % i.targetduration / i.partTarget)), this.log("CDN Tune-in age: " + i.ageHeader + "s last advanced " + m.toFixed(2) + "s goal: " + y + " skip sn " + T + " to part " + c)
                                            }
                                            i.tuneInGoal = y
                                        }
                                        if (l = this.getDeliveryDirectives(i, t.deliveryDirectives, u, c), d || !p) return void this.loadPlaylist(l)
                                    } else(i.canBlockReload || i.canSkipUntil) && (l = this.getDeliveryDirectives(i, t.deliveryDirectives, u, c));
                                    var b = this.hls.mainForwardBufferInfo,
                                        E = b ? b.end - b.len : 0,
                                        S = Or(i, 1e3 * (i.edge - E));
                                    i.updated && s > this.requestScheduled + S && (this.requestScheduled = a.loading.start), void 0 !== u && i.canBlockReload ? this.requestScheduled = a.loading.first + S - (1e3 * i.partTarget || 1e3) : -1 === this.requestScheduled || this.requestScheduled + S < s ? this.requestScheduled = s : this.requestScheduled - s <= 0 && (this.requestScheduled += S);
                                    var A = this.requestScheduled - s;
                                    A = Math.max(0, A), this.log("reload live playlist " + e + " in " + Math.round(A) + " ms"), this.timer = self.setTimeout((function() {
                                        return n.loadPlaylist(l)
                                    }), A)
                                } else this.clearTimer()
                            }, t.getDeliveryDirectives = function(e, t, r, n) {
                                var i = Er(e, r);
                                return null != t && t.skip && e.deltaUpdateFailed && (r = t.msn, n = t.part, i = br.No), new Sr(r, n, i)
                            }, t.checkRetry = function(e) {
                                var t = this,
                                    r = e.details,
                                    n = Ur(e),
                                    i = e.errorAction,
                                    a = i || {},
                                    s = a.action,
                                    o = a.retryCount,
                                    l = void 0 === o ? 0 : o,
                                    u = a.retryConfig,
                                    c = !!i && !!u && (s === $r.RetryRequest || !i.resolved && s === $r.SendAlternateToPenaltyBox);
                                if (c) {
                                    var d;
                                    if (this.requestScheduled = -1, l >= u.maxNumRetry) return !1;
                                    if (n && null != (d = e.context) && d.deliveryDirectives) this.warn("Retrying playlist loading " + (l + 1) + "/" + u.maxNumRetry + ' after "' + r + '" without delivery-directives'), this.loadPlaylist();
                                    else {
                                        var h = Gr(u, l);
                                        this.timer = self.setTimeout((function() {
                                            return t.loadPlaylist()
                                        }), h), this.warn("Retrying playlist loading " + (l + 1) + "/" + u.maxNumRetry + ' after "' + r + '" in ' + h + "ms")
                                    }
                                    e.levelRetry = !0, i.resolved = !0
                                }
                                return c
                            }, e
                        }(),
                        en = function() {
                            function e(e, t, r) {
                                void 0 === t && (t = 0), void 0 === r && (r = 0), this.halfLife = void 0, this.alpha_ = void 0, this.estimate_ = void 0, this.totalWeight_ = void 0, this.halfLife = e, this.alpha_ = e ? Math.exp(Math.log(.5) / e) : 0, this.estimate_ = t, this.totalWeight_ = r
                            }
                            var t = e.prototype;
                            return t.sample = function(e, t) {
                                var r = Math.pow(this.alpha_, e);
                                this.estimate_ = t * (1 - r) + r * this.estimate_, this.totalWeight_ += e
                            }, t.getTotalWeight = function() {
                                return this.totalWeight_
                            }, t.getEstimate = function() {
                                if (this.alpha_) {
                                    var e = 1 - Math.pow(this.alpha_, this.totalWeight_);
                                    if (e) return this.estimate_ / e
                                }
                                return this.estimate_
                            }, e
                        }(),
                        tn = function() {
                            function e(e, t, r, n) {
                                void 0 === n && (n = 100), this.defaultEstimate_ = void 0, this.minWeight_ = void 0, this.minDelayMs_ = void 0, this.slow_ = void 0, this.fast_ = void 0, this.defaultTTFB_ = void 0, this.ttfb_ = void 0, this.defaultEstimate_ = r, this.minWeight_ = .001, this.minDelayMs_ = 50, this.slow_ = new en(e), this.fast_ = new en(t), this.defaultTTFB_ = n, this.ttfb_ = new en(e)
                            }
                            var t = e.prototype;
                            return t.update = function(e, t) {
                                var r = this.slow_,
                                    n = this.fast_,
                                    i = this.ttfb_;
                                r.halfLife !== e && (this.slow_ = new en(e, r.getEstimate(), r.getTotalWeight())), n.halfLife !== t && (this.fast_ = new en(t, n.getEstimate(), n.getTotalWeight())), i.halfLife !== e && (this.ttfb_ = new en(e, i.getEstimate(), i.getTotalWeight()))
                            }, t.sample = function(e, t) {
                                var r = (e = Math.max(e, this.minDelayMs_)) / 1e3,
                                    n = 8 * t / r;
                                this.fast_.sample(r, n), this.slow_.sample(r, n)
                            }, t.sampleTTFB = function(e) {
                                var t = e / 1e3,
                                    r = Math.sqrt(2) * Math.exp(-Math.pow(t, 2) / 2);
                                this.ttfb_.sample(r, Math.max(e, 5))
                            }, t.canEstimate = function() {
                                return this.fast_.getTotalWeight() >= this.minWeight_
                            }, t.getEstimate = function() {
                                return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_
                            }, t.getEstimateTTFB = function() {
                                return this.ttfb_.getTotalWeight() >= this.minWeight_ ? this.ttfb_.getEstimate() : this.defaultTTFB_
                            }, t.destroy = function() {}, e
                        }(),
                        rn = {
                            supported: !0,
                            configurations: [],
                            decodingInfoResults: [{
                                supported: !0,
                                powerEfficient: !0,
                                smooth: !0
                            }]
                        },
                        nn = {};

                    function an(e, t, r, n, i, a) {
                        var s = e.audioCodec ? e.audioGroups : null,
                            o = null == a ? void 0 : a.audioCodec,
                            l = null == a ? void 0 : a.channels,
                            u = l ? parseInt(l) : o ? 1 / 0 : 2,
                            c = null;
                        if (null != s && s.length) try {
                            c = 1 === s.length && s[0] ? t.groups[s[0]].channels : s.reduce((function(e, r) {
                                if (r) {
                                    var n = t.groups[r];
                                    if (!n) throw new Error("Audio track group " + r + " not found");
                                    Object.keys(n.channels).forEach((function(t) {
                                        e[t] = (e[t] || 0) + n.channels[t]
                                    }))
                                }
                                return e
                            }), {
                                2: 0
                            })
                        } catch (e) {
                            return !0
                        }
                        return void 0 !== e.videoCodec && (e.width > 1920 && e.height > 1088 || e.height > 1920 && e.width > 1088 || e.frameRate > Math.max(n, 30) || "SDR" !== e.videoRange && e.videoRange !== r || e.bitrate > Math.max(i, 8e6)) || !!c && k(u) && Object.keys(c).some((function(e) {
                            return parseInt(e) > u
                        }))
                    }

                    function sn(e, t, r) {
                        var i = e.videoCodec,
                            a = e.audioCodec;
                        if (!i || !a || !r) return Promise.resolve(rn);
                        var s = {
                                width: e.width,
                                height: e.height,
                                bitrate: Math.ceil(Math.max(.9 * e.bitrate, e.averageBitrate)),
                                framerate: e.frameRate || 30
                            },
                            o = e.videoRange;
                        "SDR" !== o && (s.transferFunction = o.toLowerCase());
                        var l = i.split(",").map((function(e) {
                            return {
                                type: "media-source",
                                video: n(n({}, s), {}, {
                                    contentType: Rt(e, "video")
                                })
                            }
                        }));
                        return a && e.audioGroups && e.audioGroups.forEach((function(e) {
                            var r;
                            e && (null == (r = t.groups[e]) || r.tracks.forEach((function(t) {
                                if (t.groupId === e) {
                                    var r = t.channels || "",
                                        n = parseFloat(r);
                                    k(n) && n > 2 && l.push.apply(l, a.split(",").map((function(e) {
                                        return {
                                            type: "media-source",
                                            audio: {
                                                contentType: Rt(e, "audio"),
                                                channels: "" + n
                                            }
                                        }
                                    })))
                                }
                            })))
                        })), Promise.all(l.map((function(e) {
                            var t = on(e);
                            return nn[t] || (nn[t] = r.decodingInfo(e))
                        }))).then((function(e) {
                            return {
                                supported: !e.some((function(e) {
                                    return !e.supported
                                })),
                                configurations: l,
                                decodingInfoResults: e
                            }
                        })).catch((function(e) {
                            return {
                                supported: !1,
                                configurations: l,
                                decodingInfoResults: [],
                                error: e
                            }
                        }))
                    }

                    function on(e) {
                        var t = e.audio,
                            r = e.video,
                            n = r || t;
                        if (n) {
                            var i = n.contentType.split('"')[1];
                            if (r) return "r" + r.height + "x" + r.width + "f" + Math.ceil(r.framerate) + (r.transferFunction || "sd") + "_" + i + "_" + Math.ceil(r.bitrate / 1e5);
                            if (t) return "c" + t.channels + (t.spatialRendering ? "s" : "n") + "_" + i
                        }
                        return ""
                    }

                    function ln() {
                        if ("function" == typeof matchMedia) {
                            var e = matchMedia("(dynamic-range: high)"),
                                t = matchMedia("bad query");
                            if (e.media !== t.media) return !0 === e.matches
                        }
                        return !1
                    }

                    function un(e, t) {
                        var r = !1,
                            n = [];
                        return e && (r = "SDR" !== e, n = [e]), t && (n = t.allowedVideoRanges || yr.slice(0), n = (r = void 0 !== t.preferHDR ? t.preferHDR : ln()) ? n.filter((function(e) {
                            return "SDR" !== e
                        })) : ["SDR"]), {
                            preferHDR: r,
                            allowedVideoRanges: n
                        }
                    }

                    function cn(e, t, r, n, i) {
                        for (var a = Object.keys(e), s = null == n ? void 0 : n.channels, o = null == n ? void 0 : n.audioCodec, l = s && 2 === parseInt(s), u = !0, c = !1, d = 1 / 0, h = 1 / 0, f = 1 / 0, g = 0, p = [], m = un(t, i), v = m.preferHDR, y = m.allowedVideoRanges, T = function() {
                                var t = e[a[b]];
                                u = t.channels[2] > 0, d = Math.min(d, t.minHeight), h = Math.min(h, t.minFramerate), f = Math.min(f, t.minBitrate);
                                var r = y.filter((function(e) {
                                    return t.videoRanges[e] > 0
                                }));
                                r.length > 0 && (c = !0, p = r)
                            }, b = a.length; b--;) T();
                        d = k(d) ? d : 0, h = k(h) ? h : 0;
                        var E = Math.max(1080, d),
                            S = Math.max(30, h);
                        return f = k(f) ? f : r, r = Math.max(f, r), c || (t = void 0, p = []), {
                            codecSet: a.reduce((function(t, n) {
                                var i = e[n];
                                if (n === t) return t;
                                if (i.minBitrate > r) return dn(n, "min bitrate of " + i.minBitrate + " > current estimate of " + r), t;
                                if (!i.hasDefaultAudio) return dn(n, "no renditions with default or auto-select sound found"), t;
                                if (o && n.indexOf(o.substring(0, 4)) % 5 != 0) return dn(n, 'audio codec preference "' + o + '" not found'), t;
                                if (s && !l) {
                                    if (!i.channels[s]) return dn(n, "no renditions with " + s + " channel sound found (channels options: " + Object.keys(i.channels) + ")"), t
                                } else if ((!o || l) && u && 0 === i.channels[2]) return dn(n, "no renditions with stereo sound found"), t;
                                return i.minHeight > E ? (dn(n, "min resolution of " + i.minHeight + " > maximum of " + E), t) : i.minFramerate > S ? (dn(n, "min framerate of " + i.minFramerate + " > maximum of " + S), t) : p.some((function(e) {
                                    return i.videoRanges[e] > 0
                                })) ? i.maxScore < g ? (dn(n, "max score of " + i.maxScore + " < selected max of " + g), t) : t && (wt(n) >= wt(t) || i.fragmentError > e[t].fragmentError) ? t : (g = i.maxScore, n) : (dn(n, "no variants with VIDEO-RANGE of " + JSON.stringify(p) + " found"), t)
                            }), void 0),
                            videoRanges: p,
                            preferHDR: v,
                            minFramerate: h,
                            minBitrate: f
                        }
                    }

                    function dn(e, t) {
                        F.log('[abr] start candidates with "' + e + '" ignored because ' + t)
                    }

                    function hn(e) {
                        return e.reduce((function(e, t) {
                            var r = e.groups[t.groupId];
                            r || (r = e.groups[t.groupId] = {
                                tracks: [],
                                channels: {
                                    2: 0
                                },
                                hasDefault: !1,
                                hasAutoSelect: !1
                            }), r.tracks.push(t);
                            var n = t.channels || "2";
                            return r.channels[n] = (r.channels[n] || 0) + 1, r.hasDefault = r.hasDefault || t.default, r.hasAutoSelect = r.hasAutoSelect || t.autoselect, r.hasDefault && (e.hasDefaultAudio = !0), r.hasAutoSelect && (e.hasAutoSelectAudio = !0), e
                        }), {
                            hasDefaultAudio: !1,
                            hasAutoSelectAudio: !1,
                            groups: {}
                        })
                    }

                    function fn(e, t, r, n) {
                        return e.slice(r, n + 1).reduce((function(e, r) {
                            if (!r.codecSet) return e;
                            var n = r.audioGroups,
                                i = e[r.codecSet];
                            i || (e[r.codecSet] = i = {
                                minBitrate: 1 / 0,
                                minHeight: 1 / 0,
                                minFramerate: 1 / 0,
                                maxScore: 0,
                                videoRanges: {
                                    SDR: 0
                                },
                                channels: {
                                    2: 0
                                },
                                hasDefaultAudio: !n,
                                fragmentError: 0
                            }), i.minBitrate = Math.min(i.minBitrate, r.bitrate);
                            var a = Math.min(r.height, r.width);
                            return i.minHeight = Math.min(i.minHeight, a), i.minFramerate = Math.min(i.minFramerate, r.frameRate), i.maxScore = Math.max(i.maxScore, r.score), i.fragmentError += r.fragmentError, i.videoRanges[r.videoRange] = (i.videoRanges[r.videoRange] || 0) + 1, n && n.forEach((function(e) {
                                if (e) {
                                    var r = t.groups[e];
                                    i.hasDefaultAudio = i.hasDefaultAudio || t.hasDefaultAudio ? r.hasDefault : r.hasAutoSelect || !t.hasDefaultAudio && !t.hasAutoSelectAudio, Object.keys(r.channels).forEach((function(e) {
                                        i.channels[e] = (i.channels[e] || 0) + r.channels[e]
                                    }))
                                }
                            })), e
                        }), {})
                    }

                    function gn(e, t, r) {
                        if ("attrs" in e) {
                            var n = t.indexOf(e);
                            if (-1 !== n) return n
                        }
                        for (var i = 0; i < t.length; i++)
                            if (pn(e, t[i], r)) return i;
                        return -1
                    }

                    function pn(e, t, r) {
                        var n = e.groupId,
                            i = e.name,
                            a = e.lang,
                            s = e.assocLang,
                            o = e.characteristics,
                            l = e.default,
                            u = e.forced;
                        return (void 0 === n || t.groupId === n) && (void 0 === i || t.name === i) && (void 0 === a || t.lang === a) && (void 0 === a || t.assocLang === s) && (void 0 === l || t.default === l) && (void 0 === u || t.forced === u) && (void 0 === o || mn(o, t.characteristics)) && (void 0 === r || r(e, t))
                    }

                    function mn(e, t) {
                        void 0 === t && (t = "");
                        var r = e.split(","),
                            n = t.split(",");
                        return r.length === n.length && !r.some((function(e) {
                            return -1 === n.indexOf(e)
                        }))
                    }

                    function vn(e, t) {
                        var r = e.audioCodec,
                            n = e.channels;
                        return !(void 0 !== r && (t.audioCodec || "").substring(0, 4) !== r.substring(0, 4) || void 0 !== n && n !== (t.channels || "2"))
                    }

                    function yn(e, t, r, n, i) {
                        var a = t[n],
                            s = t.reduce((function(e, t, r) {
                                var n = t.uri;
                                return (e[n] || (e[n] = [])).push(r), e
                            }), {})[a.uri];
                        s.length > 1 && (n = Math.max.apply(Math, s));
                        var o = a.videoRange,
                            l = a.frameRate,
                            u = a.codecSet.substring(0, 4),
                            c = Tn(t, n, (function(t) {
                                if (t.videoRange !== o || t.frameRate !== l || t.codecSet.substring(0, 4) !== u) return !1;
                                var n = t.audioGroups,
                                    a = r.filter((function(e) {
                                        return !n || -1 !== n.indexOf(e.groupId)
                                    }));
                                return gn(e, a, i) > -1
                            }));
                        return c > -1 ? c : Tn(t, n, (function(t) {
                            var n = t.audioGroups,
                                a = r.filter((function(e) {
                                    return !n || -1 !== n.indexOf(e.groupId)
                                }));
                            return gn(e, a, i) > -1
                        }))
                    }

                    function Tn(e, t, r) {
                        for (var n = t; n; n--)
                            if (r(e[n])) return n;
                        for (var i = t + 1; i < e.length; i++)
                            if (r(e[i])) return i;
                        return -1
                    }
                    var bn = function() {
                            function e(e) {
                                var t = this;
                                this.hls = void 0, this.lastLevelLoadSec = 0, this.lastLoadedFragLevel = -1, this.firstSelection = -1, this._nextAutoLevel = -1, this.nextAutoLevelKey = "", this.audioTracksByGroup = null, this.codecTiers = null, this.timer = -1, this.fragCurrent = null, this.partCurrent = null, this.bitrateTestDelay = 0, this.bwEstimator = void 0, this._abandonRulesCheck = function() {
                                    var e = t.fragCurrent,
                                        r = t.partCurrent,
                                        n = t.hls,
                                        i = n.autoLevelEnabled,
                                        a = n.media;
                                    if (e && a) {
                                        var s = performance.now(),
                                            o = r ? r.stats : e.stats,
                                            l = r ? r.duration : e.duration,
                                            u = s - o.loading.start,
                                            c = n.minAutoLevel;
                                        if (o.aborted || o.loaded && o.loaded === o.total || e.level <= c) return t.clearTimer(), void(t._nextAutoLevel = -1);
                                        if (i && !a.paused && a.playbackRate && a.readyState) {
                                            var d = n.mainForwardBufferInfo;
                                            if (null !== d) {
                                                var h = t.bwEstimator.getEstimateTTFB(),
                                                    f = Math.abs(a.playbackRate);
                                                if (!(u <= Math.max(h, l / (2 * f) * 1e3))) {
                                                    var g = d.len / f,
                                                        p = o.loading.first ? o.loading.first - o.loading.start : -1,
                                                        m = o.loaded && p > -1,
                                                        v = t.getBwEstimate(),
                                                        y = n.levels,
                                                        T = y[e.level],
                                                        b = o.total || Math.max(o.loaded, Math.round(l * T.averageBitrate / 8)),
                                                        E = m ? u - p : u;
                                                    E < 1 && m && (E = Math.min(u, 8 * o.loaded / v));
                                                    var S = m ? 1e3 * o.loaded / E : 0,
                                                        A = S ? (b - o.loaded) / S : 8 * b / v + h / 1e3;
                                                    if (!(A <= g)) {
                                                        var L, R = S ? 8 * S : v,
                                                            w = Number.POSITIVE_INFINITY;
                                                        for (L = e.level - 1; L > c; L--) {
                                                            var D = y[L].maxBitrate;
                                                            if ((w = t.getTimeToLoadFrag(h / 1e3, R, l * D, !y[L].details)) < g) break
                                                        }
                                                        if (!(w >= A || w > 10 * l)) {
                                                            n.nextLoadLevel = n.nextAutoLevel = L, m ? t.bwEstimator.sample(u - Math.min(h, p), o.loaded) : t.bwEstimator.sampleTTFB(u);
                                                            var C = y[L].maxBitrate;
                                                            t.getBwEstimate() * t.hls.config.abrBandWidthUpFactor > C && t.resetEstimator(C), t.clearTimer(), F.warn("[abr] Fragment " + e.sn + (r ? " part " + r.index : "") + " of level " + e.level + " is loading too slowly;\n      Time to underbuffer: " + g.toFixed(3) + " s\n      Estimated load time for current fragment: " + A.toFixed(3) + " s\n      Estimated load time for down switch fragment: " + w.toFixed(3) + " s\n      TTFB estimate: " + (0 | p) + " ms\n      Current BW estimate: " + (k(v) ? 0 | v : "Unknown") + " bps\n      New BW estimate: " + (0 | t.getBwEstimate()) + " bps\n      Switching to level " + L + " @ " + (0 | C) + " bps"), n.trigger(I.FRAG_LOAD_EMERGENCY_ABORTED, {
                                                                frag: e,
                                                                part: r,
                                                                stats: o
                                                            })
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }, this.hls = e, this.bwEstimator = this.initEstimator(), this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.resetEstimator = function(e) {
                                e && (F.log("setting initial bwe to " + e), this.hls.config.abrEwmaDefaultEstimate = e), this.firstSelection = -1, this.bwEstimator = this.initEstimator()
                            }, t.initEstimator = function() {
                                var e = this.hls.config;
                                return new tn(e.abrEwmaSlowVoD, e.abrEwmaFastVoD, e.abrEwmaDefaultEstimate)
                            }, t.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.FRAG_LOADING, this.onFragLoading, this), e.on(I.FRAG_LOADED, this.onFragLoaded, this), e.on(I.FRAG_BUFFERED, this.onFragBuffered, this), e.on(I.LEVEL_SWITCHING, this.onLevelSwitching, this), e.on(I.LEVEL_LOADED, this.onLevelLoaded, this), e.on(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.on(I.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this), e.on(I.ERROR, this.onError, this)
                            }, t.unregisterListeners = function() {
                                var e = this.hls;
                                e && (e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.FRAG_LOADING, this.onFragLoading, this), e.off(I.FRAG_LOADED, this.onFragLoaded, this), e.off(I.FRAG_BUFFERED, this.onFragBuffered, this), e.off(I.LEVEL_SWITCHING, this.onLevelSwitching, this), e.off(I.LEVEL_LOADED, this.onLevelLoaded, this), e.off(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.off(I.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this), e.off(I.ERROR, this.onError, this))
                            }, t.destroy = function() {
                                this.unregisterListeners(), this.clearTimer(), this.hls = this._abandonRulesCheck = null, this.fragCurrent = this.partCurrent = null
                            }, t.onManifestLoading = function(e, t) {
                                this.lastLoadedFragLevel = -1, this.firstSelection = -1, this.lastLevelLoadSec = 0, this.fragCurrent = this.partCurrent = null, this.onLevelsUpdated(), this.clearTimer()
                            }, t.onLevelsUpdated = function() {
                                this.lastLoadedFragLevel > -1 && this.fragCurrent && (this.lastLoadedFragLevel = this.fragCurrent.level), this._nextAutoLevel = -1, this.onMaxAutoLevelUpdated(), this.codecTiers = null, this.audioTracksByGroup = null
                            }, t.onMaxAutoLevelUpdated = function() {
                                this.firstSelection = -1, this.nextAutoLevelKey = ""
                            }, t.onFragLoading = function(e, t) {
                                var r, n = t.frag;
                                this.ignoreFragment(n) || (n.bitrateTest || (this.fragCurrent = n, this.partCurrent = null != (r = t.part) ? r : null), this.clearTimer(), this.timer = self.setInterval(this._abandonRulesCheck, 100))
                            }, t.onLevelSwitching = function(e, t) {
                                this.clearTimer()
                            }, t.onError = function(e, t) {
                                if (!t.fatal) switch (t.details) {
                                    case D.BUFFER_ADD_CODEC_ERROR:
                                    case D.BUFFER_APPEND_ERROR:
                                        this.lastLoadedFragLevel = -1, this.firstSelection = -1;
                                        break;
                                    case D.FRAG_LOAD_TIMEOUT:
                                        var r = t.frag,
                                            n = this.fragCurrent,
                                            i = this.partCurrent;
                                        if (r && n && r.sn === n.sn && r.level === n.level) {
                                            var a = performance.now(),
                                                s = i ? i.stats : r.stats,
                                                o = a - s.loading.start,
                                                l = s.loading.first ? s.loading.first - s.loading.start : -1;
                                            if (s.loaded && l > -1) {
                                                var u = this.bwEstimator.getEstimateTTFB();
                                                this.bwEstimator.sample(o - Math.min(u, l), s.loaded)
                                            } else this.bwEstimator.sampleTTFB(o)
                                        }
                                }
                            }, t.getTimeToLoadFrag = function(e, t, r, n) {
                                return e + r / t + (n ? this.lastLevelLoadSec : 0)
                            }, t.onLevelLoaded = function(e, t) {
                                var r = this.hls.config,
                                    n = t.stats.loading,
                                    i = n.end - n.start;
                                k(i) && (this.lastLevelLoadSec = i / 1e3), t.details.live ? this.bwEstimator.update(r.abrEwmaSlowLive, r.abrEwmaFastLive) : this.bwEstimator.update(r.abrEwmaSlowVoD, r.abrEwmaFastVoD)
                            }, t.onFragLoaded = function(e, t) {
                                var r = t.frag,
                                    n = t.part,
                                    i = n ? n.stats : r.stats;
                                if (r.type === $t.MAIN && this.bwEstimator.sampleTTFB(i.loading.first - i.loading.start), !this.ignoreFragment(r)) {
                                    if (this.clearTimer(), r.level === this._nextAutoLevel && (this._nextAutoLevel = -1), this.firstSelection = -1, this.hls.config.abrMaxWithRealBitrate) {
                                        var a = n ? n.duration : r.duration,
                                            s = this.hls.levels[r.level],
                                            o = (s.loaded ? s.loaded.bytes : 0) + i.loaded,
                                            l = (s.loaded ? s.loaded.duration : 0) + a;
                                        s.loaded = {
                                            bytes: o,
                                            duration: l
                                        }, s.realBitrate = Math.round(8 * o / l)
                                    }
                                    if (r.bitrateTest) {
                                        var u = {
                                            stats: i,
                                            frag: r,
                                            part: n,
                                            id: r.type
                                        };
                                        this.onFragBuffered(I.FRAG_BUFFERED, u), r.bitrateTest = !1
                                    } else this.lastLoadedFragLevel = r.level
                                }
                            }, t.onFragBuffered = function(e, t) {
                                var r = t.frag,
                                    n = t.part,
                                    i = null != n && n.stats.loaded ? n.stats : r.stats;
                                if (!i.aborted && !this.ignoreFragment(r)) {
                                    var a = i.parsing.end - i.loading.start - Math.min(i.loading.first - i.loading.start, this.bwEstimator.getEstimateTTFB());
                                    this.bwEstimator.sample(a, i.loaded), i.bwEstimate = this.getBwEstimate(), r.bitrateTest ? this.bitrateTestDelay = a / 1e3 : this.bitrateTestDelay = 0
                                }
                            }, t.ignoreFragment = function(e) {
                                return e.type !== $t.MAIN || "initSegment" === e.sn
                            }, t.clearTimer = function() {
                                this.timer > -1 && (self.clearInterval(this.timer), this.timer = -1)
                            }, t.getAutoLevelKey = function() {
                                var e;
                                return this.getBwEstimate() + "_" + (null == (e = this.hls.mainForwardBufferInfo) ? void 0 : e.len)
                            }, t.getNextABRAutoLevel = function() {
                                var e = this.fragCurrent,
                                    t = this.partCurrent,
                                    r = this.hls,
                                    n = r.maxAutoLevel,
                                    i = r.config,
                                    a = r.minAutoLevel,
                                    s = r.media,
                                    o = t ? t.duration : e ? e.duration : 0,
                                    l = s && 0 !== s.playbackRate ? Math.abs(s.playbackRate) : 1,
                                    u = this.getBwEstimate(),
                                    c = r.mainForwardBufferInfo,
                                    d = (c ? c.len : 0) / l,
                                    h = i.abrBandWidthFactor,
                                    f = i.abrBandWidthUpFactor;
                                if (d) {
                                    var g = this.findBestLevel(u, a, n, d, 0, h, f);
                                    if (g >= 0) return g
                                }
                                var p = o ? Math.min(o, i.maxStarvationDelay) : i.maxStarvationDelay;
                                if (!d) {
                                    var m = this.bitrateTestDelay;
                                    m && (p = (o ? Math.min(o, i.maxLoadingDelay) : i.maxLoadingDelay) - m, F.info("[abr] bitrate test took " + Math.round(1e3 * m) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * p) + " ms"), h = f = 1)
                                }
                                var v = this.findBestLevel(u, a, n, d, p, h, f);
                                if (F.info("[abr] " + (d ? "rebuffering expected" : "buffer is empty") + ", optimal quality level " + v), v > -1) return v;
                                var y = r.levels[a],
                                    T = r.levels[r.loadLevel];
                                return (null == y ? void 0 : y.bitrate) < (null == T ? void 0 : T.bitrate) ? a : r.loadLevel
                            }, t.getBwEstimate = function() {
                                return this.bwEstimator.canEstimate() ? this.bwEstimator.getEstimate() : this.hls.config.abrEwmaDefaultEstimate
                            }, t.findBestLevel = function(e, t, r, n, i, a, s) {
                                var o, l = this,
                                    u = n + i,
                                    c = this.lastLoadedFragLevel,
                                    d = -1 === c ? this.hls.firstLevel : c,
                                    h = this.fragCurrent,
                                    f = this.partCurrent,
                                    g = this.hls,
                                    p = g.levels,
                                    m = g.allAudioTracks,
                                    v = g.loadLevel,
                                    y = g.config;
                                if (1 === p.length) return 0;
                                var T, b = p[d],
                                    E = !(null == b || null == (o = b.details) || !o.live),
                                    S = -1 === v || -1 === c,
                                    A = "SDR",
                                    L = (null == b ? void 0 : b.frameRate) || 0,
                                    R = y.audioPreference,
                                    I = y.videoPreference,
                                    w = this.audioTracksByGroup || (this.audioTracksByGroup = hn(m));
                                if (S) {
                                    if (-1 !== this.firstSelection) return this.firstSelection;
                                    var D = cn(this.codecTiers || (this.codecTiers = fn(p, w, t, r)), A, e, R, I),
                                        C = D.codecSet,
                                        x = D.videoRanges,
                                        _ = D.minFramerate,
                                        O = D.minBitrate,
                                        P = D.preferHDR;
                                    T = C, A = P ? x[x.length - 1] : x[0], L = _, e = Math.max(e, O), F.log("[abr] picked start tier " + JSON.stringify(D))
                                } else T = null == b ? void 0 : b.codecSet, A = null == b ? void 0 : b.videoRange;
                                for (var M, N = f ? f.duration : h ? h.duration : 0, U = this.bwEstimator.getEstimateTTFB() / 1e3, B = [], G = function() {
                                        var t, o = p[V],
                                            h = V > d;
                                        if (!o) return 0;
                                        if (y.useMediaCapabilities && !o.supportedResult && !o.supportedPromise) {
                                            var g = navigator.mediaCapabilities;
                                            "function" == typeof(null == g ? void 0 : g.decodingInfo) && an(o, w, A, L, e, R) ? (o.supportedPromise = sn(o, w, g), o.supportedPromise.then((function(e) {
                                                o.supportedResult = e;
                                                var t = l.hls.levels,
                                                    r = t.indexOf(o);
                                                e.error ? F.warn('[abr] MediaCapabilities decodingInfo error: "' + e.error + '" for level ' + r + " " + JSON.stringify(e)) : e.supported || (F.warn("[abr] Unsupported MediaCapabilities decodingInfo result for level " + r + " " + JSON.stringify(e)), r > -1 && t.length > 1 && (F.log("[abr] Removing unsupported level " + r), l.hls.removeLevel(r)))
                                            }))) : o.supportedResult = rn
                                        }
                                        if (T && o.codecSet !== T || A && o.videoRange !== A || h && L > o.frameRate || !h && L > 0 && L < o.frameRate || o.supportedResult && (null == (t = o.supportedResult.decodingInfoResults) || !t[0].smooth)) return B.push(V), 0;
                                        var m, I = o.details,
                                            D = (f ? null == I ? void 0 : I.partTarget : null == I ? void 0 : I.averagetargetduration) || N;
                                        m = h ? s * e : a * e;
                                        var C = N && n >= 2 * N && 0 === i ? p[V].averageBitrate : p[V].maxBitrate,
                                            x = l.getTimeToLoadFrag(U, m, C * D, void 0 === I);
                                        if (m >= C && (V === c || 0 === o.loadError && 0 === o.fragmentError) && (x <= U || !k(x) || E && !l.bitrateTestDelay || x < u)) {
                                            var _ = l.forcedAutoLevel;
                                            return V === v || -1 !== _ && _ === v || (B.length && F.trace("[abr] Skipped level(s) " + B.join(",") + " of " + r + ' max with CODECS and VIDEO-RANGE:"' + p[B[0]].codecs + '" ' + p[B[0]].videoRange + '; not compatible with "' + b.codecs + '" ' + A), F.info("[abr] switch candidate:" + d + "->" + V + " adjustedbw(" + Math.round(m) + ")-bitrate=" + Math.round(m - C) + " ttfb:" + U.toFixed(1) + " avgDuration:" + D.toFixed(1) + " maxFetchDuration:" + u.toFixed(1) + " fetchDuration:" + x.toFixed(1) + " firstSelection:" + S + " codecSet:" + T + " videoRange:" + A + " hls.loadLevel:" + v)), S && (l.firstSelection = V), {
                                                v: V
                                            }
                                        }
                                    }, V = r; V >= t; V--)
                                    if (0 !== (M = G()) && M) return M.v;
                                return -1
                            }, o(e, [{
                                key: "firstAutoLevel",
                                get: function() {
                                    var e = this.hls,
                                        t = e.maxAutoLevel,
                                        r = e.minAutoLevel,
                                        n = this.getBwEstimate(),
                                        i = this.hls.config.maxStarvationDelay,
                                        a = this.findBestLevel(n, r, t, 0, i, 1, 1);
                                    if (a > -1) return a;
                                    var s = this.hls.firstLevel,
                                        o = Math.min(Math.max(s, r), t);
                                    return F.warn("[abr] Could not find best starting auto level. Defaulting to first in playlist " + s + " clamped to " + o), o
                                }
                            }, {
                                key: "forcedAutoLevel",
                                get: function() {
                                    return this.nextAutoLevelKey ? -1 : this._nextAutoLevel
                                }
                            }, {
                                key: "nextAutoLevel",
                                get: function() {
                                    var e = this.forcedAutoLevel,
                                        t = this.bwEstimator.canEstimate(),
                                        r = this.lastLoadedFragLevel > -1;
                                    if (!(-1 === e || t && r && this.nextAutoLevelKey !== this.getAutoLevelKey())) return e;
                                    var n = t && r ? this.getNextABRAutoLevel() : this.firstAutoLevel;
                                    if (-1 !== e) {
                                        var i = this.hls.levels;
                                        if (i.length > Math.max(e, n) && i[e].loadError <= i[n].loadError) return e
                                    }
                                    return this._nextAutoLevel = n, this.nextAutoLevelKey = this.getAutoLevelKey(), n
                                },
                                set: function(e) {
                                    var t = this.hls,
                                        r = t.maxAutoLevel,
                                        n = t.minAutoLevel,
                                        i = Math.min(Math.max(e, n), r);
                                    this._nextAutoLevel !== i && (this.nextAutoLevelKey = "", this._nextAutoLevel = i)
                                }
                            }]), e
                        }(),
                        En = function() {
                            function e() {
                                this._boundTick = void 0, this._tickTimer = null, this._tickInterval = null, this._tickCallCount = 0, this._boundTick = this.tick.bind(this)
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.onHandlerDestroying(), this.onHandlerDestroyed()
                            }, t.onHandlerDestroying = function() {
                                this.clearNextTick(), this.clearInterval()
                            }, t.onHandlerDestroyed = function() {}, t.hasInterval = function() {
                                return !!this._tickInterval
                            }, t.hasNextTick = function() {
                                return !!this._tickTimer
                            }, t.setInterval = function(e) {
                                return !this._tickInterval && (this._tickCallCount = 0, this._tickInterval = self.setInterval(this._boundTick, e), !0)
                            }, t.clearInterval = function() {
                                return !!this._tickInterval && (self.clearInterval(this._tickInterval), this._tickInterval = null, !0)
                            }, t.clearNextTick = function() {
                                return !!this._tickTimer && (self.clearTimeout(this._tickTimer), this._tickTimer = null, !0)
                            }, t.tick = function() {
                                this._tickCallCount++, 1 === this._tickCallCount && (this.doTick(), this._tickCallCount > 1 && this.tickImmediate(), this._tickCallCount = 0)
                            }, t.tickImmediate = function() {
                                this.clearNextTick(), this._tickTimer = self.setTimeout(this._boundTick, 0)
                            }, t.doTick = function() {}, e
                        }(),
                        Sn = {
                            NOT_LOADED: "NOT_LOADED",
                            APPENDING: "APPENDING",
                            PARTIAL: "PARTIAL",
                            OK: "OK"
                        },
                        An = function() {
                            function e(e) {
                                this.activePartLists = Object.create(null), this.endListFragments = Object.create(null), this.fragments = Object.create(null), this.timeRanges = Object.create(null), this.bufferPadding = .2, this.hls = void 0, this.hasGaps = !1, this.hls = e, this._registerListeners()
                            }
                            var t = e.prototype;
                            return t._registerListeners = function() {
                                var e = this.hls;
                                e.on(I.BUFFER_APPENDED, this.onBufferAppended, this), e.on(I.FRAG_BUFFERED, this.onFragBuffered, this), e.on(I.FRAG_LOADED, this.onFragLoaded, this)
                            }, t._unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.BUFFER_APPENDED, this.onBufferAppended, this), e.off(I.FRAG_BUFFERED, this.onFragBuffered, this), e.off(I.FRAG_LOADED, this.onFragLoaded, this)
                            }, t.destroy = function() {
                                this._unregisterListeners(), this.fragments = this.activePartLists = this.endListFragments = this.timeRanges = null
                            }, t.getAppendedFrag = function(e, t) {
                                var r = this.activePartLists[t];
                                if (r)
                                    for (var n = r.length; n--;) {
                                        var i = r[n];
                                        if (!i) break;
                                        var a = i.end;
                                        if (i.start <= e && null !== a && e <= a) return i
                                    }
                                return this.getBufferedFrag(e, t)
                            }, t.getBufferedFrag = function(e, t) {
                                for (var r = this.fragments, n = Object.keys(r), i = n.length; i--;) {
                                    var a = r[n[i]];
                                    if ((null == a ? void 0 : a.body.type) === t && a.buffered) {
                                        var s = a.body;
                                        if (s.start <= e && e <= s.end) return s
                                    }
                                }
                                return null
                            }, t.detectEvictedFragments = function(e, t, r, n) {
                                var i = this;
                                this.timeRanges && (this.timeRanges[e] = t);
                                var a = (null == n ? void 0 : n.fragment.sn) || -1;
                                Object.keys(this.fragments).forEach((function(n) {
                                    var s = i.fragments[n];
                                    if (s && !(a >= s.body.sn))
                                        if (s.buffered || s.loaded) {
                                            var o = s.range[e];
                                            o && o.time.some((function(e) {
                                                var r = !i.isTimeBuffered(e.startPTS, e.endPTS, t);
                                                return r && i.removeFragment(s.body), r
                                            }))
                                        } else s.body.type === r && i.removeFragment(s.body)
                                }))
                            }, t.detectPartialFragments = function(e) {
                                var t = this,
                                    r = this.timeRanges,
                                    n = e.frag,
                                    i = e.part;
                                if (r && "initSegment" !== n.sn) {
                                    var a = Ln(n),
                                        s = this.fragments[a];
                                    if (!(!s || s.buffered && n.gap)) {
                                        var o = !n.relurl;
                                        Object.keys(r).forEach((function(e) {
                                            var a = n.elementaryStreams[e];
                                            if (a) {
                                                var l = r[e],
                                                    u = o || !0 === a.partial;
                                                s.range[e] = t.getBufferedTimes(n, i, u, l)
                                            }
                                        })), s.loaded = null, Object.keys(s.range).length ? (s.buffered = !0, (s.body.endList = n.endList || s.body.endList) && (this.endListFragments[s.body.type] = s), kn(s) || this.removeParts(n.sn - 1, n.type)) : this.removeFragment(s.body)
                                    }
                                }
                            }, t.removeParts = function(e, t) {
                                var r = this.activePartLists[t];
                                r && (this.activePartLists[t] = r.filter((function(t) {
                                    return t.fragment.sn >= e
                                })))
                            }, t.fragBuffered = function(e, t) {
                                var r = Ln(e),
                                    n = this.fragments[r];
                                !n && t && (n = this.fragments[r] = {
                                    body: e,
                                    appendedPTS: null,
                                    loaded: null,
                                    buffered: !1,
                                    range: Object.create(null)
                                }, e.gap && (this.hasGaps = !0)), n && (n.loaded = null, n.buffered = !0)
                            }, t.getBufferedTimes = function(e, t, r, n) {
                                for (var i = {
                                        time: [],
                                        partial: r
                                    }, a = e.start, s = e.end, o = e.minEndPTS || s, l = e.maxStartPTS || a, u = 0; u < n.length; u++) {
                                    var c = n.start(u) - this.bufferPadding,
                                        d = n.end(u) + this.bufferPadding;
                                    if (l >= c && o <= d) {
                                        i.time.push({
                                            startPTS: Math.max(a, n.start(u)),
                                            endPTS: Math.min(s, n.end(u))
                                        });
                                        break
                                    }
                                    if (a < d && s > c) {
                                        var h = Math.max(a, n.start(u)),
                                            f = Math.min(s, n.end(u));
                                        f > h && (i.partial = !0, i.time.push({
                                            startPTS: h,
                                            endPTS: f
                                        }))
                                    } else if (s <= c) break
                                }
                                return i
                            }, t.getPartialFragment = function(e) {
                                var t, r, n, i = null,
                                    a = 0,
                                    s = this.bufferPadding,
                                    o = this.fragments;
                                return Object.keys(o).forEach((function(l) {
                                    var u = o[l];
                                    u && kn(u) && (r = u.body.start - s, n = u.body.end + s, e >= r && e <= n && (t = Math.min(e - r, n - e), a <= t && (i = u.body, a = t)))
                                })), i
                            }, t.isEndListAppended = function(e) {
                                var t = this.endListFragments[e];
                                return void 0 !== t && (t.buffered || kn(t))
                            }, t.getState = function(e) {
                                var t = Ln(e),
                                    r = this.fragments[t];
                                return r ? r.buffered ? kn(r) ? Sn.PARTIAL : Sn.OK : Sn.APPENDING : Sn.NOT_LOADED
                            }, t.isTimeBuffered = function(e, t, r) {
                                for (var n, i, a = 0; a < r.length; a++) {
                                    if (n = r.start(a) - this.bufferPadding, i = r.end(a) + this.bufferPadding, e >= n && t <= i) return !0;
                                    if (t <= n) return !1
                                }
                                return !1
                            }, t.onFragLoaded = function(e, t) {
                                var r = t.frag,
                                    n = t.part;
                                if ("initSegment" !== r.sn && !r.bitrateTest) {
                                    var i = n ? null : t,
                                        a = Ln(r);
                                    this.fragments[a] = {
                                        body: r,
                                        appendedPTS: null,
                                        loaded: i,
                                        buffered: !1,
                                        range: Object.create(null)
                                    }
                                }
                            }, t.onBufferAppended = function(e, t) {
                                var r = this,
                                    n = t.frag,
                                    i = t.part,
                                    a = t.timeRanges;
                                if ("initSegment" !== n.sn) {
                                    var s = n.type;
                                    if (i) {
                                        var o = this.activePartLists[s];
                                        o || (this.activePartLists[s] = o = []), o.push(i)
                                    }
                                    this.timeRanges = a, Object.keys(a).forEach((function(e) {
                                        var t = a[e];
                                        r.detectEvictedFragments(e, t, s, i)
                                    }))
                                }
                            }, t.onFragBuffered = function(e, t) {
                                this.detectPartialFragments(t)
                            }, t.hasFragment = function(e) {
                                var t = Ln(e);
                                return !!this.fragments[t]
                            }, t.hasParts = function(e) {
                                var t;
                                return !(null == (t = this.activePartLists[e]) || !t.length)
                            }, t.removeFragmentsInRange = function(e, t, r, n, i) {
                                var a = this;
                                n && !this.hasGaps || Object.keys(this.fragments).forEach((function(s) {
                                    var o = a.fragments[s];
                                    if (o) {
                                        var l = o.body;
                                        l.type !== r || n && !l.gap || l.start < t && l.end > e && (o.buffered || i) && a.removeFragment(l)
                                    }
                                }))
                            }, t.removeFragment = function(e) {
                                var t = Ln(e);
                                e.stats.loaded = 0, e.clearElementaryStreamInfo();
                                var r = this.activePartLists[e.type];
                                if (r) {
                                    var n = e.sn;
                                    this.activePartLists[e.type] = r.filter((function(e) {
                                        return e.fragment.sn !== n
                                    }))
                                }
                                delete this.fragments[t], e.endList && delete this.endListFragments[e.type]
                            }, t.removeAllFragments = function() {
                                this.fragments = Object.create(null), this.endListFragments = Object.create(null), this.activePartLists = Object.create(null), this.hasGaps = !1
                            }, e
                        }();

                    function kn(e) {
                        var t, r, n;
                        return e.buffered && (e.body.gap || (null == (t = e.range.video) ? void 0 : t.partial) || (null == (r = e.range.audio) ? void 0 : r.partial) || (null == (n = e.range.audiovideo) ? void 0 : n.partial))
                    }

                    function Ln(e) {
                        return e.type + "_" + e.level + "_" + e.sn
                    }
                    var Rn = {
                            length: 0,
                            start: function() {
                                return 0
                            },
                            end: function() {
                                return 0
                            }
                        },
                        In = function() {
                            function e() {}
                            return e.isBuffered = function(t, r) {
                                try {
                                    if (t)
                                        for (var n = e.getBuffered(t), i = 0; i < n.length; i++)
                                            if (r >= n.start(i) && r <= n.end(i)) return !0
                                } catch (e) {}
                                return !1
                            }, e.bufferInfo = function(t, r, n) {
                                try {
                                    if (t) {
                                        var i, a = e.getBuffered(t),
                                            s = [];
                                        for (i = 0; i < a.length; i++) s.push({
                                            start: a.start(i),
                                            end: a.end(i)
                                        });
                                        return this.bufferedInfo(s, r, n)
                                    }
                                } catch (e) {}
                                return {
                                    len: 0,
                                    start: r,
                                    end: r,
                                    nextStart: void 0
                                }
                            }, e.bufferedInfo = function(e, t, r) {
                                t = Math.max(0, t), e.sort((function(e, t) {
                                    var r = e.start - t.start;
                                    return r || t.end - e.end
                                }));
                                var n = [];
                                if (r)
                                    for (var i = 0; i < e.length; i++) {
                                        var a = n.length;
                                        if (a) {
                                            var s = n[a - 1].end;
                                            e[i].start - s < r ? e[i].end > s && (n[a - 1].end = e[i].end) : n.push(e[i])
                                        } else n.push(e[i])
                                    } else n = e;
                                for (var o, l = 0, u = t, c = t, d = 0; d < n.length; d++) {
                                    var h = n[d].start,
                                        f = n[d].end;
                                    if (t + r >= h && t < f) u = h, l = (c = f) - t;
                                    else if (t + r < h) {
                                        o = h;
                                        break
                                    }
                                }
                                return {
                                    len: l,
                                    start: u || 0,
                                    end: c || 0,
                                    nextStart: o
                                }
                            }, e.getBuffered = function(e) {
                                try {
                                    return e.buffered
                                } catch (e) {
                                    return F.log("failed to get media.buffered", e), Rn
                                }
                            }, e
                        }(),
                        wn = function(e, t, r, n, i, a) {
                            void 0 === n && (n = 0), void 0 === i && (i = -1), void 0 === a && (a = !1), this.level = void 0, this.sn = void 0, this.part = void 0, this.id = void 0, this.size = void 0, this.partial = void 0, this.transmuxing = Dn(), this.buffering = {
                                audio: Dn(),
                                video: Dn(),
                                audiovideo: Dn()
                            }, this.level = e, this.sn = t, this.id = r, this.size = n, this.part = i, this.partial = a
                        };

                    function Dn() {
                        return {
                            start: 0,
                            executeStart: 0,
                            executeEnd: 0,
                            end: 0
                        }
                    }

                    function Cn(e, t) {
                        for (var r = 0, n = e.length; r < n; r++) {
                            var i;
                            if ((null == (i = e[r]) ? void 0 : i.cc) === t) return e[r]
                        }
                        return null
                    }

                    function xn(e, t, r) {
                        return !(!t || !(r.endCC > r.startCC || e && e.cc < r.startCC))
                    }

                    function _n(e, t) {
                        var r = e.fragments,
                            n = t.fragments;
                        if (n.length && r.length) {
                            var i = Cn(r, n[0].cc);
                            if (i && (!i || i.startPTS)) return i;
                            F.log("No frag in previous level to align on")
                        } else F.log("No fragments to align")
                    }

                    function On(e, t) {
                        if (e) {
                            var r = e.start + t;
                            e.start = e.startPTS = r, e.endPTS = r + e.duration
                        }
                    }

                    function Pn(e, t) {
                        for (var r = t.fragments, n = 0, i = r.length; n < i; n++) On(r[n], e);
                        t.fragmentHint && On(t.fragmentHint, e), t.alignedSliding = !0
                    }

                    function Mn(e, t, r) {
                        t && (Fn(e, r, t), !r.alignedSliding && t && Nn(r, t), r.alignedSliding || !t || r.skippedSegments || xr(t, r))
                    }

                    function Fn(e, t, r) {
                        if (xn(e, r, t)) {
                            var n = _n(r, t);
                            n && k(n.start) && (F.log("Adjusting PTS using last level due to CC increase within current level " + t.url), Pn(n.start, t))
                        }
                    }

                    function Nn(e, t) {
                        if (e.hasProgramDateTime && t.hasProgramDateTime) {
                            var r = e.fragments,
                                n = t.fragments;
                            if (r.length && n.length) {
                                var i, a, s = Math.min(t.endCC, e.endCC);
                                t.startCC < s && e.startCC < s && (i = Cn(n, s), a = Cn(r, s)), i && a || (a = Cn(r, (i = n[Math.floor(n.length / 2)]).cc) || r[Math.floor(r.length / 2)]);
                                var o = i.programDateTime,
                                    l = a.programDateTime;
                                o && l && Pn((l - o) / 1e3 - (a.start - i.start), e)
                            }
                        }
                    }
                    var Un = Math.pow(2, 17),
                        Bn = function() {
                            function e(e) {
                                this.config = void 0, this.loader = null, this.partLoadTimeout = -1, this.config = e
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.loader && (this.loader.destroy(), this.loader = null)
                            }, t.abort = function() {
                                this.loader && this.loader.abort()
                            }, t.load = function(e, t) {
                                var r = this,
                                    i = e.url;
                                if (!i) return Promise.reject(new Hn({
                                    type: w.NETWORK_ERROR,
                                    details: D.FRAG_LOAD_ERROR,
                                    fatal: !1,
                                    frag: e,
                                    error: new Error("Fragment does not have a " + (i ? "part list" : "url")),
                                    networkDetails: null
                                }));
                                this.abort();
                                var a = this.config,
                                    s = a.fLoader,
                                    o = a.loader;
                                return new Promise((function(l, u) {
                                    if (r.loader && r.loader.destroy(), e.gap) {
                                        if (e.tagList.some((function(e) {
                                                return "GAP" === e[0]
                                            }))) return void u(Vn(e));
                                        e.gap = !1
                                    }
                                    var c = r.loader = e.loader = s ? new s(a) : new o(a),
                                        d = Gn(e),
                                        h = Vr(a.fragLoadPolicy.default),
                                        f = {
                                            loadPolicy: h,
                                            timeout: h.maxLoadTimeMs,
                                            maxRetry: 0,
                                            retryDelay: 0,
                                            maxRetryDelay: 0,
                                            highWaterMark: "initSegment" === e.sn ? 1 / 0 : Un
                                        };
                                    e.stats = c.stats, c.load(d, f, {
                                        onSuccess: function(t, n, i, a) {
                                            r.resetLoader(e, c);
                                            var s = t.data;
                                            i.resetIV && e.decryptdata && (e.decryptdata.iv = new Uint8Array(s.slice(0, 16)), s = s.slice(16)), l({
                                                frag: e,
                                                part: null,
                                                payload: s,
                                                networkDetails: a
                                            })
                                        },
                                        onError: function(t, a, s, o) {
                                            r.resetLoader(e, c), u(new Hn({
                                                type: w.NETWORK_ERROR,
                                                details: D.FRAG_LOAD_ERROR,
                                                fatal: !1,
                                                frag: e,
                                                response: n({
                                                    url: i,
                                                    data: void 0
                                                }, t),
                                                error: new Error("HTTP Error " + t.code + " " + t.text),
                                                networkDetails: s,
                                                stats: o
                                            }))
                                        },
                                        onAbort: function(t, n, i) {
                                            r.resetLoader(e, c), u(new Hn({
                                                type: w.NETWORK_ERROR,
                                                details: D.INTERNAL_ABORTED,
                                                fatal: !1,
                                                frag: e,
                                                error: new Error("Aborted"),
                                                networkDetails: i,
                                                stats: t
                                            }))
                                        },
                                        onTimeout: function(t, n, i) {
                                            r.resetLoader(e, c), u(new Hn({
                                                type: w.NETWORK_ERROR,
                                                details: D.FRAG_LOAD_TIMEOUT,
                                                fatal: !1,
                                                frag: e,
                                                error: new Error("Timeout after " + f.timeout + "ms"),
                                                networkDetails: i,
                                                stats: t
                                            }))
                                        },
                                        onProgress: function(r, n, i, a) {
                                            t && t({
                                                frag: e,
                                                part: null,
                                                payload: i,
                                                networkDetails: a
                                            })
                                        }
                                    })
                                }))
                            }, t.loadPart = function(e, t, r) {
                                var i = this;
                                this.abort();
                                var a = this.config,
                                    s = a.fLoader,
                                    o = a.loader;
                                return new Promise((function(l, u) {
                                    if (i.loader && i.loader.destroy(), e.gap || t.gap) u(Vn(e, t));
                                    else {
                                        var c = i.loader = e.loader = s ? new s(a) : new o(a),
                                            d = Gn(e, t),
                                            h = Vr(a.fragLoadPolicy.default),
                                            f = {
                                                loadPolicy: h,
                                                timeout: h.maxLoadTimeMs,
                                                maxRetry: 0,
                                                retryDelay: 0,
                                                maxRetryDelay: 0,
                                                highWaterMark: Un
                                            };
                                        t.stats = c.stats, c.load(d, f, {
                                            onSuccess: function(n, a, s, o) {
                                                i.resetLoader(e, c), i.updateStatsFromPart(e, t);
                                                var u = {
                                                    frag: e,
                                                    part: t,
                                                    payload: n.data,
                                                    networkDetails: o
                                                };
                                                r(u), l(u)
                                            },
                                            onError: function(r, a, s, o) {
                                                i.resetLoader(e, c), u(new Hn({
                                                    type: w.NETWORK_ERROR,
                                                    details: D.FRAG_LOAD_ERROR,
                                                    fatal: !1,
                                                    frag: e,
                                                    part: t,
                                                    response: n({
                                                        url: d.url,
                                                        data: void 0
                                                    }, r),
                                                    error: new Error("HTTP Error " + r.code + " " + r.text),
                                                    networkDetails: s,
                                                    stats: o
                                                }))
                                            },
                                            onAbort: function(r, n, a) {
                                                e.stats.aborted = t.stats.aborted, i.resetLoader(e, c), u(new Hn({
                                                    type: w.NETWORK_ERROR,
                                                    details: D.INTERNAL_ABORTED,
                                                    fatal: !1,
                                                    frag: e,
                                                    part: t,
                                                    error: new Error("Aborted"),
                                                    networkDetails: a,
                                                    stats: r
                                                }))
                                            },
                                            onTimeout: function(r, n, a) {
                                                i.resetLoader(e, c), u(new Hn({
                                                    type: w.NETWORK_ERROR,
                                                    details: D.FRAG_LOAD_TIMEOUT,
                                                    fatal: !1,
                                                    frag: e,
                                                    part: t,
                                                    error: new Error("Timeout after " + f.timeout + "ms"),
                                                    networkDetails: a,
                                                    stats: r
                                                }))
                                            }
                                        })
                                    }
                                }))
                            }, t.updateStatsFromPart = function(e, t) {
                                var r = e.stats,
                                    n = t.stats,
                                    i = n.total;
                                if (r.loaded += n.loaded, i) {
                                    var a = Math.round(e.duration / t.duration),
                                        s = Math.min(Math.round(r.loaded / i), a),
                                        o = (a - s) * Math.round(r.loaded / s);
                                    r.total = r.loaded + o
                                } else r.total = Math.max(r.loaded, r.total);
                                var l = r.loading,
                                    u = n.loading;
                                l.start ? l.first += u.first - u.start : (l.start = u.start, l.first = u.first), l.end = u.end
                            }, t.resetLoader = function(e, t) {
                                e.loader = null, this.loader === t && (self.clearTimeout(this.partLoadTimeout), this.loader = null), t.destroy()
                            }, e
                        }();

                    function Gn(e, t) {
                        void 0 === t && (t = null);
                        var r = t || e,
                            n = {
                                frag: e,
                                part: t,
                                responseType: "arraybuffer",
                                url: r.url,
                                headers: {},
                                rangeStart: 0,
                                rangeEnd: 0
                            },
                            i = r.byteRangeStartOffset,
                            a = r.byteRangeEndOffset;
                        if (k(i) && k(a)) {
                            var s, o = i,
                                l = a;
                            if ("initSegment" === e.sn && "AES-128" === (null == (s = e.decryptdata) ? void 0 : s.method)) {
                                var u = a - i;
                                u % 16 && (l = a + (16 - u % 16)), 0 !== i && (n.resetIV = !0, o = i - 16)
                            }
                            n.rangeStart = o, n.rangeEnd = l
                        }
                        return n
                    }

                    function Vn(e, t) {
                        var r = new Error("GAP " + (e.gap ? "tag" : "attribute") + " found"),
                            n = {
                                type: w.MEDIA_ERROR,
                                details: D.FRAG_GAP,
                                fatal: !1,
                                frag: e,
                                error: r,
                                networkDetails: null
                            };
                        return t && (n.part = t), (t || e).stats.aborted = !0, new Hn(n)
                    }
                    var Hn = function(e) {
                            function t(t) {
                                var r;
                                return (r = e.call(this, t.error.message) || this).data = void 0, r.data = t, r
                            }
                            return c(t, e), t
                        }(m(Error)),
                        Kn = function() {
                            function e(e, t) {
                                this.subtle = void 0, this.aesIV = void 0, this.subtle = e, this.aesIV = t
                            }
                            return e.prototype.decrypt = function(e, t) {
                                return this.subtle.decrypt({
                                    name: "AES-CBC",
                                    iv: this.aesIV
                                }, t, e)
                            }, e
                        }(),
                        jn = function() {
                            function e(e, t) {
                                this.subtle = void 0, this.key = void 0, this.subtle = e, this.key = t
                            }
                            return e.prototype.expandKey = function() {
                                return this.subtle.importKey("raw", this.key, {
                                    name: "AES-CBC"
                                }, !1, ["encrypt", "decrypt"])
                            }, e
                        }();

                    function Yn(e) {
                        var t = e.byteLength,
                            r = t && new DataView(e.buffer).getUint8(t - 1);
                        return r ? fe(e, 0, t - r) : e
                    }
                    var Wn = function() {
                            function e() {
                                this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.sBox = new Uint32Array(256), this.invSBox = new Uint32Array(256), this.key = new Uint32Array(0), this.ksRows = 0, this.keySize = 0, this.keySchedule = void 0, this.invKeySchedule = void 0, this.initTable()
                            }
                            var t = e.prototype;
                            return t.uint8ArrayToUint32Array_ = function(e) {
                                for (var t = new DataView(e), r = new Uint32Array(4), n = 0; n < 4; n++) r[n] = t.getUint32(4 * n);
                                return r
                            }, t.initTable = function() {
                                var e = this.sBox,
                                    t = this.invSBox,
                                    r = this.subMix,
                                    n = r[0],
                                    i = r[1],
                                    a = r[2],
                                    s = r[3],
                                    o = this.invSubMix,
                                    l = o[0],
                                    u = o[1],
                                    c = o[2],
                                    d = o[3],
                                    h = new Uint32Array(256),
                                    f = 0,
                                    g = 0,
                                    p = 0;
                                for (p = 0; p < 256; p++) h[p] = p < 128 ? p << 1 : p << 1 ^ 283;
                                for (p = 0; p < 256; p++) {
                                    var m = g ^ g << 1 ^ g << 2 ^ g << 3 ^ g << 4;
                                    m = m >>> 8 ^ 255 & m ^ 99, e[f] = m, t[m] = f;
                                    var v = h[f],
                                        y = h[v],
                                        T = h[y],
                                        b = 257 * h[m] ^ 16843008 * m;
                                    n[f] = b << 24 | b >>> 8, i[f] = b << 16 | b >>> 16, a[f] = b << 8 | b >>> 24, s[f] = b, b = 16843009 * T ^ 65537 * y ^ 257 * v ^ 16843008 * f, l[m] = b << 24 | b >>> 8, u[m] = b << 16 | b >>> 16, c[m] = b << 8 | b >>> 24, d[m] = b, f ? (f = v ^ h[h[h[T ^ v]]], g ^= h[h[g]]) : f = g = 1
                                }
                            }, t.expandKey = function(e) {
                                for (var t = this.uint8ArrayToUint32Array_(e), r = !0, n = 0; n < t.length && r;) r = t[n] === this.key[n], n++;
                                if (!r) {
                                    this.key = t;
                                    var i = this.keySize = t.length;
                                    if (4 !== i && 6 !== i && 8 !== i) throw new Error("Invalid aes key size=" + i);
                                    var a, s, o, l, u = this.ksRows = 4 * (i + 6 + 1),
                                        c = this.keySchedule = new Uint32Array(u),
                                        d = this.invKeySchedule = new Uint32Array(u),
                                        h = this.sBox,
                                        f = this.rcon,
                                        g = this.invSubMix,
                                        p = g[0],
                                        m = g[1],
                                        v = g[2],
                                        y = g[3];
                                    for (a = 0; a < u; a++) a < i ? o = c[a] = t[a] : (l = o, a % i == 0 ? (l = h[(l = l << 8 | l >>> 24) >>> 24] << 24 | h[l >>> 16 & 255] << 16 | h[l >>> 8 & 255] << 8 | h[255 & l], l ^= f[a / i | 0] << 24) : i > 6 && a % i == 4 && (l = h[l >>> 24] << 24 | h[l >>> 16 & 255] << 16 | h[l >>> 8 & 255] << 8 | h[255 & l]), c[a] = o = (c[a - i] ^ l) >>> 0);
                                    for (s = 0; s < u; s++) a = u - s, l = 3 & s ? c[a] : c[a - 4], d[s] = s < 4 || a <= 4 ? l : p[h[l >>> 24]] ^ m[h[l >>> 16 & 255]] ^ v[h[l >>> 8 & 255]] ^ y[h[255 & l]], d[s] = d[s] >>> 0
                                }
                            }, t.networkToHostOrderSwap = function(e) {
                                return e << 24 | (65280 & e) << 8 | (16711680 & e) >> 8 | e >>> 24
                            }, t.decrypt = function(e, t, r) {
                                for (var n, i, a, s, o, l, u, c, d, h, f, g, p, m, v = this.keySize + 6, y = this.invKeySchedule, T = this.invSBox, b = this.invSubMix, E = b[0], S = b[1], A = b[2], k = b[3], L = this.uint8ArrayToUint32Array_(r), R = L[0], I = L[1], w = L[2], D = L[3], C = new Int32Array(e), x = new Int32Array(C.length), _ = this.networkToHostOrderSwap; t < C.length;) {
                                    for (d = _(C[t]), h = _(C[t + 1]), f = _(C[t + 2]), g = _(C[t + 3]), o = d ^ y[0], l = g ^ y[1], u = f ^ y[2], c = h ^ y[3], p = 4, m = 1; m < v; m++) n = E[o >>> 24] ^ S[l >> 16 & 255] ^ A[u >> 8 & 255] ^ k[255 & c] ^ y[p], i = E[l >>> 24] ^ S[u >> 16 & 255] ^ A[c >> 8 & 255] ^ k[255 & o] ^ y[p + 1], a = E[u >>> 24] ^ S[c >> 16 & 255] ^ A[o >> 8 & 255] ^ k[255 & l] ^ y[p + 2], s = E[c >>> 24] ^ S[o >> 16 & 255] ^ A[l >> 8 & 255] ^ k[255 & u] ^ y[p + 3], o = n, l = i, u = a, c = s, p += 4;
                                    n = T[o >>> 24] << 24 ^ T[l >> 16 & 255] << 16 ^ T[u >> 8 & 255] << 8 ^ T[255 & c] ^ y[p], i = T[l >>> 24] << 24 ^ T[u >> 16 & 255] << 16 ^ T[c >> 8 & 255] << 8 ^ T[255 & o] ^ y[p + 1], a = T[u >>> 24] << 24 ^ T[c >> 16 & 255] << 16 ^ T[o >> 8 & 255] << 8 ^ T[255 & l] ^ y[p + 2], s = T[c >>> 24] << 24 ^ T[o >> 16 & 255] << 16 ^ T[l >> 8 & 255] << 8 ^ T[255 & u] ^ y[p + 3], x[t] = _(n ^ R), x[t + 1] = _(s ^ I), x[t + 2] = _(a ^ w), x[t + 3] = _(i ^ D), R = d, I = h, w = f, D = g, t += 4
                                }
                                return x.buffer
                            }, e
                        }(),
                        qn = 16,
                        zn = function() {
                            function e(e, t) {
                                var r = (void 0 === t ? {} : t).removePKCS7Padding,
                                    n = void 0 === r || r;
                                if (this.logEnabled = !0, this.removePKCS7Padding = void 0, this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null, this.useSoftware = void 0, this.useSoftware = e.enableSoftwareAES, this.removePKCS7Padding = n, n) try {
                                    var i = self.crypto;
                                    i && (this.subtle = i.subtle || i.webkitSubtle)
                                } catch (e) {}
                                null === this.subtle && (this.useSoftware = !0)
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null
                            }, t.isSync = function() {
                                return this.useSoftware
                            }, t.flush = function() {
                                var e = this.currentResult,
                                    t = this.remainderData;
                                if (!e || t) return this.reset(), null;
                                var r = new Uint8Array(e);
                                return this.reset(), this.removePKCS7Padding ? Yn(r) : r
                            }, t.reset = function() {
                                this.currentResult = null, this.currentIV = null, this.remainderData = null, this.softwareDecrypter && (this.softwareDecrypter = null)
                            }, t.decrypt = function(e, t, r) {
                                var n = this;
                                return this.useSoftware ? new Promise((function(i, a) {
                                    n.softwareDecrypt(new Uint8Array(e), t, r);
                                    var s = n.flush();
                                    s ? i(s.buffer) : a(new Error("[softwareDecrypt] Failed to decrypt data"))
                                })) : this.webCryptoDecrypt(new Uint8Array(e), t, r)
                            }, t.softwareDecrypt = function(e, t, r) {
                                var n = this.currentIV,
                                    i = this.currentResult,
                                    a = this.remainderData;
                                this.logOnce("JS AES decrypt"), a && (e = rt(a, e), this.remainderData = null);
                                var s = this.getValidChunk(e);
                                if (!s.length) return null;
                                n && (r = n);
                                var o = this.softwareDecrypter;
                                o || (o = this.softwareDecrypter = new Wn), o.expandKey(t);
                                var l = i;
                                return this.currentResult = o.decrypt(s.buffer, 0, r), this.currentIV = fe(s, -16).buffer, l || null
                            }, t.webCryptoDecrypt = function(e, t, r) {
                                var n = this,
                                    i = this.subtle;
                                return this.key === t && this.fastAesKey || (this.key = t, this.fastAesKey = new jn(i, t)), this.fastAesKey.expandKey().then((function(t) {
                                    return i ? (n.logOnce("WebCrypto AES decrypt"), new Kn(i, new Uint8Array(r)).decrypt(e.buffer, t)) : Promise.reject(new Error("web crypto not initialized"))
                                })).catch((function(i) {
                                    return F.warn("[decrypter]: WebCrypto Error, disable WebCrypto API, " + i.name + ": " + i.message), n.onWebCryptoError(e, t, r)
                                }))
                            }, t.onWebCryptoError = function(e, t, r) {
                                this.useSoftware = !0, this.logEnabled = !0, this.softwareDecrypt(e, t, r);
                                var n = this.flush();
                                if (n) return n.buffer;
                                throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data")
                            }, t.getValidChunk = function(e) {
                                var t = e,
                                    r = e.length - e.length % qn;
                                return r !== e.length && (t = fe(e, 0, r), this.remainderData = fe(e, r)), t
                            }, t.logOnce = function(e) {
                                this.logEnabled && (F.log("[decrypter]: " + e), this.logEnabled = !1)
                            }, e
                        }(),
                        Xn = {
                            toString: function(e) {
                                for (var t = "", r = e.length, n = 0; n < r; n++) t += "[" + e.start(n).toFixed(3) + "-" + e.end(n).toFixed(3) + "]";
                                return t
                            }
                        },
                        $n = {
                            STOPPED: "STOPPED",
                            IDLE: "IDLE",
                            KEY_LOADING: "KEY_LOADING",
                            FRAG_LOADING: "FRAG_LOADING",
                            FRAG_LOADING_WAITING_RETRY: "FRAG_LOADING_WAITING_RETRY",
                            WAITING_TRACK: "WAITING_TRACK",
                            PARSING: "PARSING",
                            PARSED: "PARSED",
                            ENDED: "ENDED",
                            ERROR: "ERROR",
                            WAITING_INIT_PTS: "WAITING_INIT_PTS",
                            WAITING_LEVEL: "WAITING_LEVEL"
                        },
                        Jn = function(e) {
                            function t(t, r, n, i, a) {
                                var s;
                                return (s = e.call(this) || this).hls = void 0, s.fragPrevious = null, s.fragCurrent = null, s.fragmentTracker = void 0, s.transmuxer = null, s._state = $n.STOPPED, s.playlistType = void 0, s.media = null, s.mediaBuffer = null, s.config = void 0, s.bitrateTest = !1, s.lastCurrentTime = 0, s.nextLoadPosition = 0, s.startPosition = 0, s.startTimeOffset = null, s.loadedmetadata = !1, s.retryDate = 0, s.levels = null, s.fragmentLoader = void 0, s.keyLoader = void 0, s.levelLastLoaded = null, s.startFragRequested = !1, s.decrypter = void 0, s.initPTS = [], s.onvseeking = null, s.onvended = null, s.logPrefix = "", s.log = void 0, s.warn = void 0, s.playlistType = a, s.logPrefix = i, s.log = F.log.bind(F, i + ":"), s.warn = F.warn.bind(F, i + ":"), s.hls = t, s.fragmentLoader = new Bn(t.config), s.keyLoader = n, s.fragmentTracker = r, s.config = t.config, s.decrypter = new zn(t.config), t.on(I.MANIFEST_LOADED, s.onManifestLoaded, v(s)), s
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.doTick = function() {
                                this.onTickEnd()
                            }, r.onTickEnd = function() {}, r.startLoad = function(e) {}, r.stopLoad = function() {
                                this.fragmentLoader.abort(), this.keyLoader.abort(this.playlistType);
                                var e = this.fragCurrent;
                                null != e && e.loader && (e.abortRequests(), this.fragmentTracker.removeFragment(e)), this.resetTransmuxer(), this.fragCurrent = null, this.fragPrevious = null, this.clearInterval(), this.clearNextTick(), this.state = $n.STOPPED
                            }, r._streamEnded = function(e, t) {
                                if (t.live || e.nextStart || !e.end || !this.media) return !1;
                                var r = t.partList;
                                if (null != r && r.length) {
                                    var n = r[r.length - 1];
                                    return In.isBuffered(this.media, n.start + n.duration / 2)
                                }
                                var i = t.fragments[t.fragments.length - 1].type;
                                return this.fragmentTracker.isEndListAppended(i)
                            }, r.getLevelDetails = function() {
                                var e;
                                if (this.levels && null !== this.levelLastLoaded) return null == (e = this.levelLastLoaded) ? void 0 : e.details
                            }, r.onMediaAttached = function(e, t) {
                                var r = this.media = this.mediaBuffer = t.media;
                                this.onvseeking = this.onMediaSeeking.bind(this), this.onvended = this.onMediaEnded.bind(this), r.addEventListener("seeking", this.onvseeking), r.addEventListener("ended", this.onvended);
                                var n = this.config;
                                this.levels && n.autoStartLoad && this.state === $n.STOPPED && this.startLoad(n.startPosition)
                            }, r.onMediaDetaching = function() {
                                var e = this.media;
                                null != e && e.ended && (this.log("MSE detaching and video ended, reset startPosition"), this.startPosition = this.lastCurrentTime = 0), e && this.onvseeking && this.onvended && (e.removeEventListener("seeking", this.onvseeking), e.removeEventListener("ended", this.onvended), this.onvseeking = this.onvended = null), this.keyLoader && this.keyLoader.detach(), this.media = this.mediaBuffer = null, this.loadedmetadata = !1, this.fragmentTracker.removeAllFragments(), this.stopLoad()
                            }, r.onMediaSeeking = function() {
                                var e = this.config,
                                    t = this.fragCurrent,
                                    r = this.media,
                                    n = this.mediaBuffer,
                                    i = this.state,
                                    a = r ? r.currentTime : 0,
                                    s = In.bufferInfo(n || r, a, e.maxBufferHole);
                                if (this.log("media seeking to " + (k(a) ? a.toFixed(3) : a) + ", state: " + i), this.state === $n.ENDED) this.resetLoadingState();
                                else if (t) {
                                    var o = e.maxFragLookUpTolerance,
                                        l = t.start - o,
                                        u = t.start + t.duration + o;
                                    if (!s.len || u < s.start || l > s.end) {
                                        var c = a > u;
                                        (a < l || c) && (c && t.loader && (this.log("seeking outside of buffer while fragment load in progress, cancel fragment load"), t.abortRequests(), this.resetLoadingState()), this.fragPrevious = null)
                                    }
                                }
                                r && (this.fragmentTracker.removeFragmentsInRange(a, 1 / 0, this.playlistType, !0), this.lastCurrentTime = a), this.loadedmetadata || s.len || (this.nextLoadPosition = this.startPosition = a), this.tickImmediate()
                            }, r.onMediaEnded = function() {
                                this.startPosition = this.lastCurrentTime = 0
                            }, r.onManifestLoaded = function(e, t) {
                                this.startTimeOffset = t.startTimeOffset, this.initPTS = []
                            }, r.onHandlerDestroying = function() {
                                this.hls.off(I.MANIFEST_LOADED, this.onManifestLoaded, this), this.stopLoad(), e.prototype.onHandlerDestroying.call(this), this.hls = null
                            }, r.onHandlerDestroyed = function() {
                                this.state = $n.STOPPED, this.fragmentLoader && this.fragmentLoader.destroy(), this.keyLoader && this.keyLoader.destroy(), this.decrypter && this.decrypter.destroy(), this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null, e.prototype.onHandlerDestroyed.call(this)
                            }, r.loadFragment = function(e, t, r) {
                                this._loadFragForPlayback(e, t, r)
                            }, r._loadFragForPlayback = function(e, t, r) {
                                var n = this,
                                    i = function(t) {
                                        if (n.fragContextChanged(e)) return n.warn("Fragment " + e.sn + (t.part ? " p: " + t.part.index : "") + " of level " + e.level + " was dropped during download."), void n.fragmentTracker.removeFragment(e);
                                        e.stats.chunkCount++, n._handleFragmentLoadProgress(t)
                                    };
                                this._doFragLoad(e, t, r, i).then((function(t) {
                                    if (t) {
                                        var r = n.state;
                                        n.fragContextChanged(e) ? (r === $n.FRAG_LOADING || !n.fragCurrent && r === $n.PARSING) && (n.fragmentTracker.removeFragment(e), n.state = $n.IDLE) : ("payload" in t && (n.log("Loaded fragment " + e.sn + " of level " + e.level), n.hls.trigger(I.FRAG_LOADED, t)), n._handleFragmentLoadComplete(t))
                                    }
                                })).catch((function(t) {
                                    n.state !== $n.STOPPED && n.state !== $n.ERROR && (n.warn(t), n.resetFragmentLoading(e))
                                }))
                            }, r.clearTrackerIfNeeded = function(e) {
                                var t, r = this.fragmentTracker;
                                if (r.getState(e) === Sn.APPENDING) {
                                    var n = e.type,
                                        i = this.getFwdBufferInfo(this.mediaBuffer, n),
                                        a = Math.max(e.duration, i ? i.len : this.config.maxBufferLength);
                                    this.reduceMaxBufferLength(a) && r.removeFragment(e)
                                } else 0 === (null == (t = this.mediaBuffer) ? void 0 : t.buffered.length) ? r.removeAllFragments() : r.hasParts(e.type) && (r.detectPartialFragments({
                                    frag: e,
                                    part: null,
                                    stats: e.stats,
                                    id: e.type
                                }), r.getState(e) === Sn.PARTIAL && r.removeFragment(e))
                            }, r.checkLiveUpdate = function(e) {
                                if (e.updated && !e.live) {
                                    var t = e.fragments[e.fragments.length - 1];
                                    this.fragmentTracker.detectPartialFragments({
                                        frag: t,
                                        part: null,
                                        stats: t.stats,
                                        id: t.type
                                    })
                                }
                                e.fragments[0] || (e.deltaUpdateFailed = !0)
                            }, r.flushMainBuffer = function(e, t, r) {
                                if (void 0 === r && (r = null), e - t) {
                                    var n = {
                                        startOffset: e,
                                        endOffset: t,
                                        type: r
                                    };
                                    this.hls.trigger(I.BUFFER_FLUSHING, n)
                                }
                            }, r._loadInitSegment = function(e, t) {
                                var r = this;
                                this._doFragLoad(e, t).then((function(t) {
                                    if (!t || r.fragContextChanged(e) || !r.levels) throw new Error("init load aborted");
                                    return t
                                })).then((function(t) {
                                    var n = r.hls,
                                        i = t.payload,
                                        a = e.decryptdata;
                                    if (i && i.byteLength > 0 && null != a && a.key && a.iv && "AES-128" === a.method) {
                                        var s = self.performance.now();
                                        return r.decrypter.decrypt(new Uint8Array(i), a.key.buffer, a.iv.buffer).catch((function(t) {
                                            throw n.trigger(I.ERROR, {
                                                type: w.MEDIA_ERROR,
                                                details: D.FRAG_DECRYPT_ERROR,
                                                fatal: !1,
                                                error: t,
                                                reason: t.message,
                                                frag: e
                                            }), t
                                        })).then((function(i) {
                                            var a = self.performance.now();
                                            return n.trigger(I.FRAG_DECRYPTED, {
                                                frag: e,
                                                payload: i,
                                                stats: {
                                                    tstart: s,
                                                    tdecrypt: a
                                                }
                                            }), t.payload = i, r.completeInitSegmentLoad(t)
                                        }))
                                    }
                                    return r.completeInitSegmentLoad(t)
                                })).catch((function(t) {
                                    r.state !== $n.STOPPED && r.state !== $n.ERROR && (r.warn(t), r.resetFragmentLoading(e))
                                }))
                            }, r.completeInitSegmentLoad = function(e) {
                                if (!this.levels) throw new Error("init load aborted, missing levels");
                                var t = e.frag.stats;
                                this.state = $n.IDLE, e.frag.data = new Uint8Array(e.payload), t.parsing.start = t.buffering.start = self.performance.now(), t.parsing.end = t.buffering.end = self.performance.now(), this.tick()
                            }, r.fragContextChanged = function(e) {
                                var t = this.fragCurrent;
                                return !e || !t || e.sn !== t.sn || e.level !== t.level
                            }, r.fragBufferedComplete = function(e, t) {
                                var r, n, i, a, s = this.mediaBuffer ? this.mediaBuffer : this.media;
                                if (this.log("Buffered " + e.type + " sn: " + e.sn + (t ? " part: " + t.index : "") + " of " + (this.playlistType === $t.MAIN ? "level" : "track") + " " + e.level + " (frag:[" + (null != (r = e.startPTS) ? r : NaN).toFixed(3) + "-" + (null != (n = e.endPTS) ? n : NaN).toFixed(3) + "] > buffer:" + (s ? Xn.toString(In.getBuffered(s)) : "(detached)") + ")"), "initSegment" !== e.sn) {
                                    var o;
                                    if (e.type !== $t.SUBTITLE) {
                                        var l = e.elementaryStreams;
                                        if (!Object.keys(l).some((function(e) {
                                                return !!l[e]
                                            }))) return void(this.state = $n.IDLE)
                                    }
                                    var u = null == (o = this.levels) ? void 0 : o[e.level];
                                    null != u && u.fragmentError && (this.log("Resetting level fragment error count of " + u.fragmentError + " on frag buffered"), u.fragmentError = 0)
                                }
                                this.state = $n.IDLE, s && (!this.loadedmetadata && e.type == $t.MAIN && s.buffered.length && (null == (i = this.fragCurrent) ? void 0 : i.sn) === (null == (a = this.fragPrevious) ? void 0 : a.sn) && (this.loadedmetadata = !0, this.seekToStartPos()), this.tick())
                            }, r.seekToStartPos = function() {}, r._handleFragmentLoadComplete = function(e) {
                                var t = this.transmuxer;
                                if (t) {
                                    var r = e.frag,
                                        n = e.part,
                                        i = e.partsLoaded,
                                        a = !i || 0 === i.length || i.some((function(e) {
                                            return !e
                                        })),
                                        s = new wn(r.level, r.sn, r.stats.chunkCount + 1, 0, n ? n.index : -1, !a);
                                    t.flush(s)
                                }
                            }, r._handleFragmentLoadProgress = function(e) {}, r._doFragLoad = function(e, t, r, n) {
                                var i, a = this;
                                void 0 === r && (r = null);
                                var s = null == t ? void 0 : t.details;
                                if (!this.levels || !s) throw new Error("frag load aborted, missing level" + (s ? "" : " detail") + "s");
                                var o = null;
                                if (!e.encrypted || null != (i = e.decryptdata) && i.key ? !e.encrypted && s.encryptedFragments.length && this.keyLoader.loadClear(e, s.encryptedFragments) : (this.log("Loading key for " + e.sn + " of [" + s.startSN + "-" + s.endSN + "], " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + e.level), this.state = $n.KEY_LOADING, this.fragCurrent = e, o = this.keyLoader.load(e).then((function(e) {
                                        if (!a.fragContextChanged(e.frag)) return a.hls.trigger(I.KEY_LOADED, e), a.state === $n.KEY_LOADING && (a.state = $n.IDLE), e
                                    })), this.hls.trigger(I.KEY_LOADING, {
                                        frag: e
                                    }), null === this.fragCurrent && (o = Promise.reject(new Error("frag load aborted, context changed in KEY_LOADING")))), r = Math.max(e.start, r || 0), this.config.lowLatencyMode && "initSegment" !== e.sn) {
                                    var l = s.partList;
                                    if (l && n) {
                                        r > e.end && s.fragmentHint && (e = s.fragmentHint);
                                        var u = this.getNextPart(l, e, r);
                                        if (u > -1) {
                                            var c, d = l[u];
                                            return this.log("Loading part sn: " + e.sn + " p: " + d.index + " cc: " + e.cc + " of playlist [" + s.startSN + "-" + s.endSN + "] parts [0-" + u + "-" + (l.length - 1) + "] " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + e.level + ", target: " + parseFloat(r.toFixed(3))), this.nextLoadPosition = d.start + d.duration, this.state = $n.FRAG_LOADING, c = o ? o.then((function(r) {
                                                return !r || a.fragContextChanged(r.frag) ? null : a.doFragPartsLoad(e, d, t, n)
                                            })).catch((function(e) {
                                                return a.handleFragLoadError(e)
                                            })) : this.doFragPartsLoad(e, d, t, n).catch((function(e) {
                                                return a.handleFragLoadError(e)
                                            })), this.hls.trigger(I.FRAG_LOADING, {
                                                frag: e,
                                                part: d,
                                                targetBufferTime: r
                                            }), null === this.fragCurrent ? Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING parts")) : c
                                        }
                                        if (!e.url || this.loadedEndOfParts(l, r)) return Promise.resolve(null)
                                    }
                                }
                                this.log("Loading fragment " + e.sn + " cc: " + e.cc + " " + (s ? "of [" + s.startSN + "-" + s.endSN + "] " : "") + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + e.level + ", target: " + parseFloat(r.toFixed(3))), k(e.sn) && !this.bitrateTest && (this.nextLoadPosition = e.start + e.duration), this.state = $n.FRAG_LOADING;
                                var h, f = this.config.progressive;
                                return h = f && o ? o.then((function(t) {
                                    return !t || a.fragContextChanged(null == t ? void 0 : t.frag) ? null : a.fragmentLoader.load(e, n)
                                })).catch((function(e) {
                                    return a.handleFragLoadError(e)
                                })) : Promise.all([this.fragmentLoader.load(e, f ? n : void 0), o]).then((function(e) {
                                    var t = e[0];
                                    return !f && t && n && n(t), t
                                })).catch((function(e) {
                                    return a.handleFragLoadError(e)
                                })), this.hls.trigger(I.FRAG_LOADING, {
                                    frag: e,
                                    targetBufferTime: r
                                }), null === this.fragCurrent ? Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING")) : h
                            }, r.doFragPartsLoad = function(e, t, r, n) {
                                var i = this;
                                return new Promise((function(a, s) {
                                    var o, l = [],
                                        u = null == (o = r.details) ? void 0 : o.partList;
                                    ! function t(o) {
                                        i.fragmentLoader.loadPart(e, o, n).then((function(n) {
                                            l[o.index] = n;
                                            var s = n.part;
                                            i.hls.trigger(I.FRAG_LOADED, n);
                                            var c = Mr(r, e.sn, o.index + 1) || Fr(u, e.sn, o.index + 1);
                                            if (!c) return a({
                                                frag: e,
                                                part: s,
                                                partsLoaded: l
                                            });
                                            t(c)
                                        })).catch(s)
                                    }(t)
                                }))
                            }, r.handleFragLoadError = function(e) {
                                if ("data" in e) {
                                    var t = e.data;
                                    e.data && t.details === D.INTERNAL_ABORTED ? this.handleFragLoadAborted(t.frag, t.part) : this.hls.trigger(I.ERROR, t)
                                } else this.hls.trigger(I.ERROR, {
                                    type: w.OTHER_ERROR,
                                    details: D.INTERNAL_EXCEPTION,
                                    err: e,
                                    error: e,
                                    fatal: !0
                                });
                                return null
                            }, r._handleTransmuxerFlush = function(e) {
                                var t = this.getCurrentContext(e);
                                if (t && this.state === $n.PARSING) {
                                    var r = t.frag,
                                        n = t.part,
                                        i = t.level,
                                        a = self.performance.now();
                                    r.stats.parsing.end = a, n && (n.stats.parsing.end = a), this.updateLevelTiming(r, n, i, e.partial)
                                } else this.fragCurrent || this.state === $n.STOPPED || this.state === $n.ERROR || (this.state = $n.IDLE)
                            }, r.getCurrentContext = function(e) {
                                var t = this.levels,
                                    r = this.fragCurrent,
                                    n = e.level,
                                    i = e.sn,
                                    a = e.part;
                                if (null == t || !t[n]) return this.warn("Levels object was unset while buffering fragment " + i + " of level " + n + ". The current chunk will not be buffered."), null;
                                var s = t[n],
                                    o = a > -1 ? Mr(s, i, a) : null,
                                    l = o ? o.fragment : Pr(s, i, r);
                                return l ? (r && r !== l && (l.stats = r.stats), {
                                    frag: l,
                                    part: o,
                                    level: s
                                }) : null
                            }, r.bufferFragmentData = function(e, t, r, n, i) {
                                var a;
                                if (e && this.state === $n.PARSING) {
                                    var s = e.data1,
                                        o = e.data2,
                                        l = s;
                                    if (s && o && (l = rt(s, o)), null != (a = l) && a.length) {
                                        var u = {
                                            type: e.type,
                                            frag: t,
                                            part: r,
                                            chunkMeta: n,
                                            parent: t.type,
                                            data: l
                                        };
                                        if (this.hls.trigger(I.BUFFER_APPENDING, u), e.dropped && e.independent && !r) {
                                            if (i) return;
                                            this.flushBufferGap(t)
                                        }
                                    }
                                }
                            }, r.flushBufferGap = function(e) {
                                var t = this.media;
                                if (t)
                                    if (In.isBuffered(t, t.currentTime)) {
                                        var r = t.currentTime,
                                            n = In.bufferInfo(t, r, 0),
                                            i = e.duration,
                                            a = Math.min(2 * this.config.maxFragLookUpTolerance, .25 * i),
                                            s = Math.max(Math.min(e.start - a, n.end - a), r + a);
                                        e.start - s > a && this.flushMainBuffer(s, e.start)
                                    } else this.flushMainBuffer(0, e.start)
                            }, r.getFwdBufferInfo = function(e, t) {
                                var r = this.getLoadPosition();
                                return k(r) ? this.getFwdBufferInfoAtPos(e, r, t) : null
                            }, r.getFwdBufferInfoAtPos = function(e, t, r) {
                                var n = this.config.maxBufferHole,
                                    i = In.bufferInfo(e, t, n);
                                if (0 === i.len && void 0 !== i.nextStart) {
                                    var a = this.fragmentTracker.getBufferedFrag(t, r);
                                    if (a && i.nextStart < a.end) return In.bufferInfo(e, t, Math.max(i.nextStart, n))
                                }
                                return i
                            }, r.getMaxBufferLength = function(e) {
                                var t, r = this.config;
                                return t = e ? Math.max(8 * r.maxBufferSize / e, r.maxBufferLength) : r.maxBufferLength, Math.min(t, r.maxMaxBufferLength)
                            }, r.reduceMaxBufferLength = function(e) {
                                var t = this.config,
                                    r = e || t.maxBufferLength;
                                return t.maxMaxBufferLength >= r && (t.maxMaxBufferLength /= 2, this.warn("Reduce max buffer length to " + t.maxMaxBufferLength + "s"), !0)
                            }, r.getAppendedFrag = function(e, t) {
                                var r = this.fragmentTracker.getAppendedFrag(e, $t.MAIN);
                                return r && "fragment" in r ? r.fragment : r
                            }, r.getNextFragment = function(e, t) {
                                var r = t.fragments,
                                    n = r.length;
                                if (!n) return null;
                                var i, a = this.config,
                                    s = r[0].start;
                                if (t.live) {
                                    var o = a.initialLiveManifestSize;
                                    if (n < o) return this.warn("Not enough fragments to start playback (have: " + n + ", need: " + o + ")"), null;
                                    (!t.PTSKnown && !this.startFragRequested && -1 === this.startPosition || e < s) && (i = this.getInitialLiveFragment(t, r), this.startPosition = this.nextLoadPosition = i ? this.hls.liveSyncPosition || i.start : e)
                                } else e <= s && (i = r[0]);
                                if (!i) {
                                    var l = a.lowLatencyMode ? t.partEnd : t.fragmentEnd;
                                    i = this.getFragmentAtPosition(e, l, t)
                                }
                                return this.mapToInitFragWhenRequired(i)
                            }, r.isLoopLoading = function(e, t) {
                                var r = this.fragmentTracker.getState(e);
                                return (r === Sn.OK || r === Sn.PARTIAL && !!e.gap) && this.nextLoadPosition > t
                            }, r.getNextFragmentLoopLoading = function(e, t, r, n, i) {
                                var a = e.gap,
                                    s = this.getNextFragment(this.nextLoadPosition, t);
                                if (null === s) return s;
                                if (e = s, a && e && !e.gap && r.nextStart) {
                                    var o = this.getFwdBufferInfoAtPos(this.mediaBuffer ? this.mediaBuffer : this.media, r.nextStart, n);
                                    if (null !== o && r.len + o.len >= i) return this.log('buffer full after gaps in "' + n + '" playlist starting at sn: ' + e.sn), null
                                }
                                return e
                            }, r.mapToInitFragWhenRequired = function(e) {
                                return null == e || !e.initSegment || null != e && e.initSegment.data || this.bitrateTest ? e : e.initSegment
                            }, r.getNextPart = function(e, t, r) {
                                for (var n = -1, i = !1, a = !0, s = 0, o = e.length; s < o; s++) {
                                    var l = e[s];
                                    if (a = a && !l.independent, n > -1 && r < l.start) break;
                                    var u = l.loaded;
                                    u ? n = -1 : (i || l.independent || a) && l.fragment === t && (n = s), i = u
                                }
                                return n
                            }, r.loadedEndOfParts = function(e, t) {
                                var r = e[e.length - 1];
                                return r && t > r.start && r.loaded
                            }, r.getInitialLiveFragment = function(e, t) {
                                var r = this.fragPrevious,
                                    n = null;
                                if (r) {
                                    if (e.hasProgramDateTime && (this.log("Live playlist, switching playlist, load frag with same PDT: " + r.programDateTime), n = Yr(t, r.endProgramDateTime, this.config.maxFragLookUpTolerance)), !n) {
                                        var i = r.sn + 1;
                                        if (i >= e.startSN && i <= e.endSN) {
                                            var a = t[i - e.startSN];
                                            r.cc === a.cc && (n = a, this.log("Live playlist, switching playlist, load frag with next SN: " + n.sn))
                                        }
                                        n || (n = Xr(t, r.cc)) && this.log("Live playlist, switching playlist, load frag with same CC: " + n.sn)
                                    }
                                } else {
                                    var s = this.hls.liveSyncPosition;
                                    null !== s && (n = this.getFragmentAtPosition(s, this.bitrateTest ? e.fragmentEnd : e.edge, e))
                                }
                                return n
                            }, r.getFragmentAtPosition = function(e, t, r) {
                                var n, i = this.config,
                                    a = this.fragPrevious,
                                    s = r.fragments,
                                    o = r.endSN,
                                    l = r.fragmentHint,
                                    u = i.maxFragLookUpTolerance,
                                    c = r.partList,
                                    d = !!(i.lowLatencyMode && null != c && c.length && l);
                                if (d && l && !this.bitrateTest && (s = s.concat(l), o = l.sn), n = e < t ? Wr(a, s, e, e > t - u ? 0 : u) : s[s.length - 1]) {
                                    var h = n.sn - r.startSN,
                                        f = this.fragmentTracker.getState(n);
                                    if ((f === Sn.OK || f === Sn.PARTIAL && n.gap) && (a = n), a && n.sn === a.sn && (!d || c[0].fragment.sn > n.sn) && a && n.level === a.level) {
                                        var g = s[h + 1];
                                        n = n.sn < o && this.fragmentTracker.getState(g) !== Sn.OK ? g : null
                                    }
                                }
                                return n
                            }, r.synchronizeToLiveEdge = function(e) {
                                var t = this.config,
                                    r = this.media;
                                if (r) {
                                    var n = this.hls.liveSyncPosition,
                                        i = r.currentTime,
                                        a = e.fragments[0].start,
                                        s = e.edge,
                                        o = i >= a - t.maxFragLookUpTolerance && i <= s;
                                    if (null !== n && r.duration > n && (i < n || !o)) {
                                        var l = void 0 !== t.liveMaxLatencyDuration ? t.liveMaxLatencyDuration : t.liveMaxLatencyDurationCount * e.targetduration;
                                        (!o && r.readyState < 4 || i < s - l) && (this.loadedmetadata || (this.nextLoadPosition = n), r.readyState && (this.warn("Playback: " + i.toFixed(3) + " is located too far from the end of live sliding playlist: " + s + ", reset currentTime to : " + n.toFixed(3)), r.currentTime = n))
                                    }
                                }
                            }, r.alignPlaylists = function(e, t, r) {
                                var n = e.fragments.length;
                                if (!n) return this.warn("No fragments in live playlist"), 0;
                                var i = e.fragments[0].start,
                                    a = !t,
                                    s = e.alignedSliding && k(i);
                                if (a || !s && !i) {
                                    var o = this.fragPrevious;
                                    Mn(o, r, e);
                                    var l = e.fragments[0].start;
                                    return this.log("Live playlist sliding: " + l.toFixed(2) + " start-sn: " + (t ? t.startSN : "na") + "->" + e.startSN + " prev-sn: " + (o ? o.sn : "na") + " fragments: " + n), l
                                }
                                return i
                            }, r.waitForCdnTuneIn = function(e) {
                                var t = 3;
                                return e.live && e.canBlockReload && e.partTarget && e.tuneInGoal > Math.max(e.partHoldBack, e.partTarget * t)
                            }, r.setStartPosition = function(e, t) {
                                var r = this.startPosition;
                                if (r < t && (r = -1), -1 === r || -1 === this.lastCurrentTime) {
                                    var n = null !== this.startTimeOffset,
                                        i = n ? this.startTimeOffset : e.startTimeOffset;
                                    null !== i && k(i) ? (r = t + i, i < 0 && (r += e.totalduration), r = Math.min(Math.max(t, r), t + e.totalduration), this.log("Start time offset " + i + " found in " + (n ? "multivariant" : "media") + " playlist, adjust startPosition to " + r), this.startPosition = r) : e.live ? r = this.hls.liveSyncPosition || t : this.startPosition = r = 0, this.lastCurrentTime = r
                                }
                                this.nextLoadPosition = r
                            }, r.getLoadPosition = function() {
                                var e = this.media,
                                    t = 0;
                                return this.loadedmetadata && e ? t = e.currentTime : this.nextLoadPosition && (t = this.nextLoadPosition), t
                            }, r.handleFragLoadAborted = function(e, t) {
                                this.transmuxer && "initSegment" !== e.sn && e.stats.aborted && (this.warn("Fragment " + e.sn + (t ? " part " + t.index : "") + " of level " + e.level + " was aborted"), this.resetFragmentLoading(e))
                            }, r.resetFragmentLoading = function(e) {
                                this.fragCurrent && (this.fragContextChanged(e) || this.state === $n.FRAG_LOADING_WAITING_RETRY) || (this.state = $n.IDLE)
                            }, r.onFragmentOrKeyLoadError = function(e, t) {
                                if (t.chunkMeta && !t.frag) {
                                    var r = this.getCurrentContext(t.chunkMeta);
                                    r && (t.frag = r.frag)
                                }
                                var n = t.frag;
                                if (n && n.type === e && this.levels)
                                    if (this.fragContextChanged(n)) {
                                        var i;
                                        this.warn("Frag load error must match current frag to retry " + n.url + " > " + (null == (i = this.fragCurrent) ? void 0 : i.url))
                                    } else {
                                        var a = t.details === D.FRAG_GAP;
                                        a && this.fragmentTracker.fragBuffered(n, !0);
                                        var s = t.errorAction,
                                            o = s || {},
                                            l = o.action,
                                            u = o.retryCount,
                                            c = void 0 === u ? 0 : u,
                                            d = o.retryConfig;
                                        if (s && l === $r.RetryRequest && d) {
                                            this.resetStartWhenNotLoaded(this.levelLastLoaded);
                                            var h = Gr(d, c);
                                            this.warn("Fragment " + n.sn + " of " + e + " " + n.level + " errored with " + t.details + ", retrying loading " + (c + 1) + "/" + d.maxNumRetry + " in " + h + "ms"), s.resolved = !0, this.retryDate = self.performance.now() + h, this.state = $n.FRAG_LOADING_WAITING_RETRY
                                        } else if (d && s) {
                                            if (this.resetFragmentErrors(e), !(c < d.maxNumRetry)) return void F.warn(t.details + " reached or exceeded max retry (" + c + ")");
                                            a || l === $r.RemoveAlternatePermanently || (s.resolved = !0)
                                        } else(null == s ? void 0 : s.action) === $r.SendAlternateToPenaltyBox ? this.state = $n.WAITING_LEVEL : this.state = $n.ERROR;
                                        this.tickImmediate()
                                    }
                            }, r.reduceLengthAndFlushBuffer = function(e) {
                                if (this.state === $n.PARSING || this.state === $n.PARSED) {
                                    var t = e.parent,
                                        r = this.getFwdBufferInfo(this.mediaBuffer, t),
                                        n = r && r.len > .5;
                                    n && this.reduceMaxBufferLength(r.len);
                                    var i = !n;
                                    return i && this.warn("Buffer full error while media.currentTime is not buffered, flush " + t + " buffer"), e.frag && (this.fragmentTracker.removeFragment(e.frag), this.nextLoadPosition = e.frag.start), this.resetLoadingState(), i
                                }
                                return !1
                            }, r.resetFragmentErrors = function(e) {
                                e === $t.AUDIO && (this.fragCurrent = null), this.loadedmetadata || (this.startFragRequested = !1), this.state !== $n.STOPPED && (this.state = $n.IDLE)
                            }, r.afterBufferFlushed = function(e, t, r) {
                                if (e) {
                                    var n = In.getBuffered(e);
                                    this.fragmentTracker.detectEvictedFragments(t, n, r), this.state === $n.ENDED && this.resetLoadingState()
                                }
                            }, r.resetLoadingState = function() {
                                this.log("Reset loading state"), this.fragCurrent = null, this.fragPrevious = null, this.state = $n.IDLE
                            }, r.resetStartWhenNotLoaded = function(e) {
                                if (!this.loadedmetadata) {
                                    this.startFragRequested = !1;
                                    var t = e ? e.details : null;
                                    null != t && t.live ? (this.startPosition = -1, this.setStartPosition(t, 0), this.resetLoadingState()) : this.nextLoadPosition = this.startPosition
                                }
                            }, r.resetWhenMissingContext = function(e) {
                                this.warn("The loading context changed while buffering fragment " + e.sn + " of level " + e.level + ". This chunk will not be buffered."), this.removeUnbufferedFrags(), this.resetStartWhenNotLoaded(this.levelLastLoaded), this.resetLoadingState()
                            }, r.removeUnbufferedFrags = function(e) {
                                void 0 === e && (e = 0), this.fragmentTracker.removeFragmentsInRange(e, 1 / 0, this.playlistType, !1, !0)
                            }, r.updateLevelTiming = function(e, t, r, n) {
                                var i, a = this,
                                    s = r.details;
                                if (s) {
                                    if (!Object.keys(e.elementaryStreams).reduce((function(t, i) {
                                            var o = e.elementaryStreams[i];
                                            if (o) {
                                                var l = o.endPTS - o.startPTS;
                                                if (l <= 0) return a.warn("Could not parse fragment " + e.sn + " " + i + " duration reliably (" + l + ")"), t || !1;
                                                var u = n ? 0 : Rr(s, e, o.startPTS, o.endPTS, o.startDTS, o.endDTS);
                                                return a.hls.trigger(I.LEVEL_PTS_UPDATED, {
                                                    details: s,
                                                    level: r,
                                                    drift: u,
                                                    type: i,
                                                    frag: e,
                                                    start: o.startPTS,
                                                    end: o.endPTS
                                                }), !0
                                            }
                                            return t
                                        }), !1) && null === (null == (i = this.transmuxer) ? void 0 : i.error)) {
                                        var o = new Error("Found no media in fragment " + e.sn + " of level " + e.level + " resetting transmuxer to fallback to playlist timing");
                                        if (0 === r.fragmentError && (r.fragmentError++, e.gap = !0, this.fragmentTracker.removeFragment(e), this.fragmentTracker.fragBuffered(e, !0)), this.warn(o.message), this.hls.trigger(I.ERROR, {
                                                type: w.MEDIA_ERROR,
                                                details: D.FRAG_PARSING_ERROR,
                                                fatal: !1,
                                                error: o,
                                                frag: e,
                                                reason: "Found no media in msn " + e.sn + ' of level "' + r.url + '"'
                                            }), !this.hls) return;
                                        this.resetTransmuxer()
                                    }
                                    this.state = $n.PARSED, this.hls.trigger(I.FRAG_PARSED, {
                                        frag: e,
                                        part: t
                                    })
                                } else this.warn("level.details undefined")
                            }, r.resetTransmuxer = function() {
                                this.transmuxer && (this.transmuxer.destroy(), this.transmuxer = null)
                            }, r.recoverWorkerError = function(e) {
                                "demuxerWorker" === e.event && (this.fragmentTracker.removeAllFragments(), this.resetTransmuxer(), this.resetStartWhenNotLoaded(this.levelLastLoaded), this.resetLoadingState())
                            }, o(t, [{
                                key: "state",
                                get: function() {
                                    return this._state
                                },
                                set: function(e) {
                                    var t = this._state;
                                    t !== e && (this._state = e, this.log(t + "->" + e))
                                }
                            }]), t
                        }(En),
                        Qn = function() {
                            function e() {
                                this.chunks = [], this.dataLength = 0
                            }
                            var t = e.prototype;
                            return t.push = function(e) {
                                this.chunks.push(e), this.dataLength += e.length
                            }, t.flush = function() {
                                var e, t = this.chunks,
                                    r = this.dataLength;
                                return t.length ? (e = 1 === t.length ? t[0] : Zn(t, r), this.reset(), e) : new Uint8Array(0)
                            }, t.reset = function() {
                                this.chunks.length = 0, this.dataLength = 0
                            }, e
                        }();

                    function Zn(e, t) {
                        for (var r = new Uint8Array(t), n = 0, i = 0; i < e.length; i++) {
                            var a = e[i];
                            r.set(a, n), n += a.length
                        }
                        return r
                    }

                    function ei(e, t) {
                        return void 0 === e && (e = ""), void 0 === t && (t = 9e4), {
                            type: e,
                            id: -1,
                            pid: -1,
                            inputTimeScale: t,
                            sequenceNumber: -1,
                            samples: [],
                            dropped: 0
                        }
                    }
                    var ti = function() {
                            function e() {
                                this._audioTrack = void 0, this._id3Track = void 0, this.frameIndex = 0, this.cachedData = null, this.basePTS = null, this.initPTS = null, this.lastPTS = null
                            }
                            var t = e.prototype;
                            return t.resetInitSegment = function(e, t, r, n) {
                                this._id3Track = {
                                    type: "id3",
                                    id: 3,
                                    pid: -1,
                                    inputTimeScale: 9e4,
                                    sequenceNumber: 0,
                                    samples: [],
                                    dropped: 0
                                }
                            }, t.resetTimeStamp = function(e) {
                                this.initPTS = e, this.resetContiguity()
                            }, t.resetContiguity = function() {
                                this.basePTS = null, this.lastPTS = null, this.frameIndex = 0
                            }, t.canParse = function(e, t) {
                                return !1
                            }, t.appendFrame = function(e, t, r) {}, t.demux = function(e, t) {
                                this.cachedData && (e = rt(this.cachedData, e), this.cachedData = null);
                                var r, n = ve(e, 0),
                                    i = n ? n.length : 0,
                                    a = this._audioTrack,
                                    s = this._id3Track,
                                    o = n ? be(n) : void 0,
                                    l = e.length;
                                for ((null === this.basePTS || 0 === this.frameIndex && k(o)) && (this.basePTS = ri(o, t, this.initPTS), this.lastPTS = this.basePTS), null === this.lastPTS && (this.lastPTS = this.basePTS), n && n.length > 0 && s.samples.push({
                                        pts: this.lastPTS,
                                        dts: this.lastPTS,
                                        data: n,
                                        type: or.audioId3,
                                        duration: Number.POSITIVE_INFINITY
                                    }); i < l;) {
                                    if (this.canParse(e, i)) {
                                        var u = this.appendFrame(a, e, i);
                                        u ? (this.frameIndex++, this.lastPTS = u.sample.pts, r = i += u.length) : i = l
                                    } else Te(e, i) ? (n = ve(e, i), s.samples.push({
                                        pts: this.lastPTS,
                                        dts: this.lastPTS,
                                        data: n,
                                        type: or.audioId3,
                                        duration: Number.POSITIVE_INFINITY
                                    }), r = i += n.length) : i++;
                                    if (i === l && r !== l) {
                                        var c = fe(e, r);
                                        this.cachedData ? this.cachedData = rt(this.cachedData, c) : this.cachedData = c
                                    }
                                }
                                return {
                                    audioTrack: a,
                                    videoTrack: ei(),
                                    id3Track: s,
                                    textTrack: ei()
                                }
                            }, t.demuxSampleAes = function(e, t, r) {
                                return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"))
                            }, t.flush = function(e) {
                                var t = this.cachedData;
                                return t && (this.cachedData = null, this.demux(t, 0)), {
                                    audioTrack: this._audioTrack,
                                    videoTrack: ei(),
                                    id3Track: this._id3Track,
                                    textTrack: ei()
                                }
                            }, t.destroy = function() {}, e
                        }(),
                        ri = function(e, t, r) {
                            return k(e) ? 90 * e : 9e4 * t + (r ? 9e4 * r.baseTime / r.timescale : 0)
                        };

                    function ni(e, t, r, n) {
                        var i, a, s, o, l = navigator.userAgent.toLowerCase(),
                            u = n,
                            c = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
                        i = 1 + ((192 & t[r + 2]) >>> 6);
                        var d = (60 & t[r + 2]) >>> 2;
                        if (!(d > c.length - 1)) return s = (1 & t[r + 2]) << 2, s |= (192 & t[r + 3]) >>> 6, F.log("manifest codec:" + n + ", ADTS type:" + i + ", samplingIndex:" + d), /firefox/i.test(l) ? d >= 6 ? (i = 5, o = new Array(4), a = d - 3) : (i = 2, o = new Array(2), a = d) : -1 !== l.indexOf("android") ? (i = 2, o = new Array(2), a = d) : (i = 5, o = new Array(4), n && (-1 !== n.indexOf("mp4a.40.29") || -1 !== n.indexOf("mp4a.40.5")) || !n && d >= 6 ? a = d - 3 : ((n && -1 !== n.indexOf("mp4a.40.2") && (d >= 6 && 1 === s || /vivaldi/i.test(l)) || !n && 1 === s) && (i = 2, o = new Array(2)), a = d)), o[0] = i << 3, o[0] |= (14 & d) >> 1, o[1] |= (1 & d) << 7, o[1] |= s << 3, 5 === i && (o[1] |= (14 & a) >> 1, o[2] = (1 & a) << 7, o[2] |= 8, o[3] = 0), {
                            config: o,
                            samplerate: c[d],
                            channelCount: s,
                            codec: "mp4a.40." + i,
                            manifestCodec: u
                        };
                        var h = new Error("invalid ADTS sampling index:" + d);
                        e.emit(I.ERROR, I.ERROR, {
                            type: w.MEDIA_ERROR,
                            details: D.FRAG_PARSING_ERROR,
                            fatal: !0,
                            error: h,
                            reason: h.message
                        })
                    }

                    function ii(e, t) {
                        return 255 === e[t] && 240 == (246 & e[t + 1])
                    }

                    function ai(e, t) {
                        return 1 & e[t + 1] ? 7 : 9
                    }

                    function si(e, t) {
                        return (3 & e[t + 3]) << 11 | e[t + 4] << 3 | (224 & e[t + 5]) >>> 5
                    }

                    function oi(e, t) {
                        return t + 5 < e.length
                    }

                    function li(e, t) {
                        return t + 1 < e.length && ii(e, t)
                    }

                    function ui(e, t) {
                        return oi(e, t) && ii(e, t) && si(e, t) <= e.length - t
                    }

                    function ci(e, t) {
                        if (li(e, t)) {
                            var r = ai(e, t);
                            if (t + r >= e.length) return !1;
                            var n = si(e, t);
                            if (n <= r) return !1;
                            var i = t + n;
                            return i === e.length || li(e, i)
                        }
                        return !1
                    }

                    function di(e, t, r, n, i) {
                        if (!e.samplerate) {
                            var a = ni(t, r, n, i);
                            if (!a) return;
                            e.config = a.config, e.samplerate = a.samplerate, e.channelCount = a.channelCount, e.codec = a.codec, e.manifestCodec = a.manifestCodec, F.log("parsed codec:" + e.codec + ", rate:" + a.samplerate + ", channels:" + a.channelCount)
                        }
                    }

                    function hi(e) {
                        return 9216e4 / e
                    }

                    function fi(e, t) {
                        var r = ai(e, t);
                        if (t + r <= e.length) {
                            var n = si(e, t) - r;
                            if (n > 0) return {
                                headerLength: r,
                                frameLength: n
                            }
                        }
                    }

                    function gi(e, t, r, n, i) {
                        var a, s = n + i * hi(e.samplerate),
                            o = fi(t, r);
                        if (o) {
                            var l = o.frameLength,
                                u = o.headerLength,
                                c = u + l,
                                d = Math.max(0, r + c - t.length);
                            d ? (a = new Uint8Array(c - u)).set(t.subarray(r + u, t.length), 0) : a = t.subarray(r + u, r + c);
                            var h = {
                                unit: a,
                                pts: s
                            };
                            return d || e.samples.push(h), {
                                sample: h,
                                length: c,
                                missing: d
                            }
                        }
                        var f = t.length - r;
                        return (a = new Uint8Array(f)).set(t.subarray(r, t.length), 0), {
                            sample: {
                                unit: a,
                                pts: s
                            },
                            length: f,
                            missing: -1
                        }
                    }
                    var pi = null,
                        mi = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],
                        vi = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3],
                        yi = [
                            [0, 72, 144, 12],
                            [0, 0, 0, 0],
                            [0, 72, 144, 12],
                            [0, 144, 144, 12]
                        ],
                        Ti = [0, 1, 1, 4];

                    function bi(e, t, r, n, i) {
                        if (!(r + 24 > t.length)) {
                            var a = Ei(t, r);
                            if (a && r + a.frameLength <= t.length) {
                                var s = n + i * (9e4 * a.samplesPerFrame / a.sampleRate),
                                    o = {
                                        unit: t.subarray(r, r + a.frameLength),
                                        pts: s,
                                        dts: s
                                    };
                                return e.config = [], e.channelCount = a.channelCount, e.samplerate = a.sampleRate, e.samples.push(o), {
                                    sample: o,
                                    length: a.frameLength,
                                    missing: 0
                                }
                            }
                        }
                    }

                    function Ei(e, t) {
                        var r = e[t + 1] >> 3 & 3,
                            n = e[t + 1] >> 1 & 3,
                            i = e[t + 2] >> 4 & 15,
                            a = e[t + 2] >> 2 & 3;
                        if (1 !== r && 0 !== i && 15 !== i && 3 !== a) {
                            var s = e[t + 2] >> 1 & 1,
                                o = e[t + 3] >> 6,
                                l = 1e3 * mi[14 * (3 === r ? 3 - n : 3 === n ? 3 : 4) + i - 1],
                                u = vi[3 * (3 === r ? 0 : 2 === r ? 1 : 2) + a],
                                c = 3 === o ? 1 : 2,
                                d = yi[r][n],
                                h = Ti[n],
                                f = 8 * d * h,
                                g = Math.floor(d * l / u + s) * h;
                            if (null === pi) {
                                var p = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
                                pi = p ? parseInt(p[1]) : 0
                            }
                            return !!pi && pi <= 87 && 2 === n && l >= 224e3 && 0 === o && (e[t + 3] = 128 | e[t + 3]), {
                                sampleRate: u,
                                channelCount: c,
                                frameLength: g,
                                samplesPerFrame: f
                            }
                        }
                    }

                    function Si(e, t) {
                        return !(255 !== e[t] || 224 & ~e[t + 1] || !(6 & e[t + 1]))
                    }

                    function Ai(e, t) {
                        return t + 1 < e.length && Si(e, t)
                    }

                    function ki(e, t) {
                        var r = 4;
                        return Si(e, t) && r <= e.length - t
                    }

                    function Li(e, t) {
                        if (t + 1 < e.length && Si(e, t)) {
                            var r = 4,
                                n = Ei(e, t),
                                i = r;
                            null != n && n.frameLength && (i = n.frameLength);
                            var a = t + i;
                            return a === e.length || Ai(e, a)
                        }
                        return !1
                    }
                    var Ri = function(e) {
                            function t(t, r) {
                                var n;
                                return (n = e.call(this) || this).observer = void 0, n.config = void 0, n.observer = t, n.config = r, n
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.resetInitSegment = function(t, r, n, i) {
                                e.prototype.resetInitSegment.call(this, t, r, n, i), this._audioTrack = {
                                    container: "audio/adts",
                                    type: "audio",
                                    id: 2,
                                    pid: -1,
                                    sequenceNumber: 0,
                                    segmentCodec: "aac",
                                    samples: [],
                                    manifestCodec: r,
                                    duration: i,
                                    inputTimeScale: 9e4,
                                    dropped: 0
                                }
                            }, t.probe = function(e) {
                                if (!e) return !1;
                                var t = ve(e, 0),
                                    r = (null == t ? void 0 : t.length) || 0;
                                if (Li(e, r)) return !1;
                                for (var n = e.length; r < n; r++)
                                    if (ci(e, r)) return F.log("ADTS sync word found !"), !0;
                                return !1
                            }, r.canParse = function(e, t) {
                                return ui(e, t)
                            }, r.appendFrame = function(e, t, r) {
                                di(e, this.observer, t, r, e.manifestCodec);
                                var n = gi(e, t, r, this.basePTS, this.frameIndex);
                                if (n && 0 === n.missing) return n
                            }, t
                        }(ti),
                        Ii = /\/emsg[-/]ID3/i,
                        wi = function() {
                            function e(e, t) {
                                this.remainderData = null, this.timeOffset = 0, this.config = void 0, this.videoTrack = void 0, this.audioTrack = void 0, this.id3Track = void 0, this.txtTrack = void 0, this.config = t
                            }
                            var t = e.prototype;
                            return t.resetTimeStamp = function() {}, t.resetInitSegment = function(e, t, r, n) {
                                var i = this.videoTrack = ei("video", 1),
                                    a = this.audioTrack = ei("audio", 1),
                                    s = this.txtTrack = ei("text", 1);
                                if (this.id3Track = ei("id3", 1), this.timeOffset = 0, null != e && e.byteLength) {
                                    var o = je(e);
                                    if (o.video) {
                                        var l = o.video,
                                            u = l.id,
                                            c = l.timescale,
                                            d = l.codec;
                                        i.id = u, i.timescale = s.timescale = c, i.codec = d
                                    }
                                    if (o.audio) {
                                        var h = o.audio,
                                            f = h.id,
                                            g = h.timescale,
                                            p = h.codec;
                                        a.id = f, a.timescale = g, a.codec = p
                                    }
                                    s.id = Pe.text, i.sampleDuration = 0, i.duration = a.duration = n
                                }
                            }, t.resetContiguity = function() {
                                this.remainderData = null
                            }, e.probe = function(e) {
                                return Ve(e)
                            }, t.demux = function(e, t) {
                                this.timeOffset = t;
                                var r = e,
                                    n = this.videoTrack,
                                    i = this.txtTrack;
                                if (this.config.progressive) {
                                    this.remainderData && (r = rt(this.remainderData, e));
                                    var a = tt(r);
                                    this.remainderData = a.remainder, n.samples = a.valid || new Uint8Array
                                } else n.samples = r;
                                var s = this.extractID3Track(n, t);
                                return i.samples = nt(t, n), {
                                    videoTrack: n,
                                    audioTrack: this.audioTrack,
                                    id3Track: s,
                                    textTrack: this.txtTrack
                                }
                            }, t.flush = function() {
                                var e = this.timeOffset,
                                    t = this.videoTrack,
                                    r = this.txtTrack;
                                t.samples = this.remainderData || new Uint8Array, this.remainderData = null;
                                var n = this.extractID3Track(t, this.timeOffset);
                                return r.samples = nt(e, t), {
                                    videoTrack: t,
                                    audioTrack: ei(),
                                    id3Track: n,
                                    textTrack: ei()
                                }
                            }, t.extractID3Track = function(e, t) {
                                var r = this.id3Track;
                                if (e.samples.length) {
                                    var n = He(e.samples, ["emsg"]);
                                    n && n.forEach((function(e) {
                                        var n = lt(e);
                                        if (Ii.test(n.schemeIdUri)) {
                                            var i = k(n.presentationTime) ? n.presentationTime / n.timeScale : t + n.presentationTimeDelta / n.timeScale,
                                                a = 4294967295 === n.eventDuration ? Number.POSITIVE_INFINITY : n.eventDuration / n.timeScale;
                                            a <= .001 && (a = Number.POSITIVE_INFINITY);
                                            var s = n.payload;
                                            r.samples.push({
                                                data: s,
                                                len: s.byteLength,
                                                dts: i,
                                                pts: i,
                                                type: or.emsg,
                                                duration: a
                                            })
                                        }
                                    }))
                                }
                                return r
                            }, t.demuxSampleAes = function(e, t, r) {
                                return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"))
                            }, t.destroy = function() {}, e
                        }(),
                        Di = function(e, t) {
                            var r = 0,
                                n = 5;
                            t += n;
                            for (var i = new Uint32Array(1), a = new Uint32Array(1), s = new Uint8Array(1); n > 0;) {
                                s[0] = e[t];
                                var o = Math.min(n, 8),
                                    l = 8 - o;
                                a[0] = 4278190080 >>> 24 + l << l, i[0] = (s[0] & a[0]) >> l, r = r ? r << o | i[0] : i[0], t += 1, n -= o
                            }
                            return r
                        },
                        Ci = function(e) {
                            function t(t) {
                                var r;
                                return (r = e.call(this) || this).observer = void 0, r.observer = t, r
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.resetInitSegment = function(t, r, n, i) {
                                e.prototype.resetInitSegment.call(this, t, r, n, i), this._audioTrack = {
                                    container: "audio/ac-3",
                                    type: "audio",
                                    id: 2,
                                    pid: -1,
                                    sequenceNumber: 0,
                                    segmentCodec: "ac3",
                                    samples: [],
                                    manifestCodec: r,
                                    duration: i,
                                    inputTimeScale: 9e4,
                                    dropped: 0
                                }
                            }, r.canParse = function(e, t) {
                                return t + 64 < e.length
                            }, r.appendFrame = function(e, t, r) {
                                var n = xi(e, t, r, this.basePTS, this.frameIndex);
                                if (-1 !== n) return {
                                    sample: e.samples[e.samples.length - 1],
                                    length: n,
                                    missing: 0
                                }
                            }, t.probe = function(e) {
                                if (!e) return !1;
                                var t = ve(e, 0);
                                if (!t) return !1;
                                var r = t.length;
                                return 11 === e[r] && 119 === e[r + 1] && void 0 !== be(t) && Di(e, r) < 16
                            }, t
                        }(ti);

                    function xi(e, t, r, n, i) {
                        if (r + 8 > t.length) return -1;
                        if (11 !== t[r] || 119 !== t[r + 1]) return -1;
                        var a = t[r + 4] >> 6;
                        if (a >= 3) return -1;
                        var s = [48e3, 44100, 32e3][a],
                            o = 63 & t[r + 4],
                            l = 2 * [64, 69, 96, 64, 70, 96, 80, 87, 120, 80, 88, 120, 96, 104, 144, 96, 105, 144, 112, 121, 168, 112, 122, 168, 128, 139, 192, 128, 140, 192, 160, 174, 240, 160, 175, 240, 192, 208, 288, 192, 209, 288, 224, 243, 336, 224, 244, 336, 256, 278, 384, 256, 279, 384, 320, 348, 480, 320, 349, 480, 384, 417, 576, 384, 418, 576, 448, 487, 672, 448, 488, 672, 512, 557, 768, 512, 558, 768, 640, 696, 960, 640, 697, 960, 768, 835, 1152, 768, 836, 1152, 896, 975, 1344, 896, 976, 1344, 1024, 1114, 1536, 1024, 1115, 1536, 1152, 1253, 1728, 1152, 1254, 1728, 1280, 1393, 1920, 1280, 1394, 1920][3 * o + a];
                        if (r + l > t.length) return -1;
                        var u = t[r + 6] >> 5,
                            c = 0;
                        2 === u ? c += 2 : (1 & u && 1 !== u && (c += 2), 4 & u && (c += 2));
                        var d = (t[r + 6] << 8 | t[r + 7]) >> 12 - c & 1,
                            h = [2, 1, 2, 3, 3, 4, 4, 5][u] + d,
                            f = t[r + 5] >> 3,
                            g = 7 & t[r + 5],
                            p = new Uint8Array([a << 6 | f << 1 | g >> 2, (3 & g) << 6 | u << 3 | d << 2 | o >> 4, o << 4 & 224]),
                            m = n + i * (1536 / s * 9e4),
                            v = t.subarray(r, r + l);
                        return e.config = p, e.channelCount = h, e.samplerate = s, e.samples.push({
                            unit: v,
                            pts: m
                        }), l
                    }
                    var _i = function() {
                            function e() {
                                this.VideoSample = null
                            }
                            var t = e.prototype;
                            return t.createVideoSample = function(e, t, r, n) {
                                return {
                                    key: e,
                                    frame: !1,
                                    pts: t,
                                    dts: r,
                                    units: [],
                                    debug: n,
                                    length: 0
                                }
                            }, t.getLastNalUnit = function(e) {
                                var t, r, n = this.VideoSample;
                                if (n && 0 !== n.units.length || (n = e[e.length - 1]), null != (t = n) && t.units) {
                                    var i = n.units;
                                    r = i[i.length - 1]
                                }
                                return r
                            }, t.pushAccessUnit = function(e, t) {
                                if (e.units.length && e.frame) {
                                    if (void 0 === e.pts) {
                                        var r = t.samples,
                                            n = r.length;
                                        if (!n) return void t.dropped++;
                                        var i = r[n - 1];
                                        e.pts = i.pts, e.dts = i.dts
                                    }
                                    t.samples.push(e)
                                }
                                e.debug.length && F.log(e.pts + "/" + e.dts + ":" + e.debug)
                            }, e
                        }(),
                        Oi = function() {
                            function e(e) {
                                this.data = void 0, this.bytesAvailable = void 0, this.word = void 0, this.bitsAvailable = void 0, this.data = e, this.bytesAvailable = e.byteLength, this.word = 0, this.bitsAvailable = 0
                            }
                            var t = e.prototype;
                            return t.loadWord = function() {
                                var e = this.data,
                                    t = this.bytesAvailable,
                                    r = e.byteLength - t,
                                    n = new Uint8Array(4),
                                    i = Math.min(4, t);
                                if (0 === i) throw new Error("no bytes available");
                                n.set(e.subarray(r, r + i)), this.word = new DataView(n.buffer).getUint32(0), this.bitsAvailable = 8 * i, this.bytesAvailable -= i
                            }, t.skipBits = function(e) {
                                var t;
                                e = Math.min(e, 8 * this.bytesAvailable + this.bitsAvailable), this.bitsAvailable > e ? (this.word <<= e, this.bitsAvailable -= e) : (e -= this.bitsAvailable, e -= (t = e >> 3) << 3, this.bytesAvailable -= t, this.loadWord(), this.word <<= e, this.bitsAvailable -= e)
                            }, t.readBits = function(e) {
                                var t = Math.min(this.bitsAvailable, e),
                                    r = this.word >>> 32 - t;
                                if (e > 32 && F.error("Cannot read more than 32 bits at a time"), this.bitsAvailable -= t, this.bitsAvailable > 0) this.word <<= t;
                                else {
                                    if (!(this.bytesAvailable > 0)) throw new Error("no bits available");
                                    this.loadWord()
                                }
                                return (t = e - t) > 0 && this.bitsAvailable ? r << t | this.readBits(t) : r
                            }, t.skipLZ = function() {
                                var e;
                                for (e = 0; e < this.bitsAvailable; ++e)
                                    if (this.word & 2147483648 >>> e) return this.word <<= e, this.bitsAvailable -= e, e;
                                return this.loadWord(), e + this.skipLZ()
                            }, t.skipUEG = function() {
                                this.skipBits(1 + this.skipLZ())
                            }, t.skipEG = function() {
                                this.skipBits(1 + this.skipLZ())
                            }, t.readUEG = function() {
                                var e = this.skipLZ();
                                return this.readBits(e + 1) - 1
                            }, t.readEG = function() {
                                var e = this.readUEG();
                                return 1 & e ? 1 + e >>> 1 : -1 * (e >>> 1)
                            }, t.readBoolean = function() {
                                return 1 === this.readBits(1)
                            }, t.readUByte = function() {
                                return this.readBits(8)
                            }, t.readUShort = function() {
                                return this.readBits(16)
                            }, t.readUInt = function() {
                                return this.readBits(32)
                            }, t.skipScalingList = function(e) {
                                for (var t = 8, r = 8, n = 0; n < e; n++) 0 !== r && (r = (t + this.readEG() + 256) % 256), t = 0 === r ? t : r
                            }, t.readSPS = function() {
                                var e, t, r, n = 0,
                                    i = 0,
                                    a = 0,
                                    s = 0,
                                    o = this.readUByte.bind(this),
                                    l = this.readBits.bind(this),
                                    u = this.readUEG.bind(this),
                                    c = this.readBoolean.bind(this),
                                    d = this.skipBits.bind(this),
                                    h = this.skipEG.bind(this),
                                    f = this.skipUEG.bind(this),
                                    g = this.skipScalingList.bind(this);
                                o();
                                var p = o();
                                if (l(5), d(3), o(), f(), 100 === p || 110 === p || 122 === p || 244 === p || 44 === p || 83 === p || 86 === p || 118 === p || 128 === p) {
                                    var m = u();
                                    if (3 === m && d(1), f(), f(), d(1), c())
                                        for (t = 3 !== m ? 8 : 12, r = 0; r < t; r++) c() && g(r < 6 ? 16 : 64)
                                }
                                f();
                                var v = u();
                                if (0 === v) u();
                                else if (1 === v)
                                    for (d(1), h(), h(), e = u(), r = 0; r < e; r++) h();
                                f(), d(1);
                                var y = u(),
                                    T = u(),
                                    b = l(1);
                                0 === b && d(1), d(1), c() && (n = u(), i = u(), a = u(), s = u());
                                var E = [1, 1];
                                if (c() && c()) switch (o()) {
                                    case 1:
                                        E = [1, 1];
                                        break;
                                    case 2:
                                        E = [12, 11];
                                        break;
                                    case 3:
                                        E = [10, 11];
                                        break;
                                    case 4:
                                        E = [16, 11];
                                        break;
                                    case 5:
                                        E = [40, 33];
                                        break;
                                    case 6:
                                        E = [24, 11];
                                        break;
                                    case 7:
                                        E = [20, 11];
                                        break;
                                    case 8:
                                        E = [32, 11];
                                        break;
                                    case 9:
                                        E = [80, 33];
                                        break;
                                    case 10:
                                        E = [18, 11];
                                        break;
                                    case 11:
                                        E = [15, 11];
                                        break;
                                    case 12:
                                        E = [64, 33];
                                        break;
                                    case 13:
                                        E = [160, 99];
                                        break;
                                    case 14:
                                        E = [4, 3];
                                        break;
                                    case 15:
                                        E = [3, 2];
                                        break;
                                    case 16:
                                        E = [2, 1];
                                        break;
                                    case 255:
                                        E = [o() << 8 | o(), o() << 8 | o()]
                                }
                                return {
                                    width: Math.ceil(16 * (y + 1) - 2 * n - 2 * i),
                                    height: (2 - b) * (T + 1) * 16 - (b ? 2 : 4) * (a + s),
                                    pixelRatio: E
                                }
                            }, t.readSliceType = function() {
                                return this.readUByte(), this.readUEG(), this.readUEG()
                            }, e
                        }(),
                        Pi = function(e) {
                            function t() {
                                return e.apply(this, arguments) || this
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.parseAVCPES = function(e, t, r, n, i) {
                                var a, s = this,
                                    o = this.parseAVCNALu(e, r.data),
                                    l = this.VideoSample,
                                    u = !1;
                                r.data = null, l && o.length && !e.audFound && (this.pushAccessUnit(l, e), l = this.VideoSample = this.createVideoSample(!1, r.pts, r.dts, "")), o.forEach((function(n) {
                                    var o;
                                    switch (n.type) {
                                        case 1:
                                            var c = !1;
                                            a = !0;
                                            var d, h = n.data;
                                            if (u && h.length > 4) {
                                                var f = new Oi(h).readSliceType();
                                                2 !== f && 4 !== f && 7 !== f && 9 !== f || (c = !0)
                                            }
                                            c && null != (d = l) && d.frame && !l.key && (s.pushAccessUnit(l, e), l = s.VideoSample = null), l || (l = s.VideoSample = s.createVideoSample(!0, r.pts, r.dts, "")), l.frame = !0, l.key = c;
                                            break;
                                        case 5:
                                            a = !0, null != (o = l) && o.frame && !l.key && (s.pushAccessUnit(l, e), l = s.VideoSample = null), l || (l = s.VideoSample = s.createVideoSample(!0, r.pts, r.dts, "")), l.key = !0, l.frame = !0;
                                            break;
                                        case 6:
                                            a = !0, st(n.data, 1, r.pts, t.samples);
                                            break;
                                        case 7:
                                            var g, p;
                                            a = !0, u = !0;
                                            var m = n.data,
                                                v = new Oi(m).readSPS();
                                            if (!e.sps || e.width !== v.width || e.height !== v.height || (null == (g = e.pixelRatio) ? void 0 : g[0]) !== v.pixelRatio[0] || (null == (p = e.pixelRatio) ? void 0 : p[1]) !== v.pixelRatio[1]) {
                                                e.width = v.width, e.height = v.height, e.pixelRatio = v.pixelRatio, e.sps = [m], e.duration = i;
                                                for (var y = m.subarray(1, 4), T = "avc1.", b = 0; b < 3; b++) {
                                                    var E = y[b].toString(16);
                                                    E.length < 2 && (E = "0" + E), T += E
                                                }
                                                e.codec = T
                                            }
                                            break;
                                        case 8:
                                            a = !0, e.pps = [n.data];
                                            break;
                                        case 9:
                                            a = !0, e.audFound = !0, l && s.pushAccessUnit(l, e), l = s.VideoSample = s.createVideoSample(!1, r.pts, r.dts, "");
                                            break;
                                        case 12:
                                            a = !0;
                                            break;
                                        default:
                                            a = !1, l && (l.debug += "unknown NAL " + n.type + " ")
                                    }
                                    l && a && l.units.push(n)
                                })), n && l && (this.pushAccessUnit(l, e), this.VideoSample = null)
                            }, r.parseAVCNALu = function(e, t) {
                                var r, n, i = t.byteLength,
                                    a = e.naluState || 0,
                                    s = a,
                                    o = [],
                                    l = 0,
                                    u = -1,
                                    c = 0;
                                for (-1 === a && (u = 0, c = 31 & t[0], a = 0, l = 1); l < i;)
                                    if (r = t[l++], a)
                                        if (1 !== a)
                                            if (r)
                                                if (1 === r) {
                                                    if (n = l - a - 1, u >= 0) {
                                                        var d = {
                                                            data: t.subarray(u, n),
                                                            type: c
                                                        };
                                                        o.push(d)
                                                    } else {
                                                        var h = this.getLastNalUnit(e.samples);
                                                        h && (s && l <= 4 - s && h.state && (h.data = h.data.subarray(0, h.data.byteLength - s)), n > 0 && (h.data = rt(h.data, t.subarray(0, n)), h.state = 0))
                                                    }
                                                    l < i ? (u = l, c = 31 & t[l], a = 0) : a = -1
                                                } else a = 0;
                                else a = 3;
                                else a = r ? 0 : 2;
                                else a = r ? 0 : 1;
                                if (u >= 0 && a >= 0) {
                                    var f = {
                                        data: t.subarray(u, i),
                                        type: c,
                                        state: a
                                    };
                                    o.push(f)
                                }
                                if (0 === o.length) {
                                    var g = this.getLastNalUnit(e.samples);
                                    g && (g.data = rt(g.data, t))
                                }
                                return e.naluState = a, o
                            }, t
                        }(_i),
                        Mi = function() {
                            function e(e, t, r) {
                                this.keyData = void 0, this.decrypter = void 0, this.keyData = r, this.decrypter = new zn(t, {
                                    removePKCS7Padding: !1
                                })
                            }
                            var t = e.prototype;
                            return t.decryptBuffer = function(e) {
                                return this.decrypter.decrypt(e, this.keyData.key.buffer, this.keyData.iv.buffer)
                            }, t.decryptAacSample = function(e, t, r) {
                                var n = this,
                                    i = e[t].unit;
                                if (!(i.length <= 16)) {
                                    var a = i.subarray(16, i.length - i.length % 16),
                                        s = a.buffer.slice(a.byteOffset, a.byteOffset + a.length);
                                    this.decryptBuffer(s).then((function(a) {
                                        var s = new Uint8Array(a);
                                        i.set(s, 16), n.decrypter.isSync() || n.decryptAacSamples(e, t + 1, r)
                                    }))
                                }
                            }, t.decryptAacSamples = function(e, t, r) {
                                for (;; t++) {
                                    if (t >= e.length) return void r();
                                    if (!(e[t].unit.length < 32 || (this.decryptAacSample(e, t, r), this.decrypter.isSync()))) return
                                }
                            }, t.getAvcEncryptedData = function(e) {
                                for (var t = 16 * Math.floor((e.length - 48) / 160) + 16, r = new Int8Array(t), n = 0, i = 32; i < e.length - 16; i += 160, n += 16) r.set(e.subarray(i, i + 16), n);
                                return r
                            }, t.getAvcDecryptedUnit = function(e, t) {
                                for (var r = new Uint8Array(t), n = 0, i = 32; i < e.length - 16; i += 160, n += 16) e.set(r.subarray(n, n + 16), i);
                                return e
                            }, t.decryptAvcSample = function(e, t, r, n, i) {
                                var a = this,
                                    s = ot(i.data),
                                    o = this.getAvcEncryptedData(s);
                                this.decryptBuffer(o.buffer).then((function(o) {
                                    i.data = a.getAvcDecryptedUnit(s, o), a.decrypter.isSync() || a.decryptAvcSamples(e, t, r + 1, n)
                                }))
                            }, t.decryptAvcSamples = function(e, t, r, n) {
                                if (e instanceof Uint8Array) throw new Error("Cannot decrypt samples of type Uint8Array");
                                for (;; t++, r = 0) {
                                    if (t >= e.length) return void n();
                                    for (var i = e[t].units; !(r >= i.length); r++) {
                                        var a = i[r];
                                        if (!(a.data.length <= 48 || 1 !== a.type && 5 !== a.type || (this.decryptAvcSample(e, t, r, n, a), this.decrypter.isSync()))) return
                                    }
                                }
                            }, e
                        }(),
                        Fi = 188,
                        Ni = function() {
                            function e(e, t, r) {
                                this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.sampleAes = null, this.pmtParsed = !1, this.audioCodec = void 0, this.videoCodec = void 0, this._duration = 0, this._pmtId = -1, this._videoTrack = void 0, this._audioTrack = void 0, this._id3Track = void 0, this._txtTrack = void 0, this.aacOverFlow = null, this.remainderData = null, this.videoParser = void 0, this.observer = e, this.config = t, this.typeSupported = r, this.videoParser = new Pi
                            }
                            e.probe = function(t) {
                                var r = e.syncOffset(t);
                                return r > 0 && F.warn("MPEG2-TS detected but first sync word found @ offset " + r), -1 !== r
                            }, e.syncOffset = function(e) {
                                for (var t = e.length, r = Math.min(5 * Fi, t - Fi) + 1, n = 0; n < r;) {
                                    for (var i = !1, a = -1, s = 0, o = n; o < t; o += Fi) {
                                        if (71 !== e[o] || t - o !== Fi && 71 !== e[o + Fi]) {
                                            if (s) return -1;
                                            break
                                        }
                                        if (s++, -1 === a && 0 !== (a = o) && (r = Math.min(a + 99 * Fi, e.length - Fi) + 1), i || (i = 0 === Ui(e, o)), i && s > 1 && (0 === a && s > 2 || o + Fi > r)) return a
                                    }
                                    n++
                                }
                                return -1
                            }, e.createTrack = function(e, t) {
                                return {
                                    container: "video" === e || "audio" === e ? "video/mp2t" : void 0,
                                    type: e,
                                    id: Pe[e],
                                    pid: -1,
                                    inputTimeScale: 9e4,
                                    sequenceNumber: 0,
                                    samples: [],
                                    dropped: 0,
                                    duration: "audio" === e ? t : void 0
                                }
                            };
                            var t = e.prototype;
                            return t.resetInitSegment = function(t, r, n, i) {
                                this.pmtParsed = !1, this._pmtId = -1, this._videoTrack = e.createTrack("video"), this._audioTrack = e.createTrack("audio", i), this._id3Track = e.createTrack("id3"), this._txtTrack = e.createTrack("text"), this._audioTrack.segmentCodec = "aac", this.aacOverFlow = null, this.remainderData = null, this.audioCodec = r, this.videoCodec = n, this._duration = i
                            }, t.resetTimeStamp = function() {}, t.resetContiguity = function() {
                                var e = this._audioTrack,
                                    t = this._videoTrack,
                                    r = this._id3Track;
                                e && (e.pesData = null), t && (t.pesData = null), r && (r.pesData = null), this.aacOverFlow = null, this.remainderData = null
                            }, t.demux = function(t, r, n, i) {
                                var a;
                                void 0 === n && (n = !1), void 0 === i && (i = !1), n || (this.sampleAes = null);
                                var s = this._videoTrack,
                                    o = this._audioTrack,
                                    l = this._id3Track,
                                    u = this._txtTrack,
                                    c = s.pid,
                                    d = s.pesData,
                                    h = o.pid,
                                    f = l.pid,
                                    g = o.pesData,
                                    p = l.pesData,
                                    m = null,
                                    v = this.pmtParsed,
                                    y = this._pmtId,
                                    T = t.length;
                                if (this.remainderData && (T = (t = rt(this.remainderData, t)).length, this.remainderData = null), T < Fi && !i) return this.remainderData = t, {
                                    audioTrack: o,
                                    videoTrack: s,
                                    id3Track: l,
                                    textTrack: u
                                };
                                var b = Math.max(0, e.syncOffset(t));
                                (T -= (T - b) % Fi) < t.byteLength && !i && (this.remainderData = new Uint8Array(t.buffer, T, t.buffer.byteLength - T));
                                for (var E = 0, S = b; S < T; S += Fi)
                                    if (71 === t[S]) {
                                        var A = !!(64 & t[S + 1]),
                                            k = Ui(t, S),
                                            L = void 0;
                                        if ((48 & t[S + 3]) >> 4 > 1) {
                                            if ((L = S + 5 + t[S + 4]) === S + Fi) continue
                                        } else L = S + 4;
                                        switch (k) {
                                            case c:
                                                A && (d && (a = Hi(d)) && this.videoParser.parseAVCPES(s, u, a, !1, this._duration), d = {
                                                    data: [],
                                                    size: 0
                                                }), d && (d.data.push(t.subarray(L, S + Fi)), d.size += S + Fi - L);
                                                break;
                                            case h:
                                                if (A) {
                                                    if (g && (a = Hi(g))) switch (o.segmentCodec) {
                                                        case "aac":
                                                            this.parseAACPES(o, a);
                                                            break;
                                                        case "mp3":
                                                            this.parseMPEGPES(o, a);
                                                            break;
                                                        case "ac3":
                                                            this.parseAC3PES(o, a)
                                                    }
                                                    g = {
                                                        data: [],
                                                        size: 0
                                                    }
                                                }
                                                g && (g.data.push(t.subarray(L, S + Fi)), g.size += S + Fi - L);
                                                break;
                                            case f:
                                                A && (p && (a = Hi(p)) && this.parseID3PES(l, a), p = {
                                                    data: [],
                                                    size: 0
                                                }), p && (p.data.push(t.subarray(L, S + Fi)), p.size += S + Fi - L);
                                                break;
                                            case 0:
                                                A && (L += t[L] + 1), y = this._pmtId = Bi(t, L);
                                                break;
                                            case y:
                                                A && (L += t[L] + 1);
                                                var R = Gi(t, L, this.typeSupported, n);
                                                (c = R.videoPid) > 0 && (s.pid = c, s.segmentCodec = R.segmentVideoCodec), (h = R.audioPid) > 0 && (o.pid = h, o.segmentCodec = R.segmentAudioCodec), (f = R.id3Pid) > 0 && (l.pid = f), null === m || v || (F.warn("MPEG-TS PMT found at " + S + " after unknown PID '" + m + "'. Backtracking to sync byte @" + b + " to parse all TS packets."), m = null, S = b - 188), v = this.pmtParsed = !0;
                                                break;
                                            case 17:
                                            case 8191:
                                                break;
                                            default:
                                                m = k
                                        }
                                    } else E++;
                                if (E > 0) {
                                    var C = new Error("Found " + E + " TS packet/s that do not start with 0x47");
                                    this.observer.emit(I.ERROR, I.ERROR, {
                                        type: w.MEDIA_ERROR,
                                        details: D.FRAG_PARSING_ERROR,
                                        fatal: !1,
                                        error: C,
                                        reason: C.message
                                    })
                                }
                                s.pesData = d, o.pesData = g, l.pesData = p;
                                var x = {
                                    audioTrack: o,
                                    videoTrack: s,
                                    id3Track: l,
                                    textTrack: u
                                };
                                return i && this.extractRemainingSamples(x), x
                            }, t.flush = function() {
                                var e, t = this.remainderData;
                                return this.remainderData = null, e = t ? this.demux(t, -1, !1, !0) : {
                                    videoTrack: this._videoTrack,
                                    audioTrack: this._audioTrack,
                                    id3Track: this._id3Track,
                                    textTrack: this._txtTrack
                                }, this.extractRemainingSamples(e), this.sampleAes ? this.decrypt(e, this.sampleAes) : e
                            }, t.extractRemainingSamples = function(e) {
                                var t, r = e.audioTrack,
                                    n = e.videoTrack,
                                    i = e.id3Track,
                                    a = e.textTrack,
                                    s = n.pesData,
                                    o = r.pesData,
                                    l = i.pesData;
                                if (s && (t = Hi(s)) ? (this.videoParser.parseAVCPES(n, a, t, !0, this._duration), n.pesData = null) : n.pesData = s, o && (t = Hi(o))) {
                                    switch (r.segmentCodec) {
                                        case "aac":
                                            this.parseAACPES(r, t);
                                            break;
                                        case "mp3":
                                            this.parseMPEGPES(r, t);
                                            break;
                                        case "ac3":
                                            this.parseAC3PES(r, t)
                                    }
                                    r.pesData = null
                                } else null != o && o.size && F.log("last AAC PES packet truncated,might overlap between fragments"), r.pesData = o;
                                l && (t = Hi(l)) ? (this.parseID3PES(i, t), i.pesData = null) : i.pesData = l
                            }, t.demuxSampleAes = function(e, t, r) {
                                var n = this.demux(e, r, !0, !this.config.progressive),
                                    i = this.sampleAes = new Mi(this.observer, this.config, t);
                                return this.decrypt(n, i)
                            }, t.decrypt = function(e, t) {
                                return new Promise((function(r) {
                                    var n = e.audioTrack,
                                        i = e.videoTrack;
                                    n.samples && "aac" === n.segmentCodec ? t.decryptAacSamples(n.samples, 0, (function() {
                                        i.samples ? t.decryptAvcSamples(i.samples, 0, 0, (function() {
                                            r(e)
                                        })) : r(e)
                                    })) : i.samples && t.decryptAvcSamples(i.samples, 0, 0, (function() {
                                        r(e)
                                    }))
                                }))
                            }, t.destroy = function() {
                                this._duration = 0
                            }, t.parseAACPES = function(e, t) {
                                var r, n, i, a = 0,
                                    s = this.aacOverFlow,
                                    o = t.data;
                                if (s) {
                                    this.aacOverFlow = null;
                                    var l = s.missing,
                                        u = s.sample.unit.byteLength;
                                    if (-1 === l) o = rt(s.sample.unit, o);
                                    else {
                                        var c = u - l;
                                        s.sample.unit.set(o.subarray(0, l), c), e.samples.push(s.sample), a = s.missing
                                    }
                                }
                                for (r = a, n = o.length; r < n - 1 && !li(o, r); r++);
                                if (r !== a) {
                                    var d, h = r < n - 1;
                                    d = h ? "AAC PES did not start with ADTS header,offset:" + r : "No ADTS header found in AAC PES";
                                    var f = new Error(d);
                                    if (F.warn("parsing error: " + d), this.observer.emit(I.ERROR, I.ERROR, {
                                            type: w.MEDIA_ERROR,
                                            details: D.FRAG_PARSING_ERROR,
                                            fatal: !1,
                                            levelRetry: h,
                                            error: f,
                                            reason: d
                                        }), !h) return
                                }
                                if (di(e, this.observer, o, r, this.audioCodec), void 0 !== t.pts) i = t.pts;
                                else {
                                    if (!s) return void F.warn("[tsdemuxer]: AAC PES unknown PTS");
                                    var g = hi(e.samplerate);
                                    i = s.sample.pts + g
                                }
                                for (var p, m = 0; r < n;) {
                                    if (r += (p = gi(e, o, r, i, m)).length, p.missing) {
                                        this.aacOverFlow = p;
                                        break
                                    }
                                    for (m++; r < n - 1 && !li(o, r); r++);
                                }
                            }, t.parseMPEGPES = function(e, t) {
                                var r = t.data,
                                    n = r.length,
                                    i = 0,
                                    a = 0,
                                    s = t.pts;
                                if (void 0 !== s)
                                    for (; a < n;)
                                        if (Ai(r, a)) {
                                            var o = bi(e, r, a, s, i);
                                            if (!o) break;
                                            a += o.length, i++
                                        } else a++;
                                else F.warn("[tsdemuxer]: MPEG PES unknown PTS")
                            }, t.parseAC3PES = function(e, t) {
                                var r = t.data,
                                    n = t.pts;
                                if (void 0 !== n)
                                    for (var i, a = r.length, s = 0, o = 0; o < a && (i = xi(e, r, o, n, s++)) > 0;) o += i;
                                else F.warn("[tsdemuxer]: AC3 PES unknown PTS")
                            }, t.parseID3PES = function(e, t) {
                                if (void 0 !== t.pts) {
                                    var r = u({}, t, {
                                        type: this._videoTrack ? or.emsg : or.audioId3,
                                        duration: Number.POSITIVE_INFINITY
                                    });
                                    e.samples.push(r)
                                } else F.warn("[tsdemuxer]: ID3 PES unknown PTS")
                            }, e
                        }();

                    function Ui(e, t) {
                        return ((31 & e[t + 1]) << 8) + e[t + 2]
                    }

                    function Bi(e, t) {
                        return (31 & e[t + 10]) << 8 | e[t + 11]
                    }

                    function Gi(e, t, r, n) {
                        var i = {
                                audioPid: -1,
                                videoPid: -1,
                                id3Pid: -1,
                                segmentVideoCodec: "avc",
                                segmentAudioCodec: "aac"
                            },
                            a = t + 3 + ((15 & e[t + 1]) << 8 | e[t + 2]) - 4;
                        for (t += 12 + ((15 & e[t + 10]) << 8 | e[t + 11]); t < a;) {
                            var s = Ui(e, t),
                                o = (15 & e[t + 3]) << 8 | e[t + 4];
                            switch (e[t]) {
                                case 207:
                                    if (!n) {
                                        Vi("ADTS AAC");
                                        break
                                    }
                                case 15:
                                    -1 === i.audioPid && (i.audioPid = s);
                                    break;
                                case 21:
                                    -1 === i.id3Pid && (i.id3Pid = s);
                                    break;
                                case 219:
                                    if (!n) {
                                        Vi("H.264");
                                        break
                                    }
                                case 27:
                                    -1 === i.videoPid && (i.videoPid = s, i.segmentVideoCodec = "avc");
                                    break;
                                case 3:
                                case 4:
                                    r.mpeg || r.mp3 ? -1 === i.audioPid && (i.audioPid = s, i.segmentAudioCodec = "mp3") : F.log("MPEG audio found, not supported in this browser");
                                    break;
                                case 193:
                                    if (!n) {
                                        Vi("AC-3");
                                        break
                                    }
                                case 129:
                                    r.ac3 ? -1 === i.audioPid && (i.audioPid = s, i.segmentAudioCodec = "ac3") : F.log("AC-3 audio found, not supported in this browser");
                                    break;
                                case 6:
                                    if (-1 === i.audioPid && o > 0)
                                        for (var l = t + 5, u = o; u > 2;) {
                                            106 === e[l] && (!0 !== r.ac3 ? F.log("AC-3 audio found, not supported in this browser for now") : (i.audioPid = s, i.segmentAudioCodec = "ac3"));
                                            var c = e[l + 1] + 2;
                                            l += c, u -= c
                                        }
                                    break;
                                case 194:
                                case 135:
                                    F.warn("Unsupported EC-3 in M2TS found");
                                    break;
                                case 36:
                                    F.warn("Unsupported HEVC in M2TS found")
                            }
                            t += o + 5
                        }
                        return i
                    }

                    function Vi(e) {
                        F.log(e + " with AES-128-CBC encryption found in unencrypted stream")
                    }

                    function Hi(e) {
                        var t, r, n, i, a, s = 0,
                            o = e.data;
                        if (!e || 0 === e.size) return null;
                        for (; o[0].length < 19 && o.length > 1;) o[0] = rt(o[0], o[1]), o.splice(1, 1);
                        if (1 === ((t = o[0])[0] << 16) + (t[1] << 8) + t[2]) {
                            if ((r = (t[4] << 8) + t[5]) && r > e.size - 6) return null;
                            var l = t[7];
                            192 & l && (i = 536870912 * (14 & t[9]) + 4194304 * (255 & t[10]) + 16384 * (254 & t[11]) + 128 * (255 & t[12]) + (254 & t[13]) / 2, 64 & l ? i - (a = 536870912 * (14 & t[14]) + 4194304 * (255 & t[15]) + 16384 * (254 & t[16]) + 128 * (255 & t[17]) + (254 & t[18]) / 2) > 54e5 && (F.warn(Math.round((i - a) / 9e4) + "s delta between PTS and DTS, align them"), i = a) : a = i);
                            var u = (n = t[8]) + 9;
                            if (e.size <= u) return null;
                            e.size -= u;
                            for (var c = new Uint8Array(e.size), d = 0, h = o.length; d < h; d++) {
                                var f = (t = o[d]).byteLength;
                                if (u) {
                                    if (u > f) {
                                        u -= f;
                                        continue
                                    }
                                    t = t.subarray(u), f -= u, u = 0
                                }
                                c.set(t, s), s += f
                            }
                            return r && (r -= n + 3), {
                                data: c,
                                pts: i,
                                dts: a,
                                len: r
                            }
                        }
                        return null
                    }
                    var Ki = function(e) {
                            function t() {
                                return e.apply(this, arguments) || this
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.resetInitSegment = function(t, r, n, i) {
                                e.prototype.resetInitSegment.call(this, t, r, n, i), this._audioTrack = {
                                    container: "audio/mpeg",
                                    type: "audio",
                                    id: 2,
                                    pid: -1,
                                    sequenceNumber: 0,
                                    segmentCodec: "mp3",
                                    samples: [],
                                    manifestCodec: r,
                                    duration: i,
                                    inputTimeScale: 9e4,
                                    dropped: 0
                                }
                            }, t.probe = function(e) {
                                if (!e) return !1;
                                var t = ve(e, 0),
                                    r = (null == t ? void 0 : t.length) || 0;
                                if (t && 11 === e[r] && 119 === e[r + 1] && void 0 !== be(t) && Di(e, r) <= 16) return !1;
                                for (var n = e.length; r < n; r++)
                                    if (Li(e, r)) return F.log("MPEG Audio sync word found !"), !0;
                                return !1
                            }, r.canParse = function(e, t) {
                                return ki(e, t)
                            }, r.appendFrame = function(e, t, r) {
                                if (null !== this.basePTS) return bi(e, t, r, this.basePTS, this.frameIndex)
                            }, t
                        }(ti),
                        ji = function() {
                            function e() {}
                            return e.getSilentFrame = function(e, t) {
                                if ("mp4a.40.2" === e) {
                                    if (1 === t) return new Uint8Array([0, 200, 0, 128, 35, 128]);
                                    if (2 === t) return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                                    if (3 === t) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
                                    if (4 === t) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
                                    if (5 === t) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
                                    if (6 === t) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224])
                                } else {
                                    if (1 === t) return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                    if (2 === t) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
                                    if (3 === t) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94])
                                }
                            }, e
                        }(),
                        Yi = Math.pow(2, 32) - 1,
                        Wi = function() {
                            function e() {}
                            return e.init = function() {
                                var t;
                                for (t in e.types = {
                                        avc1: [],
                                        avcC: [],
                                        btrt: [],
                                        dinf: [],
                                        dref: [],
                                        esds: [],
                                        ftyp: [],
                                        hdlr: [],
                                        mdat: [],
                                        mdhd: [],
                                        mdia: [],
                                        mfhd: [],
                                        minf: [],
                                        moof: [],
                                        moov: [],
                                        mp4a: [],
                                        ".mp3": [],
                                        dac3: [],
                                        "ac-3": [],
                                        mvex: [],
                                        mvhd: [],
                                        pasp: [],
                                        sdtp: [],
                                        stbl: [],
                                        stco: [],
                                        stsc: [],
                                        stsd: [],
                                        stsz: [],
                                        stts: [],
                                        tfdt: [],
                                        tfhd: [],
                                        traf: [],
                                        trak: [],
                                        trun: [],
                                        trex: [],
                                        tkhd: [],
                                        vmhd: [],
                                        smhd: []
                                    }, e.types) e.types.hasOwnProperty(t) && (e.types[t] = [t.charCodeAt(0), t.charCodeAt(1), t.charCodeAt(2), t.charCodeAt(3)]);
                                var r = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]),
                                    n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
                                e.HDLR_TYPES = {
                                    video: r,
                                    audio: n
                                };
                                var i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]),
                                    a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                                e.STTS = e.STSC = e.STCO = a, e.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), e.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
                                var s = new Uint8Array([105, 115, 111, 109]),
                                    o = new Uint8Array([97, 118, 99, 49]),
                                    l = new Uint8Array([0, 0, 0, 1]);
                                e.FTYP = e.box(e.types.ftyp, s, l, s, o), e.DINF = e.box(e.types.dinf, e.box(e.types.dref, i))
                            }, e.box = function(e) {
                                for (var t = 8, r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), i = 1; i < r; i++) n[i - 1] = arguments[i];
                                for (var a = n.length, s = a; a--;) t += n[a].byteLength;
                                var o = new Uint8Array(t);
                                for (o[0] = t >> 24 & 255, o[1] = t >> 16 & 255, o[2] = t >> 8 & 255, o[3] = 255 & t, o.set(e, 4), a = 0, t = 8; a < s; a++) o.set(n[a], t), t += n[a].byteLength;
                                return o
                            }, e.hdlr = function(t) {
                                return e.box(e.types.hdlr, e.HDLR_TYPES[t])
                            }, e.mdat = function(t) {
                                return e.box(e.types.mdat, t)
                            }, e.mdhd = function(t, r) {
                                r *= t;
                                var n = Math.floor(r / (Yi + 1)),
                                    i = Math.floor(r % (Yi + 1));
                                return e.box(e.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, n >> 24, n >> 16 & 255, n >> 8 & 255, 255 & n, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 85, 196, 0, 0]))
                            }, e.mdia = function(t) {
                                return e.box(e.types.mdia, e.mdhd(t.timescale, t.duration), e.hdlr(t.type), e.minf(t))
                            }, e.mfhd = function(t) {
                                return e.box(e.types.mfhd, new Uint8Array([0, 0, 0, 0, t >> 24, t >> 16 & 255, t >> 8 & 255, 255 & t]))
                            }, e.minf = function(t) {
                                return "audio" === t.type ? e.box(e.types.minf, e.box(e.types.smhd, e.SMHD), e.DINF, e.stbl(t)) : e.box(e.types.minf, e.box(e.types.vmhd, e.VMHD), e.DINF, e.stbl(t))
                            }, e.moof = function(t, r, n) {
                                return e.box(e.types.moof, e.mfhd(t), e.traf(n, r))
                            }, e.moov = function(t) {
                                for (var r = t.length, n = []; r--;) n[r] = e.trak(t[r]);
                                return e.box.apply(null, [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)].concat(n).concat(e.mvex(t)))
                            }, e.mvex = function(t) {
                                for (var r = t.length, n = []; r--;) n[r] = e.trex(t[r]);
                                return e.box.apply(null, [e.types.mvex].concat(n))
                            }, e.mvhd = function(t, r) {
                                r *= t;
                                var n = Math.floor(r / (Yi + 1)),
                                    i = Math.floor(r % (Yi + 1)),
                                    a = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, 255 & t, n >> 24, n >> 16 & 255, n >> 8 & 255, 255 & n, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
                                return e.box(e.types.mvhd, a)
                            }, e.sdtp = function(t) {
                                var r, n, i = t.samples || [],
                                    a = new Uint8Array(4 + i.length);
                                for (r = 0; r < i.length; r++) n = i[r].flags, a[r + 4] = n.dependsOn << 4 | n.isDependedOn << 2 | n.hasRedundancy;
                                return e.box(e.types.sdtp, a)
                            }, e.stbl = function(t) {
                                return e.box(e.types.stbl, e.stsd(t), e.box(e.types.stts, e.STTS), e.box(e.types.stsc, e.STSC), e.box(e.types.stsz, e.STSZ), e.box(e.types.stco, e.STCO))
                            }, e.avc1 = function(t) {
                                var r, n, i, a = [],
                                    s = [];
                                for (r = 0; r < t.sps.length; r++) i = (n = t.sps[r]).byteLength, a.push(i >>> 8 & 255), a.push(255 & i), a = a.concat(Array.prototype.slice.call(n));
                                for (r = 0; r < t.pps.length; r++) i = (n = t.pps[r]).byteLength, s.push(i >>> 8 & 255), s.push(255 & i), s = s.concat(Array.prototype.slice.call(n));
                                var o = e.box(e.types.avcC, new Uint8Array([1, a[3], a[4], a[5], 255, 224 | t.sps.length].concat(a).concat([t.pps.length]).concat(s))),
                                    l = t.width,
                                    u = t.height,
                                    c = t.pixelRatio[0],
                                    d = t.pixelRatio[1];
                                return e.box(e.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l >> 8 & 255, 255 & l, u >> 8 & 255, 255 & u, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), o, e.box(e.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), e.box(e.types.pasp, new Uint8Array([c >> 24, c >> 16 & 255, c >> 8 & 255, 255 & c, d >> 24, d >> 16 & 255, d >> 8 & 255, 255 & d])))
                            }, e.esds = function(e) {
                                var t = e.config.length;
                                return new Uint8Array([0, 0, 0, 0, 3, 23 + t, 0, 1, 0, 4, 15 + t, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([t]).concat(e.config).concat([6, 1, 2]))
                            }, e.audioStsd = function(e) {
                                var t = e.samplerate;
                                return new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, e.channelCount, 0, 16, 0, 0, 0, 0, t >> 8 & 255, 255 & t, 0, 0])
                            }, e.mp4a = function(t) {
                                return e.box(e.types.mp4a, e.audioStsd(t), e.box(e.types.esds, e.esds(t)))
                            }, e.mp3 = function(t) {
                                return e.box(e.types[".mp3"], e.audioStsd(t))
                            }, e.ac3 = function(t) {
                                return e.box(e.types["ac-3"], e.audioStsd(t), e.box(e.types.dac3, t.config))
                            }, e.stsd = function(t) {
                                return "audio" === t.type ? "mp3" === t.segmentCodec && "mp3" === t.codec ? e.box(e.types.stsd, e.STSD, e.mp3(t)) : "ac3" === t.segmentCodec ? e.box(e.types.stsd, e.STSD, e.ac3(t)) : e.box(e.types.stsd, e.STSD, e.mp4a(t)) : e.box(e.types.stsd, e.STSD, e.avc1(t))
                            }, e.tkhd = function(t) {
                                var r = t.id,
                                    n = t.duration * t.timescale,
                                    i = t.width,
                                    a = t.height,
                                    s = Math.floor(n / (Yi + 1)),
                                    o = Math.floor(n % (Yi + 1));
                                return e.box(e.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, r >> 24 & 255, r >> 16 & 255, r >> 8 & 255, 255 & r, 0, 0, 0, 0, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s, o >> 24, o >> 16 & 255, o >> 8 & 255, 255 & o, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, i >> 8 & 255, 255 & i, 0, 0, a >> 8 & 255, 255 & a, 0, 0]))
                            }, e.traf = function(t, r) {
                                var n = e.sdtp(t),
                                    i = t.id,
                                    a = Math.floor(r / (Yi + 1)),
                                    s = Math.floor(r % (Yi + 1));
                                return e.box(e.types.traf, e.box(e.types.tfhd, new Uint8Array([0, 0, 0, 0, i >> 24, i >> 16 & 255, i >> 8 & 255, 255 & i])), e.box(e.types.tfdt, new Uint8Array([1, 0, 0, 0, a >> 24, a >> 16 & 255, a >> 8 & 255, 255 & a, s >> 24, s >> 16 & 255, s >> 8 & 255, 255 & s])), e.trun(t, n.length + 16 + 20 + 8 + 16 + 8 + 8), n)
                            }, e.trak = function(t) {
                                return t.duration = t.duration || 4294967295, e.box(e.types.trak, e.tkhd(t), e.mdia(t))
                            }, e.trex = function(t) {
                                var r = t.id;
                                return e.box(e.types.trex, new Uint8Array([0, 0, 0, 0, r >> 24, r >> 16 & 255, r >> 8 & 255, 255 & r, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]))
                            }, e.trun = function(t, r) {
                                var n, i, a, s, o, l, u = t.samples || [],
                                    c = u.length,
                                    d = 12 + 16 * c,
                                    h = new Uint8Array(d);
                                for (r += 8 + d, h.set(["video" === t.type ? 1 : 0, 0, 15, 1, c >>> 24 & 255, c >>> 16 & 255, c >>> 8 & 255, 255 & c, r >>> 24 & 255, r >>> 16 & 255, r >>> 8 & 255, 255 & r], 0), n = 0; n < c; n++) a = (i = u[n]).duration, s = i.size, o = i.flags, l = i.cts, h.set([a >>> 24 & 255, a >>> 16 & 255, a >>> 8 & 255, 255 & a, s >>> 24 & 255, s >>> 16 & 255, s >>> 8 & 255, 255 & s, o.isLeading << 2 | o.dependsOn, o.isDependedOn << 6 | o.hasRedundancy << 4 | o.paddingValue << 1 | o.isNonSync, 61440 & o.degradPrio, 15 & o.degradPrio, l >>> 24 & 255, l >>> 16 & 255, l >>> 8 & 255, 255 & l], 12 + 16 * n);
                                return e.box(e.types.trun, h)
                            }, e.initSegment = function(t) {
                                e.types || e.init();
                                var r = e.moov(t);
                                return rt(e.FTYP, r)
                            }, e
                        }();
                    Wi.types = void 0, Wi.HDLR_TYPES = void 0, Wi.STTS = void 0, Wi.STSC = void 0, Wi.STCO = void 0, Wi.STSZ = void 0, Wi.VMHD = void 0, Wi.SMHD = void 0, Wi.STSD = void 0, Wi.FTYP = void 0, Wi.DINF = void 0;
                    var qi = 9e4;

                    function zi(e, t, r, n) {
                        void 0 === r && (r = 1), void 0 === n && (n = !1);
                        var i = e * t * r;
                        return n ? Math.round(i) : i
                    }

                    function Xi(e, t, r, n) {
                        return void 0 === r && (r = 1), void 0 === n && (n = !1), zi(e, t, 1 / r, n)
                    }

                    function $i(e, t) {
                        return void 0 === t && (t = !1), zi(e, 1e3, 1 / qi, t)
                    }

                    function Ji(e, t) {
                        return void 0 === t && (t = 1), zi(e, qi, 1 / t)
                    }
                    var Qi = 1e4,
                        Zi = 1024,
                        ea = 1152,
                        ta = 1536,
                        ra = null,
                        na = null,
                        ia = function() {
                            function e(e, t, r, n) {
                                if (this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.ISGenerated = !1, this._initPTS = null, this._initDTS = null, this.nextAvcDts = null, this.nextAudioPts = null, this.videoSampleDuration = null, this.isAudioContiguous = !1, this.isVideoContiguous = !1, this.videoTrackConfig = void 0, this.observer = e, this.config = t, this.typeSupported = r, this.ISGenerated = !1, null === ra) {
                                    var i = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
                                    ra = i ? parseInt(i[1]) : 0
                                }
                                if (null === na) {
                                    var a = navigator.userAgent.match(/Safari\/(\d+)/i);
                                    na = a ? parseInt(a[1]) : 0
                                }
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null
                            }, t.resetTimeStamp = function(e) {
                                F.log("[mp4-remuxer]: initPTS & initDTS reset"), this._initPTS = this._initDTS = e
                            }, t.resetNextTimestamp = function() {
                                F.log("[mp4-remuxer]: reset next timestamp"), this.isVideoContiguous = !1, this.isAudioContiguous = !1
                            }, t.resetInitSegment = function() {
                                F.log("[mp4-remuxer]: ISGenerated flag reset"), this.ISGenerated = !1, this.videoTrackConfig = void 0
                            }, t.getVideoStartPts = function(e) {
                                var t = !1,
                                    r = e.reduce((function(e, r) {
                                        var n = r.pts - e;
                                        return n < -4294967296 ? (t = !0, aa(e, r.pts)) : n > 0 ? e : r.pts
                                    }), e[0].pts);
                                return t && F.debug("PTS rollover detected"), r
                            }, t.remux = function(e, t, r, n, i, a, s, o) {
                                var l, u, c, d, h, f, g = i,
                                    p = i,
                                    m = e.pid > -1,
                                    v = t.pid > -1,
                                    y = t.samples.length,
                                    T = e.samples.length > 0,
                                    b = s && y > 0 || y > 1;
                                if ((!m || T) && (!v || b) || this.ISGenerated || s) {
                                    if (this.ISGenerated) {
                                        var E, S, A, k, L = this.videoTrackConfig;
                                        !L || t.width === L.width && t.height === L.height && (null == (E = t.pixelRatio) ? void 0 : E[0]) === (null == (S = L.pixelRatio) ? void 0 : S[0]) && (null == (A = t.pixelRatio) ? void 0 : A[1]) === (null == (k = L.pixelRatio) ? void 0 : k[1]) || this.resetInitSegment()
                                    } else c = this.generateIS(e, t, i, a);
                                    var R, I = this.isVideoContiguous,
                                        w = -1;
                                    if (b && (w = sa(t.samples), !I && this.config.forceKeyFrameOnDiscontinuity))
                                        if (f = !0, w > 0) {
                                            F.warn("[mp4-remuxer]: Dropped " + w + " out of " + y + " video samples due to a missing keyframe");
                                            var D = this.getVideoStartPts(t.samples);
                                            t.samples = t.samples.slice(w), t.dropped += w, R = p += (t.samples[0].pts - D) / t.inputTimeScale
                                        } else -1 === w && (F.warn("[mp4-remuxer]: No keyframe found out of " + y + " video samples"), f = !1);
                                    if (this.ISGenerated) {
                                        if (T && b) {
                                            var C = this.getVideoStartPts(t.samples),
                                                x = (aa(e.samples[0].pts, C) - C) / t.inputTimeScale;
                                            g += Math.max(0, x), p += Math.max(0, -x)
                                        }
                                        if (T) {
                                            if (e.samplerate || (F.warn("[mp4-remuxer]: regenerate InitSegment as audio detected"), c = this.generateIS(e, t, i, a)), u = this.remuxAudio(e, g, this.isAudioContiguous, a, v || b || o === $t.AUDIO ? p : void 0), b) {
                                                var _ = u ? u.endPTS - u.startPTS : 0;
                                                t.inputTimeScale || (F.warn("[mp4-remuxer]: regenerate InitSegment as video detected"), c = this.generateIS(e, t, i, a)), l = this.remuxVideo(t, p, I, _)
                                            }
                                        } else b && (l = this.remuxVideo(t, p, I, 0));
                                        l && (l.firstKeyFrame = w, l.independent = -1 !== w, l.firstKeyFramePTS = R)
                                    }
                                }
                                return this.ISGenerated && this._initPTS && this._initDTS && (r.samples.length && (h = oa(r, i, this._initPTS, this._initDTS)), n.samples.length && (d = la(n, i, this._initPTS))), {
                                    audio: u,
                                    video: l,
                                    initSegment: c,
                                    independent: f,
                                    text: d,
                                    id3: h
                                }
                            }, t.generateIS = function(e, t, r, n) {
                                var i, a, s, o = e.samples,
                                    l = t.samples,
                                    u = this.typeSupported,
                                    c = {},
                                    d = this._initPTS,
                                    h = !d || n,
                                    f = "audio/mp4";
                                if (h && (i = a = 1 / 0), e.config && o.length) {
                                    switch (e.timescale = e.samplerate, e.segmentCodec) {
                                        case "mp3":
                                            u.mpeg ? (f = "audio/mpeg", e.codec = "") : u.mp3 && (e.codec = "mp3");
                                            break;
                                        case "ac3":
                                            e.codec = "ac-3"
                                    }
                                    c.audio = {
                                        id: "audio",
                                        container: f,
                                        codec: e.codec,
                                        initSegment: "mp3" === e.segmentCodec && u.mpeg ? new Uint8Array(0) : Wi.initSegment([e]),
                                        metadata: {
                                            channelCount: e.channelCount
                                        }
                                    }, h && (s = e.inputTimeScale, d && s === d.timescale ? h = !1 : i = a = o[0].pts - Math.round(s * r))
                                }
                                if (t.sps && t.pps && l.length) {
                                    if (t.timescale = t.inputTimeScale, c.video = {
                                            id: "main",
                                            container: "video/mp4",
                                            codec: t.codec,
                                            initSegment: Wi.initSegment([t]),
                                            metadata: {
                                                width: t.width,
                                                height: t.height
                                            }
                                        }, h)
                                        if (s = t.inputTimeScale, d && s === d.timescale) h = !1;
                                        else {
                                            var g = this.getVideoStartPts(l),
                                                p = Math.round(s * r);
                                            a = Math.min(a, aa(l[0].dts, g) - p), i = Math.min(i, g - p)
                                        }
                                    this.videoTrackConfig = {
                                        width: t.width,
                                        height: t.height,
                                        pixelRatio: t.pixelRatio
                                    }
                                }
                                if (Object.keys(c).length) return this.ISGenerated = !0, h ? (this._initPTS = {
                                    baseTime: i,
                                    timescale: s
                                }, this._initDTS = {
                                    baseTime: a,
                                    timescale: s
                                }) : i = s = void 0, {
                                    tracks: c,
                                    initPTS: i,
                                    timescale: s
                                }
                            }, t.remuxVideo = function(e, t, r, n) {
                                var i, a, s = e.inputTimeScale,
                                    o = e.samples,
                                    l = [],
                                    c = o.length,
                                    d = this._initPTS,
                                    h = this.nextAvcDts,
                                    f = 8,
                                    g = this.videoSampleDuration,
                                    p = Number.POSITIVE_INFINITY,
                                    m = Number.NEGATIVE_INFINITY,
                                    v = !1;
                                if (!r || null === h) {
                                    var y = t * s,
                                        T = o[0].pts - aa(o[0].dts, o[0].pts);
                                    ra && null !== h && Math.abs(y - T - h) < 15e3 ? r = !0 : h = y - T
                                }
                                for (var b = d.baseTime * s / d.timescale, E = 0; E < c; E++) {
                                    var S = o[E];
                                    S.pts = aa(S.pts - b, h), S.dts = aa(S.dts - b, h), S.dts < o[E > 0 ? E - 1 : E].dts && (v = !0)
                                }
                                v && o.sort((function(e, t) {
                                    var r = e.dts - t.dts,
                                        n = e.pts - t.pts;
                                    return r || n
                                })), i = o[0].dts;
                                var A = (a = o[o.length - 1].dts) - i,
                                    k = A ? Math.round(A / (c - 1)) : g || e.inputTimeScale / 30;
                                if (r) {
                                    var L = i - h,
                                        R = L > k,
                                        C = L < -1;
                                    if ((R || C) && (R ? F.warn("AVC: " + $i(L, !0) + " ms (" + L + "dts) hole between fragments detected at " + t.toFixed(3)) : F.warn("AVC: " + $i(-L, !0) + " ms (" + L + "dts) overlapping between fragments detected at " + t.toFixed(3)), !C || h >= o[0].pts || ra)) {
                                        i = h;
                                        var x = o[0].pts - L;
                                        if (R) o[0].dts = i, o[0].pts = x;
                                        else
                                            for (var _ = 0; _ < o.length && !(o[_].dts > x); _++) o[_].dts -= L, o[_].pts -= L;
                                        F.log("Video: Initial PTS/DTS adjusted: " + $i(x, !0) + "/" + $i(i, !0) + ", delta: " + $i(L, !0) + " ms")
                                    }
                                }
                                for (var O = 0, P = 0, M = i = Math.max(0, i), N = 0; N < c; N++) {
                                    for (var U = o[N], B = U.units, G = B.length, V = 0, H = 0; H < G; H++) V += B[H].data.length;
                                    P += V, O += G, U.length = V, U.dts < M ? (U.dts = M, M += k / 4 | 0 || 1) : M = U.dts, p = Math.min(U.pts, p), m = Math.max(U.pts, m)
                                }
                                a = o[c - 1].dts;
                                var K, j = P + 4 * O + 8;
                                try {
                                    K = new Uint8Array(j)
                                } catch (e) {
                                    return void this.observer.emit(I.ERROR, I.ERROR, {
                                        type: w.MUX_ERROR,
                                        details: D.REMUX_ALLOC_ERROR,
                                        fatal: !1,
                                        error: e,
                                        bytes: j,
                                        reason: "fail allocating video mdat " + j
                                    })
                                }
                                var Y = new DataView(K.buffer);
                                Y.setUint32(0, j), K.set(Wi.types.mdat, 4);
                                for (var W = !1, q = Number.POSITIVE_INFINITY, z = Number.POSITIVE_INFINITY, X = Number.NEGATIVE_INFINITY, $ = Number.NEGATIVE_INFINITY, J = 0; J < c; J++) {
                                    for (var Q = o[J], Z = Q.units, ee = 0, te = 0, re = Z.length; te < re; te++) {
                                        var ne = Z[te],
                                            ie = ne.data,
                                            ae = ne.data.byteLength;
                                        Y.setUint32(f, ae), f += 4, K.set(ie, f), f += ae, ee += 4 + ae
                                    }
                                    var se = void 0;
                                    if (J < c - 1) g = o[J + 1].dts - Q.dts, se = o[J + 1].pts - Q.pts;
                                    else {
                                        var oe = this.config,
                                            le = J > 0 ? Q.dts - o[J - 1].dts : k;
                                        if (se = J > 0 ? Q.pts - o[J - 1].pts : k, oe.stretchShortVideoTrack && null !== this.nextAudioPts) {
                                            var ue = Math.floor(oe.maxBufferHole * s),
                                                ce = (n ? p + n * s : this.nextAudioPts) - Q.pts;
                                            ce > ue ? ((g = ce - le) < 0 ? g = le : W = !0, F.log("[mp4-remuxer]: It is approximately " + ce / 90 + " ms to the next segment; using duration " + g / 90 + " ms for the last video frame.")) : g = le
                                        } else g = le
                                    }
                                    var de = Math.round(Q.pts - Q.dts);
                                    q = Math.min(q, g), X = Math.max(X, g), z = Math.min(z, se), $ = Math.max($, se), l.push(new ca(Q.key, g, ee, de))
                                }
                                if (l.length)
                                    if (ra) {
                                        if (ra < 70) {
                                            var he = l[0].flags;
                                            he.dependsOn = 2, he.isNonSync = 0
                                        }
                                    } else if (na && $ - z < X - q && k / X < .025 && 0 === l[0].cts) {
                                    F.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
                                    for (var fe = i, ge = 0, pe = l.length; ge < pe; ge++) {
                                        var me = fe + l[ge].duration,
                                            ve = fe + l[ge].cts;
                                        if (ge < pe - 1) {
                                            var ye = me + l[ge + 1].cts;
                                            l[ge].duration = ye - ve
                                        } else l[ge].duration = ge ? l[ge - 1].duration : k;
                                        l[ge].cts = 0, fe = me
                                    }
                                }
                                g = W || !g ? k : g, this.nextAvcDts = h = a + g, this.videoSampleDuration = g, this.isVideoContiguous = !0;
                                var Te = {
                                    data1: Wi.moof(e.sequenceNumber++, i, u({}, e, {
                                        samples: l
                                    })),
                                    data2: K,
                                    startPTS: p / s,
                                    endPTS: (m + g) / s,
                                    startDTS: i / s,
                                    endDTS: h / s,
                                    type: "video",
                                    hasAudio: !1,
                                    hasVideo: !0,
                                    nb: l.length,
                                    dropped: e.dropped
                                };
                                return e.samples = [], e.dropped = 0, Te
                            }, t.getSamplesPerFrame = function(e) {
                                switch (e.segmentCodec) {
                                    case "mp3":
                                        return ea;
                                    case "ac3":
                                        return ta;
                                    default:
                                        return Zi
                                }
                            }, t.remuxAudio = function(e, t, r, n, i) {
                                var a = e.inputTimeScale,
                                    s = a / (e.samplerate ? e.samplerate : a),
                                    o = this.getSamplesPerFrame(e),
                                    l = o * s,
                                    c = this._initPTS,
                                    d = "mp3" === e.segmentCodec && this.typeSupported.mpeg,
                                    h = [],
                                    f = void 0 !== i,
                                    g = e.samples,
                                    p = d ? 0 : 8,
                                    m = this.nextAudioPts || -1,
                                    v = t * a,
                                    y = c.baseTime * a / c.timescale;
                                if (this.isAudioContiguous = r = r || g.length && m > 0 && (n && Math.abs(v - m) < 9e3 || Math.abs(aa(g[0].pts - y, v) - m) < 20 * l), g.forEach((function(e) {
                                        e.pts = aa(e.pts - y, v)
                                    })), !r || m < 0) {
                                    if (g = g.filter((function(e) {
                                            return e.pts >= 0
                                        })), !g.length) return;
                                    m = 0 === i ? 0 : n && !f ? Math.max(0, v) : g[0].pts
                                }
                                if ("aac" === e.segmentCodec)
                                    for (var T = this.config.maxAudioFramesDrift, b = 0, E = m; b < g.length; b++) {
                                        var S = g[b],
                                            A = S.pts,
                                            k = A - E,
                                            L = Math.abs(1e3 * k / a);
                                        if (k <= -T * l && f) 0 === b && (F.warn("Audio frame @ " + (A / a).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * k / a) + " ms."), this.nextAudioPts = m = E = A);
                                        else if (k >= T * l && L < Qi && f) {
                                            var R = Math.round(k / l);
                                            (E = A - R * l) < 0 && (R--, E += l), 0 === b && (this.nextAudioPts = m = E), F.warn("[mp4-remuxer]: Injecting " + R + " audio frame @ " + (E / a).toFixed(3) + "s due to " + Math.round(1e3 * k / a) + " ms gap.");
                                            for (var C = 0; C < R; C++) {
                                                var x = Math.max(E, 0),
                                                    _ = ji.getSilentFrame(e.manifestCodec || e.codec, e.channelCount);
                                                _ || (F.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."), _ = S.unit.subarray()), g.splice(b, 0, {
                                                    unit: _,
                                                    pts: x
                                                }), E += l, b++
                                            }
                                        }
                                        S.pts = E, E += l
                                    }
                                for (var O, P = null, M = null, N = 0, U = g.length; U--;) N += g[U].unit.byteLength;
                                for (var B = 0, G = g.length; B < G; B++) {
                                    var V = g[B],
                                        H = V.unit,
                                        K = V.pts;
                                    if (null !== M) h[B - 1].duration = Math.round((K - M) / s);
                                    else {
                                        if (r && "aac" === e.segmentCodec && (K = m), P = K, !(N > 0)) return;
                                        N += p;
                                        try {
                                            O = new Uint8Array(N)
                                        } catch (e) {
                                            return void this.observer.emit(I.ERROR, I.ERROR, {
                                                type: w.MUX_ERROR,
                                                details: D.REMUX_ALLOC_ERROR,
                                                fatal: !1,
                                                error: e,
                                                bytes: N,
                                                reason: "fail allocating audio mdat " + N
                                            })
                                        }
                                        d || (new DataView(O.buffer).setUint32(0, N), O.set(Wi.types.mdat, 4))
                                    }
                                    O.set(H, p);
                                    var j = H.byteLength;
                                    p += j, h.push(new ca(!0, o, j, 0)), M = K
                                }
                                var Y = h.length;
                                if (Y) {
                                    var W = h[h.length - 1];
                                    this.nextAudioPts = m = M + s * W.duration;
                                    var q = d ? new Uint8Array(0) : Wi.moof(e.sequenceNumber++, P / s, u({}, e, {
                                        samples: h
                                    }));
                                    e.samples = [];
                                    var z = P / a,
                                        X = m / a,
                                        $ = {
                                            data1: q,
                                            data2: O,
                                            startPTS: z,
                                            endPTS: X,
                                            startDTS: z,
                                            endDTS: X,
                                            type: "audio",
                                            hasAudio: !0,
                                            hasVideo: !1,
                                            nb: Y
                                        };
                                    return this.isAudioContiguous = !0, $
                                }
                            }, t.remuxEmptyAudio = function(e, t, r, n) {
                                var i = e.inputTimeScale,
                                    a = i / (e.samplerate ? e.samplerate : i),
                                    s = this.nextAudioPts,
                                    o = this._initDTS,
                                    l = 9e4 * o.baseTime / o.timescale,
                                    u = (null !== s ? s : n.startDTS * i) + l,
                                    c = n.endDTS * i + l,
                                    d = a * Zi,
                                    h = Math.ceil((c - u) / d),
                                    f = ji.getSilentFrame(e.manifestCodec || e.codec, e.channelCount);
                                if (F.warn("[mp4-remuxer]: remux empty Audio"), f) {
                                    for (var g = [], p = 0; p < h; p++) {
                                        var m = u + p * d;
                                        g.push({
                                            unit: f,
                                            pts: m,
                                            dts: m
                                        })
                                    }
                                    return e.samples = g, this.remuxAudio(e, t, r, !1)
                                }
                                F.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec")
                            }, e
                        }();

                    function aa(e, t) {
                        var r;
                        if (null === t) return e;
                        for (r = t < e ? -8589934592 : 8589934592; Math.abs(e - t) > 4294967296;) e += r;
                        return e
                    }

                    function sa(e) {
                        for (var t = 0; t < e.length; t++)
                            if (e[t].key) return t;
                        return -1
                    }

                    function oa(e, t, r, n) {
                        var i = e.samples.length;
                        if (i) {
                            for (var a = e.inputTimeScale, s = 0; s < i; s++) {
                                var o = e.samples[s];
                                o.pts = aa(o.pts - r.baseTime * a / r.timescale, t * a) / a, o.dts = aa(o.dts - n.baseTime * a / n.timescale, t * a) / a
                            }
                            var l = e.samples;
                            return e.samples = [], {
                                samples: l
                            }
                        }
                    }

                    function la(e, t, r) {
                        var n = e.samples.length;
                        if (n) {
                            for (var i = e.inputTimeScale, a = 0; a < n; a++) {
                                var s = e.samples[a];
                                s.pts = aa(s.pts - r.baseTime * i / r.timescale, t * i) / i
                            }
                            e.samples.sort((function(e, t) {
                                return e.pts - t.pts
                            }));
                            var o = e.samples;
                            return e.samples = [], {
                                samples: o
                            }
                        }
                    }
                    var ua, ca = function(e, t, r, n) {
                            this.size = void 0, this.duration = void 0, this.cts = void 0, this.flags = void 0, this.duration = t, this.size = r, this.cts = n, this.flags = {
                                isLeading: 0,
                                isDependedOn: 0,
                                hasRedundancy: 0,
                                degradPrio: 0,
                                dependsOn: e ? 2 : 1,
                                isNonSync: e ? 0 : 1
                            }
                        },
                        da = function() {
                            function e() {
                                this.emitInitSegment = !1, this.audioCodec = void 0, this.videoCodec = void 0, this.initData = void 0, this.initPTS = null, this.initTracks = void 0, this.lastEndTime = null
                            }
                            var t = e.prototype;
                            return t.destroy = function() {}, t.resetTimeStamp = function(e) {
                                this.initPTS = e, this.lastEndTime = null
                            }, t.resetNextTimestamp = function() {
                                this.lastEndTime = null
                            }, t.resetInitSegment = function(e, t, r, n) {
                                this.audioCodec = t, this.videoCodec = r, this.generateInitSegment(Xe(e, n)), this.emitInitSegment = !0
                            }, t.generateInitSegment = function(e) {
                                var t = this.audioCodec,
                                    r = this.videoCodec;
                                if (null == e || !e.byteLength) return this.initTracks = void 0, void(this.initData = void 0);
                                var n = this.initData = je(e);
                                n.audio && (t = fa(n.audio, j.AUDIO)), n.video && (r = fa(n.video, j.VIDEO));
                                var i = {};
                                n.audio && n.video ? i.audiovideo = {
                                    container: "video/mp4",
                                    codec: t + "," + r,
                                    initSegment: e,
                                    id: "main"
                                } : n.audio ? i.audio = {
                                    container: "audio/mp4",
                                    codec: t,
                                    initSegment: e,
                                    id: "audio"
                                } : n.video ? i.video = {
                                    container: "video/mp4",
                                    codec: r,
                                    initSegment: e,
                                    id: "main"
                                } : F.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."), this.initTracks = i
                            }, t.remux = function(e, t, r, n, i, a) {
                                var s, o, l = this.initPTS,
                                    u = this.lastEndTime,
                                    c = {
                                        audio: void 0,
                                        video: void 0,
                                        text: n,
                                        id3: r,
                                        initSegment: void 0
                                    };
                                k(u) || (u = this.lastEndTime = i || 0);
                                var d = t.samples;
                                if (null == d || !d.length) return c;
                                var h = {
                                        initPTS: void 0,
                                        timescale: 1
                                    },
                                    f = this.initData;
                                if (null != (s = f) && s.length || (this.generateInitSegment(d), f = this.initData), null == (o = f) || !o.length) return F.warn("[passthrough-remuxer.ts]: Failed to generate initSegment."), c;
                                this.emitInitSegment && (h.tracks = this.initTracks, this.emitInitSegment = !1);
                                var g = Qe(d, f),
                                    p = Je(f, d),
                                    m = null === p ? i : p;
                                (ha(l, m, i, g) || h.timescale !== l.timescale && a) && (h.initPTS = m - i, l && 1 === l.timescale && F.warn("Adjusting initPTS by " + (h.initPTS - l.baseTime)), this.initPTS = l = {
                                    baseTime: h.initPTS,
                                    timescale: 1
                                });
                                var v = e ? m - l.baseTime / l.timescale : u,
                                    y = v + g;
                                et(f, d, l.baseTime / l.timescale), g > 0 ? this.lastEndTime = y : (F.warn("Duration parsed from mp4 should be greater than zero"), this.resetNextTimestamp());
                                var T = !!f.audio,
                                    b = !!f.video,
                                    E = "";
                                T && (E += "audio"), b && (E += "video");
                                var S = {
                                    data1: d,
                                    startPTS: v,
                                    startDTS: v,
                                    endPTS: y,
                                    endDTS: y,
                                    type: E,
                                    hasAudio: T,
                                    hasVideo: b,
                                    nb: 1,
                                    dropped: 0
                                };
                                return c.audio = "audio" === S.type ? S : void 0, c.video = "audio" !== S.type ? S : void 0, c.initSegment = h, c.id3 = oa(r, i, l, l), n.samples.length && (c.text = la(n, i, l)), c
                            }, e
                        }();

                    function ha(e, t, r, n) {
                        if (null === e) return !0;
                        var i = Math.max(n, 1),
                            a = t - e.baseTime / e.timescale;
                        return Math.abs(a - r) > i
                    }

                    function fa(e, t) {
                        var r = null == e ? void 0 : e.codec;
                        if (r && r.length > 4) return r;
                        if (t === j.AUDIO) {
                            if ("ec-3" === r || "ac-3" === r || "alac" === r) return r;
                            if ("fLaC" === r || "Opus" === r) return _t(r, !1);
                            var n = "mp4a.40.5";
                            return F.info('Parsed audio codec "' + r + '" or audio object type not handled. Using "' + n + '"'), n
                        }
                        return F.warn('Unhandled video codec "' + r + '"'), "hvc1" === r || "hev1" === r ? "hvc1.1.6.L120.90" : "av01" === r ? "av01.0.04M.08" : "avc1.42e01e"
                    }
                    try {
                        ua = self.performance.now.bind(self.performance)
                    } catch (e) {
                        F.debug("Unable to use Performance API on this environment"), ua = null == te ? void 0 : te.Date.now
                    }
                    var ga = [{
                        demux: wi,
                        remux: da
                    }, {
                        demux: Ni,
                        remux: ia
                    }, {
                        demux: Ri,
                        remux: ia
                    }, {
                        demux: Ki,
                        remux: ia
                    }];
                    ga.splice(2, 0, {
                        demux: Ci,
                        remux: ia
                    });
                    var pa = function() {
                        function e(e, t, r, n, i) {
                            this.async = !1, this.observer = void 0, this.typeSupported = void 0, this.config = void 0, this.vendor = void 0, this.id = void 0, this.demuxer = void 0, this.remuxer = void 0, this.decrypter = void 0, this.probe = void 0, this.decryptionPromise = null, this.transmuxConfig = void 0, this.currentTransmuxState = void 0, this.observer = e, this.typeSupported = t, this.config = r, this.vendor = n, this.id = i
                        }
                        var t = e.prototype;
                        return t.configure = function(e) {
                            this.transmuxConfig = e, this.decrypter && this.decrypter.reset()
                        }, t.push = function(e, t, r, n) {
                            var i = this,
                                a = r.transmuxing;
                            a.executeStart = ua();
                            var s = new Uint8Array(e),
                                o = this.currentTransmuxState,
                                l = this.transmuxConfig;
                            n && (this.currentTransmuxState = n);
                            var u = n || o,
                                c = u.contiguous,
                                d = u.discontinuity,
                                h = u.trackSwitch,
                                f = u.accurateTimeOffset,
                                g = u.timeOffset,
                                p = u.initSegmentChange,
                                m = l.audioCodec,
                                v = l.videoCodec,
                                y = l.defaultInitPts,
                                T = l.duration,
                                b = l.initSegmentData,
                                E = ma(s, t);
                            if (E && "AES-128" === E.method) {
                                var S = this.getDecrypter();
                                if (!S.isSync()) return this.decryptionPromise = S.webCryptoDecrypt(s, E.key.buffer, E.iv.buffer).then((function(e) {
                                    var t = i.push(e, null, r);
                                    return i.decryptionPromise = null, t
                                })), this.decryptionPromise;
                                var A = S.softwareDecrypt(s, E.key.buffer, E.iv.buffer);
                                if (r.part > -1 && (A = S.flush()), !A) return a.executeEnd = ua(), va(r);
                                s = new Uint8Array(A)
                            }
                            var k = this.needsProbing(d, h);
                            if (k) {
                                var L = this.configureTransmuxer(s);
                                if (L) return F.warn("[transmuxer] " + L.message), this.observer.emit(I.ERROR, I.ERROR, {
                                    type: w.MEDIA_ERROR,
                                    details: D.FRAG_PARSING_ERROR,
                                    fatal: !1,
                                    error: L,
                                    reason: L.message
                                }), a.executeEnd = ua(), va(r)
                            }(d || h || p || k) && this.resetInitSegment(b, m, v, T, t), (d || p || k) && this.resetInitialTimestamp(y), c || this.resetContiguity();
                            var R = this.transmux(s, E, g, f, r),
                                C = this.currentTransmuxState;
                            return C.contiguous = !0, C.discontinuity = !1, C.trackSwitch = !1, a.executeEnd = ua(), R
                        }, t.flush = function(e) {
                            var t = this,
                                r = e.transmuxing;
                            r.executeStart = ua();
                            var n = this.decrypter,
                                i = this.currentTransmuxState,
                                a = this.decryptionPromise;
                            if (a) return a.then((function() {
                                return t.flush(e)
                            }));
                            var s = [],
                                o = i.timeOffset;
                            if (n) {
                                var l = n.flush();
                                l && s.push(this.push(l, null, e))
                            }
                            var u = this.demuxer,
                                c = this.remuxer;
                            if (!u || !c) return r.executeEnd = ua(), [va(e)];
                            var d = u.flush(o);
                            return ya(d) ? d.then((function(r) {
                                return t.flushRemux(s, r, e), s
                            })) : (this.flushRemux(s, d, e), s)
                        }, t.flushRemux = function(e, t, r) {
                            var n = t.audioTrack,
                                i = t.videoTrack,
                                a = t.id3Track,
                                s = t.textTrack,
                                o = this.currentTransmuxState,
                                l = o.accurateTimeOffset,
                                u = o.timeOffset;
                            F.log("[transmuxer.ts]: Flushed fragment " + r.sn + (r.part > -1 ? " p: " + r.part : "") + " of level " + r.level);
                            var c = this.remuxer.remux(n, i, a, s, u, l, !0, this.id);
                            e.push({
                                remuxResult: c,
                                chunkMeta: r
                            }), r.transmuxing.executeEnd = ua()
                        }, t.resetInitialTimestamp = function(e) {
                            var t = this.demuxer,
                                r = this.remuxer;
                            t && r && (t.resetTimeStamp(e), r.resetTimeStamp(e))
                        }, t.resetContiguity = function() {
                            var e = this.demuxer,
                                t = this.remuxer;
                            e && t && (e.resetContiguity(), t.resetNextTimestamp())
                        }, t.resetInitSegment = function(e, t, r, n, i) {
                            var a = this.demuxer,
                                s = this.remuxer;
                            a && s && (a.resetInitSegment(e, t, r, n), s.resetInitSegment(e, t, r, i))
                        }, t.destroy = function() {
                            this.demuxer && (this.demuxer.destroy(), this.demuxer = void 0), this.remuxer && (this.remuxer.destroy(), this.remuxer = void 0)
                        }, t.transmux = function(e, t, r, n, i) {
                            return t && "SAMPLE-AES" === t.method ? this.transmuxSampleAes(e, t, r, n, i) : this.transmuxUnencrypted(e, r, n, i)
                        }, t.transmuxUnencrypted = function(e, t, r, n) {
                            var i = this.demuxer.demux(e, t, !1, !this.config.progressive),
                                a = i.audioTrack,
                                s = i.videoTrack,
                                o = i.id3Track,
                                l = i.textTrack;
                            return {
                                remuxResult: this.remuxer.remux(a, s, o, l, t, r, !1, this.id),
                                chunkMeta: n
                            }
                        }, t.transmuxSampleAes = function(e, t, r, n, i) {
                            var a = this;
                            return this.demuxer.demuxSampleAes(e, t, r).then((function(e) {
                                return {
                                    remuxResult: a.remuxer.remux(e.audioTrack, e.videoTrack, e.id3Track, e.textTrack, r, n, !1, a.id),
                                    chunkMeta: i
                                }
                            }))
                        }, t.configureTransmuxer = function(e) {
                            for (var t, r = this.config, n = this.observer, i = this.typeSupported, a = this.vendor, s = 0, o = ga.length; s < o; s++) {
                                var l;
                                if (null != (l = ga[s].demux) && l.probe(e)) {
                                    t = ga[s];
                                    break
                                }
                            }
                            if (!t) return new Error("Failed to find demuxer by probing fragment data");
                            var u = this.demuxer,
                                c = this.remuxer,
                                d = t.remux,
                                h = t.demux;
                            c && c instanceof d || (this.remuxer = new d(n, r, i, a)), u && u instanceof h || (this.demuxer = new h(n, r, i), this.probe = h.probe)
                        }, t.needsProbing = function(e, t) {
                            return !this.demuxer || !this.remuxer || e || t
                        }, t.getDecrypter = function() {
                            var e = this.decrypter;
                            return e || (e = this.decrypter = new zn(this.config)), e
                        }, e
                    }();

                    function ma(e, t) {
                        var r = null;
                        return e.byteLength > 0 && null != (null == t ? void 0 : t.key) && null !== t.iv && null != t.method && (r = t), r
                    }
                    var va = function(e) {
                        return {
                            remuxResult: {},
                            chunkMeta: e
                        }
                    };

                    function ya(e) {
                        return "then" in e && e.then instanceof Function
                    }
                    var Ta = function(e, t, r, n, i) {
                            this.audioCodec = void 0, this.videoCodec = void 0, this.initSegmentData = void 0, this.duration = void 0, this.defaultInitPts = void 0, this.audioCodec = e, this.videoCodec = t, this.initSegmentData = r, this.duration = n, this.defaultInitPts = i || null
                        },
                        ba = function(e, t, r, n, i, a) {
                            this.discontinuity = void 0, this.contiguous = void 0, this.accurateTimeOffset = void 0, this.trackSwitch = void 0, this.timeOffset = void 0, this.initSegmentChange = void 0, this.discontinuity = e, this.contiguous = t, this.accurateTimeOffset = r, this.trackSwitch = n, this.timeOffset = i, this.initSegmentChange = a
                        },
                        Ea = {
                            exports: {}
                        };
                    ! function(e) {
                        var t = Object.prototype.hasOwnProperty,
                            r = "~";

                        function n() {}

                        function i(e, t, r) {
                            this.fn = e, this.context = t, this.once = r || !1
                        }

                        function a(e, t, n, a, s) {
                            if ("function" != typeof n) throw new TypeError("The listener must be a function");
                            var o = new i(n, a || e, s),
                                l = r ? r + t : t;
                            return e._events[l] ? e._events[l].fn ? e._events[l] = [e._events[l], o] : e._events[l].push(o) : (e._events[l] = o, e._eventsCount++), e
                        }

                        function s(e, t) {
                            0 == --e._eventsCount ? e._events = new n : delete e._events[t]
                        }

                        function o() {
                            this._events = new n, this._eventsCount = 0
                        }
                        Object.create && (n.prototype = Object.create(null), (new n).__proto__ || (r = !1)), o.prototype.eventNames = function() {
                            var e, n, i = [];
                            if (0 === this._eventsCount) return i;
                            for (n in e = this._events) t.call(e, n) && i.push(r ? n.slice(1) : n);
                            return Object.getOwnPropertySymbols ? i.concat(Object.getOwnPropertySymbols(e)) : i
                        }, o.prototype.listeners = function(e) {
                            var t = r ? r + e : e,
                                n = this._events[t];
                            if (!n) return [];
                            if (n.fn) return [n.fn];
                            for (var i = 0, a = n.length, s = new Array(a); i < a; i++) s[i] = n[i].fn;
                            return s
                        }, o.prototype.listenerCount = function(e) {
                            var t = r ? r + e : e,
                                n = this._events[t];
                            return n ? n.fn ? 1 : n.length : 0
                        }, o.prototype.emit = function(e, t, n, i, a, s) {
                            var o = r ? r + e : e;
                            if (!this._events[o]) return !1;
                            var l, u, c = this._events[o],
                                d = arguments.length;
                            if (c.fn) {
                                switch (c.once && this.removeListener(e, c.fn, void 0, !0), d) {
                                    case 1:
                                        return c.fn.call(c.context), !0;
                                    case 2:
                                        return c.fn.call(c.context, t), !0;
                                    case 3:
                                        return c.fn.call(c.context, t, n), !0;
                                    case 4:
                                        return c.fn.call(c.context, t, n, i), !0;
                                    case 5:
                                        return c.fn.call(c.context, t, n, i, a), !0;
                                    case 6:
                                        return c.fn.call(c.context, t, n, i, a, s), !0
                                }
                                for (u = 1, l = new Array(d - 1); u < d; u++) l[u - 1] = arguments[u];
                                c.fn.apply(c.context, l)
                            } else {
                                var h, f = c.length;
                                for (u = 0; u < f; u++) switch (c[u].once && this.removeListener(e, c[u].fn, void 0, !0), d) {
                                    case 1:
                                        c[u].fn.call(c[u].context);
                                        break;
                                    case 2:
                                        c[u].fn.call(c[u].context, t);
                                        break;
                                    case 3:
                                        c[u].fn.call(c[u].context, t, n);
                                        break;
                                    case 4:
                                        c[u].fn.call(c[u].context, t, n, i);
                                        break;
                                    default:
                                        if (!l)
                                            for (h = 1, l = new Array(d - 1); h < d; h++) l[h - 1] = arguments[h];
                                        c[u].fn.apply(c[u].context, l)
                                }
                            }
                            return !0
                        }, o.prototype.on = function(e, t, r) {
                            return a(this, e, t, r, !1)
                        }, o.prototype.once = function(e, t, r) {
                            return a(this, e, t, r, !0)
                        }, o.prototype.removeListener = function(e, t, n, i) {
                            var a = r ? r + e : e;
                            if (!this._events[a]) return this;
                            if (!t) return s(this, a), this;
                            var o = this._events[a];
                            if (o.fn) o.fn !== t || i && !o.once || n && o.context !== n || s(this, a);
                            else {
                                for (var l = 0, u = [], c = o.length; l < c; l++)(o[l].fn !== t || i && !o[l].once || n && o[l].context !== n) && u.push(o[l]);
                                u.length ? this._events[a] = 1 === u.length ? u[0] : u : s(this, a)
                            }
                            return this
                        }, o.prototype.removeAllListeners = function(e) {
                            var t;
                            return e ? (t = r ? r + e : e, this._events[t] && s(this, t)) : (this._events = new n, this._eventsCount = 0), this
                        }, o.prototype.off = o.prototype.removeListener, o.prototype.addListener = o.prototype.on, o.prefixed = r, o.EventEmitter = o, e.exports = o
                    }(Ea);
                    var Sa = E(Ea.exports);

                    function Aa(e) {
                        var t = new Sa,
                            r = function(t, r) {
                                e.postMessage({
                                    event: t,
                                    data: r
                                })
                            };
                        t.on(I.FRAG_DECRYPTED, r), t.on(I.ERROR, r);
                        var n = function() {
                            var e = function(e) {
                                var t = function(t) {
                                    r("workerLog", {
                                        logType: e,
                                        message: t
                                    })
                                };
                                F[e] = t
                            };
                            for (var t in F) e(t)
                        };
                        e.addEventListener("message", (function(i) {
                            var a = i.data;
                            switch (a.cmd) {
                                case "init":
                                    var s = JSON.parse(a.config);
                                    e.transmuxer = new pa(t, a.typeSupported, s, a.vendor, a.id), M(s.debug, a.id), n(), r("init", null);
                                    break;
                                case "configure":
                                    e.transmuxer.configure(a.config);
                                    break;
                                case "demux":
                                    var o = e.transmuxer.push(a.data, a.decryptdata, a.chunkMeta, a.state);
                                    ya(o) ? (e.transmuxer.async = !0, o.then((function(t) {
                                        ka(e, t)
                                    })).catch((function(e) {
                                        r(I.ERROR, {
                                            type: w.MEDIA_ERROR,
                                            details: D.FRAG_PARSING_ERROR,
                                            chunkMeta: a.chunkMeta,
                                            fatal: !1,
                                            error: e,
                                            err: e,
                                            reason: "transmuxer-worker push error"
                                        })
                                    }))) : (e.transmuxer.async = !1, ka(e, o));
                                    break;
                                case "flush":
                                    var l = a.chunkMeta,
                                        u = e.transmuxer.flush(l);
                                    ya(u) || e.transmuxer.async ? (ya(u) || (u = Promise.resolve(u)), u.then((function(t) {
                                        Ra(e, t, l)
                                    })).catch((function(e) {
                                        r(I.ERROR, {
                                            type: w.MEDIA_ERROR,
                                            details: D.FRAG_PARSING_ERROR,
                                            chunkMeta: a.chunkMeta,
                                            fatal: !1,
                                            error: e,
                                            err: e,
                                            reason: "transmuxer-worker flush error"
                                        })
                                    }))) : Ra(e, u, l)
                            }
                        }))
                    }

                    function ka(e, t) {
                        if (Ia(t.remuxResult)) return !1;
                        var r = [],
                            n = t.remuxResult,
                            i = n.audio,
                            a = n.video;
                        return i && La(r, i), a && La(r, a), e.postMessage({
                            event: "transmuxComplete",
                            data: t
                        }, r), !0
                    }

                    function La(e, t) {
                        t.data1 && e.push(t.data1.buffer), t.data2 && e.push(t.data2.buffer)
                    }

                    function Ra(e, t, r) {
                        t.reduce((function(t, r) {
                            return ka(e, r) || t
                        }), !1) || e.postMessage({
                            event: "transmuxComplete",
                            data: t[0]
                        }), e.postMessage({
                            event: "flush",
                            data: r
                        })
                    }

                    function Ia(e) {
                        return !(e.audio || e.video || e.text || e.id3 || e.initSegment)
                    }

                    function wa() {
                        return !0
                    }

                    function Da() {
                        var e = new self.Blob(["var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(" + t.toString() + ")(true);"], {
                                type: "text/javascript"
                            }),
                            r = self.URL.createObjectURL(e);
                        return {
                            worker: new self.Worker(r),
                            objectURL: r
                        }
                    }

                    function Ca(e) {
                        var t = new self.URL(e, self.location.href).href;
                        return {
                            worker: new self.Worker(t),
                            scriptURL: t
                        }
                    }
                    void 0 !== r && r && Aa(self);
                    var xa = function() {
                        function e(e, t, r, n) {
                            var i = this;
                            this.error = null, this.hls = void 0, this.id = void 0, this.observer = void 0, this.frag = null, this.part = null, this.useWorker = void 0, this.workerContext = null, this.onwmsg = void 0, this.transmuxer = null, this.onTransmuxComplete = void 0, this.onFlush = void 0;
                            var a = e.config;
                            this.hls = e, this.id = t, this.useWorker = !!a.enableWorker, this.onTransmuxComplete = r, this.onFlush = n;
                            var s = function(e, t) {
                                (t = t || {}).frag = i.frag, t.id = i.id, e === I.ERROR && (i.error = t.error), i.hls.trigger(e, t)
                            };
                            this.observer = new Sa, this.observer.on(I.FRAG_DECRYPTED, s), this.observer.on(I.ERROR, s);
                            var o = Et(a.preferManagedMediaSource) || {
                                    isTypeSupported: function() {
                                        return !1
                                    }
                                },
                                l = {
                                    mpeg: o.isTypeSupported("audio/mpeg"),
                                    mp3: o.isTypeSupported('audio/mp4; codecs="mp3"'),
                                    ac3: o.isTypeSupported('audio/mp4; codecs="ac-3"')
                                },
                                u = navigator.vendor;
                            if (this.useWorker && "undefined" != typeof Worker && (a.workerPath || wa())) try {
                                a.workerPath ? (F.log("loading Web Worker " + a.workerPath + ' for "' + t + '"'), this.workerContext = Ca(a.workerPath)) : (F.log('injecting Web Worker for "' + t + '"'), this.workerContext = Da()), this.onwmsg = function(e) {
                                    return i.onWorkerMessage(e)
                                };
                                var c = this.workerContext.worker;
                                c.addEventListener("message", this.onwmsg), c.onerror = function(e) {
                                    var r = new Error(e.message + "  (" + e.filename + ":" + e.lineno + ")");
                                    a.enableWorker = !1, F.warn('Error in "' + t + '" Web Worker, fallback to inline'), i.hls.trigger(I.ERROR, {
                                        type: w.OTHER_ERROR,
                                        details: D.INTERNAL_EXCEPTION,
                                        fatal: !1,
                                        event: "demuxerWorker",
                                        error: r
                                    })
                                }, c.postMessage({
                                    cmd: "init",
                                    typeSupported: l,
                                    vendor: u,
                                    id: t,
                                    config: JSON.stringify(a)
                                })
                            } catch (e) {
                                F.warn('Error setting up "' + t + '" Web Worker, fallback to inline', e), this.resetWorker(), this.error = null, this.transmuxer = new pa(this.observer, l, a, u, t)
                            } else this.transmuxer = new pa(this.observer, l, a, u, t)
                        }
                        var t = e.prototype;
                        return t.resetWorker = function() {
                            if (this.workerContext) {
                                var e = this.workerContext,
                                    t = e.worker,
                                    r = e.objectURL;
                                r && self.URL.revokeObjectURL(r), t.removeEventListener("message", this.onwmsg), t.onerror = null, t.terminate(), this.workerContext = null
                            }
                        }, t.destroy = function() {
                            if (this.workerContext) this.resetWorker(), this.onwmsg = void 0;
                            else {
                                var e = this.transmuxer;
                                e && (e.destroy(), this.transmuxer = null)
                            }
                            var t = this.observer;
                            t && t.removeAllListeners(), this.frag = null, this.observer = null, this.hls = null
                        }, t.push = function(e, t, r, n, i, a, s, o, l, u) {
                            var c, d, h = this;
                            l.transmuxing.start = self.performance.now();
                            var f = this.transmuxer,
                                g = a ? a.start : i.start,
                                p = i.decryptdata,
                                m = this.frag,
                                v = !(m && i.cc === m.cc),
                                y = !(m && l.level === m.level),
                                T = m ? l.sn - m.sn : -1,
                                b = this.part ? l.part - this.part.index : -1,
                                E = 0 === T && l.id > 1 && l.id === (null == m ? void 0 : m.stats.chunkCount),
                                S = !y && (1 === T || 0 === T && (1 === b || E && b <= 0)),
                                A = self.performance.now();
                            (y || T || 0 === i.stats.parsing.start) && (i.stats.parsing.start = A), !a || !b && S || (a.stats.parsing.start = A);
                            var k = !(m && (null == (c = i.initSegment) ? void 0 : c.url) === (null == (d = m.initSegment) ? void 0 : d.url)),
                                L = new ba(v, S, o, y, g, k);
                            if (!S || v || k) {
                                F.log("[transmuxer-interface, " + i.type + "]: Starting new transmux session for sn: " + l.sn + " p: " + l.part + " level: " + l.level + " id: " + l.id + "\n        discontinuity: " + v + "\n        trackSwitch: " + y + "\n        contiguous: " + S + "\n        accurateTimeOffset: " + o + "\n        timeOffset: " + g + "\n        initSegmentChange: " + k);
                                var R = new Ta(r, n, t, s, u);
                                this.configureTransmuxer(R)
                            }
                            if (this.frag = i, this.part = a, this.workerContext) this.workerContext.worker.postMessage({
                                cmd: "demux",
                                data: e,
                                decryptdata: p,
                                chunkMeta: l,
                                state: L
                            }, e instanceof ArrayBuffer ? [e] : []);
                            else if (f) {
                                var I = f.push(e, p, l, L);
                                ya(I) ? (f.async = !0, I.then((function(e) {
                                    h.handleTransmuxComplete(e)
                                })).catch((function(e) {
                                    h.transmuxerError(e, l, "transmuxer-interface push error")
                                }))) : (f.async = !1, this.handleTransmuxComplete(I))
                            }
                        }, t.flush = function(e) {
                            var t = this;
                            e.transmuxing.start = self.performance.now();
                            var r = this.transmuxer;
                            if (this.workerContext) this.workerContext.worker.postMessage({
                                cmd: "flush",
                                chunkMeta: e
                            });
                            else if (r) {
                                var n = r.flush(e);
                                ya(n) || r.async ? (ya(n) || (n = Promise.resolve(n)), n.then((function(r) {
                                    t.handleFlushResult(r, e)
                                })).catch((function(r) {
                                    t.transmuxerError(r, e, "transmuxer-interface flush error")
                                }))) : this.handleFlushResult(n, e)
                            }
                        }, t.transmuxerError = function(e, t, r) {
                            this.hls && (this.error = e, this.hls.trigger(I.ERROR, {
                                type: w.MEDIA_ERROR,
                                details: D.FRAG_PARSING_ERROR,
                                chunkMeta: t,
                                fatal: !1,
                                error: e,
                                err: e,
                                reason: r
                            }))
                        }, t.handleFlushResult = function(e, t) {
                            var r = this;
                            e.forEach((function(e) {
                                r.handleTransmuxComplete(e)
                            })), this.onFlush(t)
                        }, t.onWorkerMessage = function(e) {
                            var t = e.data,
                                r = this.hls;
                            switch (t.event) {
                                case "init":
                                    var n, i = null == (n = this.workerContext) ? void 0 : n.objectURL;
                                    i && self.URL.revokeObjectURL(i);
                                    break;
                                case "transmuxComplete":
                                    this.handleTransmuxComplete(t.data);
                                    break;
                                case "flush":
                                    this.onFlush(t.data);
                                    break;
                                case "workerLog":
                                    F[t.data.logType] && F[t.data.logType](t.data.message);
                                    break;
                                default:
                                    t.data = t.data || {}, t.data.frag = this.frag, t.data.id = this.id, r.trigger(t.event, t.data)
                            }
                        }, t.configureTransmuxer = function(e) {
                            var t = this.transmuxer;
                            this.workerContext ? this.workerContext.worker.postMessage({
                                cmd: "configure",
                                config: e
                            }) : t && t.configure(e)
                        }, t.handleTransmuxComplete = function(e) {
                            e.chunkMeta.transmuxing.end = self.performance.now(), this.onTransmuxComplete(e)
                        }, e
                    }();

                    function _a(e, t) {
                        if (e.length !== t.length) return !1;
                        for (var r = 0; r < e.length; r++)
                            if (!Oa(e[r].attrs, t[r].attrs)) return !1;
                        return !0
                    }

                    function Oa(e, t, r) {
                        var n = e["STABLE-RENDITION-ID"];
                        return n && !r ? n === t["STABLE-RENDITION-ID"] : !(r || ["LANGUAGE", "NAME", "CHARACTERISTICS", "AUTOSELECT", "DEFAULT", "FORCED", "ASSOC-LANGUAGE"]).some((function(r) {
                            return e[r] !== t[r]
                        }))
                    }

                    function Pa(e, t) {
                        return t.label.toLowerCase() === e.name.toLowerCase() && (!t.language || t.language.toLowerCase() === (e.lang || "").toLowerCase())
                    }
                    var Ma = 100,
                        Fa = function(e) {
                            function t(t, r, n) {
                                var i;
                                return (i = e.call(this, t, r, n, "[audio-stream-controller]", $t.AUDIO) || this).videoBuffer = null, i.videoTrackCC = -1, i.waitingVideoCC = -1, i.bufferedTrack = null, i.switchingTrack = null, i.trackId = -1, i.waitingData = null, i.mainDetails = null, i.flushing = !1, i.bufferFlushed = !1, i.cachedTrackLoadedData = null, i._registerListeners(), i
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.onHandlerDestroying = function() {
                                this._unregisterListeners(), e.prototype.onHandlerDestroying.call(this), this.mainDetails = null, this.bufferedTrack = null, this.switchingTrack = null
                            }, r._registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.LEVEL_LOADED, this.onLevelLoaded, this), e.on(I.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), e.on(I.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), e.on(I.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), e.on(I.ERROR, this.onError, this), e.on(I.BUFFER_RESET, this.onBufferReset, this), e.on(I.BUFFER_CREATED, this.onBufferCreated, this), e.on(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.on(I.BUFFER_FLUSHED, this.onBufferFlushed, this), e.on(I.INIT_PTS_FOUND, this.onInitPtsFound, this), e.on(I.FRAG_BUFFERED, this.onFragBuffered, this)
                            }, r._unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.LEVEL_LOADED, this.onLevelLoaded, this), e.off(I.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), e.off(I.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), e.off(I.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), e.off(I.ERROR, this.onError, this), e.off(I.BUFFER_RESET, this.onBufferReset, this), e.off(I.BUFFER_CREATED, this.onBufferCreated, this), e.off(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.off(I.BUFFER_FLUSHED, this.onBufferFlushed, this), e.off(I.INIT_PTS_FOUND, this.onInitPtsFound, this), e.off(I.FRAG_BUFFERED, this.onFragBuffered, this)
                            }, r.onInitPtsFound = function(e, t) {
                                var r = t.frag,
                                    n = t.id,
                                    i = t.initPTS,
                                    a = t.timescale;
                                if ("main" === n) {
                                    var s = r.cc;
                                    this.initPTS[r.cc] = {
                                        baseTime: i,
                                        timescale: a
                                    }, this.log("InitPTS for cc: " + s + " found from main: " + i), this.videoTrackCC = s, this.state === $n.WAITING_INIT_PTS && this.tick()
                                }
                            }, r.startLoad = function(e) {
                                if (!this.levels) return this.startPosition = e, void(this.state = $n.STOPPED);
                                var t = this.lastCurrentTime;
                                this.stopLoad(), this.setInterval(Ma), t > 0 && -1 === e ? (this.log("Override startPosition with lastCurrentTime @" + t.toFixed(3)), e = t, this.state = $n.IDLE) : (this.loadedmetadata = !1, this.state = $n.WAITING_TRACK), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e, this.tick()
                            }, r.doTick = function() {
                                switch (this.state) {
                                    case $n.IDLE:
                                        this.doTickIdle();
                                        break;
                                    case $n.WAITING_TRACK:
                                        var t, r = this.levels,
                                            n = this.trackId,
                                            i = null == r || null == (t = r[n]) ? void 0 : t.details;
                                        if (i) {
                                            if (this.waitForCdnTuneIn(i)) break;
                                            this.state = $n.WAITING_INIT_PTS
                                        }
                                        break;
                                    case $n.FRAG_LOADING_WAITING_RETRY:
                                        var a, s = performance.now(),
                                            o = this.retryDate;
                                        if (!o || s >= o || null != (a = this.media) && a.seeking) {
                                            var l = this.levels,
                                                u = this.trackId;
                                            this.log("RetryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded((null == l ? void 0 : l[u]) || null), this.state = $n.IDLE
                                        }
                                        break;
                                    case $n.WAITING_INIT_PTS:
                                        var c = this.waitingData;
                                        if (c) {
                                            var d = c.frag,
                                                h = c.part,
                                                f = c.cache,
                                                g = c.complete;
                                            if (void 0 !== this.initPTS[d.cc]) {
                                                this.waitingData = null, this.waitingVideoCC = -1, this.state = $n.FRAG_LOADING;
                                                var p = {
                                                    frag: d,
                                                    part: h,
                                                    payload: f.flush(),
                                                    networkDetails: null
                                                };
                                                this._handleFragmentLoadProgress(p), g && e.prototype._handleFragmentLoadComplete.call(this, p)
                                            } else if (this.videoTrackCC !== this.waitingVideoCC) this.log("Waiting fragment cc (" + d.cc + ") cancelled because video is at cc " + this.videoTrackCC), this.clearWaitingFragment();
                                            else {
                                                var m = this.getLoadPosition(),
                                                    v = In.bufferInfo(this.mediaBuffer, m, this.config.maxBufferHole);
                                                qr(v.end, this.config.maxFragLookUpTolerance, d) < 0 && (this.log("Waiting fragment cc (" + d.cc + ") @ " + d.start + " cancelled because another fragment at " + v.end + " is needed"), this.clearWaitingFragment())
                                            }
                                        } else this.state = $n.IDLE
                                }
                                this.onTickEnd()
                            }, r.clearWaitingFragment = function() {
                                var e = this.waitingData;
                                e && (this.fragmentTracker.removeFragment(e.frag), this.waitingData = null, this.waitingVideoCC = -1, this.state = $n.IDLE)
                            }, r.resetLoadingState = function() {
                                this.clearWaitingFragment(), e.prototype.resetLoadingState.call(this)
                            }, r.onTickEnd = function() {
                                var e = this.media;
                                null != e && e.readyState && (this.lastCurrentTime = e.currentTime)
                            }, r.doTickIdle = function() {
                                var e = this.hls,
                                    t = this.levels,
                                    r = this.media,
                                    n = this.trackId,
                                    i = e.config;
                                if ((r || !this.startFragRequested && i.startFragPrefetch) && null != t && t[n]) {
                                    var a = t[n],
                                        s = a.details;
                                    if (!s || s.live && this.levelLastLoaded !== a || this.waitForCdnTuneIn(s)) this.state = $n.WAITING_TRACK;
                                    else {
                                        var o = this.mediaBuffer ? this.mediaBuffer : this.media;
                                        this.bufferFlushed && o && (this.bufferFlushed = !1, this.afterBufferFlushed(o, j.AUDIO, $t.AUDIO));
                                        var l = this.getFwdBufferInfo(o, $t.AUDIO);
                                        if (null !== l) {
                                            var u = this.bufferedTrack,
                                                c = this.switchingTrack;
                                            if (!c && this._streamEnded(l, s)) return e.trigger(I.BUFFER_EOS, {
                                                type: "audio"
                                            }), void(this.state = $n.ENDED);
                                            var d = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, $t.MAIN),
                                                h = l.len,
                                                f = this.getMaxBufferLength(null == d ? void 0 : d.len),
                                                g = s.fragments,
                                                p = g[0].start,
                                                m = this.flushing ? this.getLoadPosition() : l.end;
                                            if (c && r) {
                                                var v = this.getLoadPosition();
                                                u && !Oa(c.attrs, u.attrs) && (m = v), s.PTSKnown && v < p && (l.end > p || l.nextStart) && (this.log("Alt audio track ahead of main track, seek to start of alt audio track"), r.currentTime = p + .05)
                                            }
                                            if (!(h >= f && !c && m < g[g.length - 1].start)) {
                                                var y = this.getNextFragment(m, s),
                                                    T = !1;
                                                if (y && this.isLoopLoading(y, m) && (T = !!y.gap, y = this.getNextFragmentLoopLoading(y, s, l, $t.MAIN, f)), y) {
                                                    var b = d && y.start > d.end + s.targetduration;
                                                    if (b || (null == d || !d.len) && l.len) {
                                                        var E = this.getAppendedFrag(y.start, $t.MAIN);
                                                        if (null === E) return;
                                                        if (T || (T = !!E.gap || !!b && 0 === d.len), b && !T || T && l.nextStart && l.nextStart < E.end) return
                                                    }
                                                    this.loadFragment(y, a, m)
                                                } else this.bufferFlushed = !0
                                            }
                                        }
                                    }
                                }
                            }, r.getMaxBufferLength = function(t) {
                                var r = e.prototype.getMaxBufferLength.call(this);
                                return t ? Math.min(Math.max(r, t), this.config.maxMaxBufferLength) : r
                            }, r.onMediaDetaching = function() {
                                this.videoBuffer = null, this.bufferFlushed = this.flushing = !1, e.prototype.onMediaDetaching.call(this)
                            }, r.onAudioTracksUpdated = function(e, t) {
                                var r = t.audioTracks;
                                this.resetTransmuxer(), this.levels = r.map((function(e) {
                                    return new Ar(e)
                                }))
                            }, r.onAudioTrackSwitching = function(e, t) {
                                var r = !!t.url;
                                this.trackId = t.id;
                                var n = this.fragCurrent;
                                n && (n.abortRequests(), this.removeUnbufferedFrags(n.start)), this.resetLoadingState(), r ? this.setInterval(Ma) : this.resetTransmuxer(), r ? (this.switchingTrack = t, this.state = $n.IDLE, this.flushAudioIfNeeded(t)) : (this.switchingTrack = null, this.bufferedTrack = t, this.state = $n.STOPPED), this.tick()
                            }, r.onManifestLoading = function() {
                                this.fragmentTracker.removeAllFragments(), this.startPosition = this.lastCurrentTime = 0, this.bufferFlushed = this.flushing = !1, this.levels = this.mainDetails = this.waitingData = this.bufferedTrack = this.cachedTrackLoadedData = this.switchingTrack = null, this.startFragRequested = !1, this.trackId = this.videoTrackCC = this.waitingVideoCC = -1
                            }, r.onLevelLoaded = function(e, t) {
                                this.mainDetails = t.details, null !== this.cachedTrackLoadedData && (this.hls.trigger(I.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData), this.cachedTrackLoadedData = null)
                            }, r.onAudioTrackLoaded = function(e, t) {
                                var r;
                                if (null != this.mainDetails) {
                                    var n = this.levels,
                                        i = t.details,
                                        a = t.id;
                                    if (n) {
                                        this.log("Audio track " + a + " loaded [" + i.startSN + "," + i.endSN + "]" + (i.lastPartSn ? "[part-" + i.lastPartSn + "-" + i.lastPartIndex + "]" : "") + ",duration:" + i.totalduration);
                                        var s = n[a],
                                            o = 0;
                                        if (i.live || null != (r = s.details) && r.live) {
                                            this.checkLiveUpdate(i);
                                            var l, u = this.mainDetails;
                                            if (i.deltaUpdateFailed || !u) return;
                                            !s.details && i.hasProgramDateTime && u.hasProgramDateTime ? (Nn(i, u), o = i.fragments[0].start) : o = this.alignPlaylists(i, s.details, null == (l = this.levelLastLoaded) ? void 0 : l.details)
                                        }
                                        s.details = i, this.levelLastLoaded = s, this.startFragRequested || !this.mainDetails && i.live || this.setStartPosition(this.mainDetails || i, o), this.state !== $n.WAITING_TRACK || this.waitForCdnTuneIn(i) || (this.state = $n.IDLE), this.tick()
                                    } else this.warn("Audio tracks were reset while loading level " + a)
                                } else this.cachedTrackLoadedData = t
                            }, r._handleFragmentLoadProgress = function(e) {
                                var t, r = e.frag,
                                    n = e.part,
                                    i = e.payload,
                                    a = this.config,
                                    s = this.trackId,
                                    o = this.levels;
                                if (o) {
                                    var l = o[s];
                                    if (l) {
                                        var u = l.details;
                                        if (!u) return this.warn("Audio track details undefined on fragment load progress"), void this.removeUnbufferedFrags(r.start);
                                        var c = a.defaultAudioCodec || l.audioCodec || "mp4a.40.2",
                                            d = this.transmuxer;
                                        d || (d = this.transmuxer = new xa(this.hls, $t.AUDIO, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)));
                                        var h = this.initPTS[r.cc],
                                            f = null == (t = r.initSegment) ? void 0 : t.data;
                                        if (void 0 !== h) {
                                            var g = !1,
                                                p = n ? n.index : -1,
                                                m = -1 !== p,
                                                v = new wn(r.level, r.sn, r.stats.chunkCount, i.byteLength, p, m);
                                            d.push(i, f, c, "", r, n, u.totalduration, g, v, h)
                                        } else this.log("Unknown video PTS for cc " + r.cc + ", waiting for video PTS before demuxing audio frag " + r.sn + " of [" + u.startSN + " ," + u.endSN + "],track " + s), (this.waitingData = this.waitingData || {
                                            frag: r,
                                            part: n,
                                            cache: new Qn,
                                            complete: !1
                                        }).cache.push(new Uint8Array(i)), this.waitingVideoCC = this.videoTrackCC, this.state = $n.WAITING_INIT_PTS
                                    } else this.warn("Audio track is undefined on fragment load progress")
                                } else this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + r.sn + " of level " + r.level + " will not be buffered")
                            }, r._handleFragmentLoadComplete = function(t) {
                                this.waitingData ? this.waitingData.complete = !0 : e.prototype._handleFragmentLoadComplete.call(this, t)
                            }, r.onBufferReset = function() {
                                this.mediaBuffer = this.videoBuffer = null, this.loadedmetadata = !1
                            }, r.onBufferCreated = function(e, t) {
                                var r = t.tracks.audio;
                                r && (this.mediaBuffer = r.buffer || null), t.tracks.video && (this.videoBuffer = t.tracks.video.buffer || null)
                            }, r.onFragBuffered = function(e, t) {
                                var r = t.frag,
                                    i = t.part;
                                if (r.type === $t.AUDIO)
                                    if (this.fragContextChanged(r)) this.warn("Fragment " + r.sn + (i ? " p: " + i.index : "") + " of level " + r.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + (this.switchingTrack ? this.switchingTrack.name : "false"));
                                    else {
                                        if ("initSegment" !== r.sn) {
                                            this.fragPrevious = r;
                                            var a = this.switchingTrack;
                                            a && (this.bufferedTrack = a, this.switchingTrack = null, this.hls.trigger(I.AUDIO_TRACK_SWITCHED, n({}, a)))
                                        }
                                        this.fragBufferedComplete(r, i)
                                    }
                                else if (!this.loadedmetadata && r.type === $t.MAIN) {
                                    var s = this.videoBuffer || this.media;
                                    s && In.getBuffered(s).length && (this.loadedmetadata = !0)
                                }
                            }, r.onError = function(t, r) {
                                var n;
                                if (r.fatal) this.state = $n.ERROR;
                                else switch (r.details) {
                                    case D.FRAG_GAP:
                                    case D.FRAG_PARSING_ERROR:
                                    case D.FRAG_DECRYPT_ERROR:
                                    case D.FRAG_LOAD_ERROR:
                                    case D.FRAG_LOAD_TIMEOUT:
                                    case D.KEY_LOAD_ERROR:
                                    case D.KEY_LOAD_TIMEOUT:
                                        this.onFragmentOrKeyLoadError($t.AUDIO, r);
                                        break;
                                    case D.AUDIO_TRACK_LOAD_ERROR:
                                    case D.AUDIO_TRACK_LOAD_TIMEOUT:
                                    case D.LEVEL_PARSING_ERROR:
                                        r.levelRetry || this.state !== $n.WAITING_TRACK || (null == (n = r.context) ? void 0 : n.type) !== Xt.AUDIO_TRACK || (this.state = $n.IDLE);
                                        break;
                                    case D.BUFFER_APPEND_ERROR:
                                    case D.BUFFER_FULL_ERROR:
                                        if (!r.parent || "audio" !== r.parent) return;
                                        if (r.details === D.BUFFER_APPEND_ERROR) return void this.resetLoadingState();
                                        this.reduceLengthAndFlushBuffer(r) && (this.bufferedTrack = null, e.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio"));
                                        break;
                                    case D.INTERNAL_EXCEPTION:
                                        this.recoverWorkerError(r)
                                }
                            }, r.onBufferFlushing = function(e, t) {
                                t.type !== j.VIDEO && (this.flushing = !0)
                            }, r.onBufferFlushed = function(e, t) {
                                var r = t.type;
                                if (r !== j.VIDEO) {
                                    this.flushing = !1, this.bufferFlushed = !0, this.state === $n.ENDED && (this.state = $n.IDLE);
                                    var n = this.mediaBuffer || this.media;
                                    n && (this.afterBufferFlushed(n, r, $t.AUDIO), this.tick())
                                }
                            }, r._handleTransmuxComplete = function(e) {
                                var t, r = "audio",
                                    n = this.hls,
                                    i = e.remuxResult,
                                    a = e.chunkMeta,
                                    s = this.getCurrentContext(a);
                                if (s) {
                                    var o = s.frag,
                                        l = s.part,
                                        c = s.level,
                                        d = c.details,
                                        h = i.audio,
                                        f = i.text,
                                        g = i.id3,
                                        p = i.initSegment;
                                    if (!this.fragContextChanged(o) && d) {
                                        if (this.state = $n.PARSING, this.switchingTrack && h && this.completeAudioSwitch(this.switchingTrack), null != p && p.tracks) {
                                            var m = o.initSegment || o;
                                            this._bufferInitSegment(c, p.tracks, m, a), n.trigger(I.FRAG_PARSING_INIT_SEGMENT, {
                                                frag: m,
                                                id: r,
                                                tracks: p.tracks
                                            })
                                        }
                                        if (h) {
                                            var v = h.startPTS,
                                                y = h.endPTS,
                                                T = h.startDTS,
                                                b = h.endDTS;
                                            l && (l.elementaryStreams[j.AUDIO] = {
                                                startPTS: v,
                                                endPTS: y,
                                                startDTS: T,
                                                endDTS: b
                                            }), o.setElementaryStreamInfo(j.AUDIO, v, y, T, b), this.bufferFragmentData(h, o, l, a)
                                        }
                                        if (null != g && null != (t = g.samples) && t.length) {
                                            var E = u({
                                                id: r,
                                                frag: o,
                                                details: d
                                            }, g);
                                            n.trigger(I.FRAG_PARSING_METADATA, E)
                                        }
                                        if (f) {
                                            var S = u({
                                                id: r,
                                                frag: o,
                                                details: d
                                            }, f);
                                            n.trigger(I.FRAG_PARSING_USERDATA, S)
                                        }
                                    } else this.fragmentTracker.removeFragment(o)
                                } else this.resetWhenMissingContext(a)
                            }, r._bufferInitSegment = function(e, t, r, n) {
                                if (this.state === $n.PARSING) {
                                    t.video && delete t.video;
                                    var i = t.audio;
                                    if (i) {
                                        i.id = "audio";
                                        var a = e.audioCodec;
                                        this.log("Init audio buffer, container:" + i.container + ", codecs[level/parsed]=[" + a + "/" + i.codec + "]"), a && 1 === a.split(",").length && (i.levelCodec = a), this.hls.trigger(I.BUFFER_CODECS, t);
                                        var s = i.initSegment;
                                        if (null != s && s.byteLength) {
                                            var o = {
                                                type: "audio",
                                                frag: r,
                                                part: null,
                                                chunkMeta: n,
                                                parent: r.type,
                                                data: s
                                            };
                                            this.hls.trigger(I.BUFFER_APPENDING, o)
                                        }
                                        this.tickImmediate()
                                    }
                                }
                            }, r.loadFragment = function(t, r, n) {
                                var i, a = this.fragmentTracker.getState(t);
                                if (this.fragCurrent = t, this.switchingTrack || a === Sn.NOT_LOADED || a === Sn.PARTIAL)
                                    if ("initSegment" === t.sn) this._loadInitSegment(t, r);
                                    else if (null != (i = r.details) && i.live && !this.initPTS[t.cc]) {
                                    this.log("Waiting for video PTS in continuity counter " + t.cc + " of live stream before loading audio fragment " + t.sn + " of level " + this.trackId), this.state = $n.WAITING_INIT_PTS;
                                    var s = this.mainDetails;
                                    s && s.fragments[0].start !== r.details.fragments[0].start && Nn(r.details, s)
                                } else this.startFragRequested = !0, e.prototype.loadFragment.call(this, t, r, n);
                                else this.clearTrackerIfNeeded(t)
                            }, r.flushAudioIfNeeded = function(t) {
                                var r = this.media,
                                    n = this.bufferedTrack,
                                    i = null == n ? void 0 : n.attrs,
                                    a = t.attrs;
                                r && i && (i.CHANNELS !== a.CHANNELS || n.name !== t.name || n.lang !== t.lang) && (this.log("Switching audio track : flushing all audio"), e.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio"), this.bufferedTrack = null)
                            }, r.completeAudioSwitch = function(e) {
                                var t = this.hls;
                                this.flushAudioIfNeeded(e), this.bufferedTrack = e, this.switchingTrack = null, t.trigger(I.AUDIO_TRACK_SWITCHED, n({}, e))
                            }, t
                        }(Jn),
                        Na = function(e) {
                            function t(t) {
                                var r;
                                return (r = e.call(this, t, "[audio-track-controller]") || this).tracks = [], r.groupIds = null, r.tracksInGroup = [], r.trackId = -1, r.currentTrack = null, r.selectDefaultTrack = !0, r.registerListeners(), r
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.MANIFEST_PARSED, this.onManifestParsed, this), e.on(I.LEVEL_LOADING, this.onLevelLoading, this), e.on(I.LEVEL_SWITCHING, this.onLevelSwitching, this), e.on(I.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), e.on(I.ERROR, this.onError, this)
                            }, r.unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.MANIFEST_PARSED, this.onManifestParsed, this), e.off(I.LEVEL_LOADING, this.onLevelLoading, this), e.off(I.LEVEL_SWITCHING, this.onLevelSwitching, this), e.off(I.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), e.off(I.ERROR, this.onError, this)
                            }, r.destroy = function() {
                                this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.currentTrack = null, e.prototype.destroy.call(this)
                            }, r.onManifestLoading = function() {
                                this.tracks = [], this.tracksInGroup = [], this.groupIds = null, this.currentTrack = null, this.trackId = -1, this.selectDefaultTrack = !0
                            }, r.onManifestParsed = function(e, t) {
                                this.tracks = t.audioTracks || []
                            }, r.onAudioTrackLoaded = function(e, t) {
                                var r = t.id,
                                    n = t.groupId,
                                    i = t.details,
                                    a = this.tracksInGroup[r];
                                if (a && a.groupId === n) {
                                    var s = a.details;
                                    a.details = t.details, this.log("Audio track " + r + ' "' + a.name + '" lang:' + a.lang + " group:" + n + " loaded [" + i.startSN + "-" + i.endSN + "]"), r === this.trackId && this.playlistLoaded(r, t, s)
                                } else this.warn("Audio track with id:" + r + " and group:" + n + " not found in active group " + (null == a ? void 0 : a.groupId))
                            }, r.onLevelLoading = function(e, t) {
                                this.switchLevel(t.level)
                            }, r.onLevelSwitching = function(e, t) {
                                this.switchLevel(t.level)
                            }, r.switchLevel = function(e) {
                                var t = this.hls.levels[e];
                                if (t) {
                                    var r = t.audioGroups || null,
                                        n = this.groupIds,
                                        i = this.currentTrack;
                                    if (!r || (null == n ? void 0 : n.length) !== (null == r ? void 0 : r.length) || null != r && r.some((function(e) {
                                            return -1 === (null == n ? void 0 : n.indexOf(e))
                                        }))) {
                                        this.groupIds = r, this.trackId = -1, this.currentTrack = null;
                                        var a = this.tracks.filter((function(e) {
                                            return !r || -1 !== r.indexOf(e.groupId)
                                        }));
                                        if (a.length) this.selectDefaultTrack && !a.some((function(e) {
                                            return e.default
                                        })) && (this.selectDefaultTrack = !1), a.forEach((function(e, t) {
                                            e.id = t
                                        }));
                                        else if (!i && !this.tracksInGroup.length) return;
                                        this.tracksInGroup = a;
                                        var s = this.hls.config.audioPreference;
                                        if (!i && s) {
                                            var o = gn(s, a, vn);
                                            if (o > -1) i = a[o];
                                            else {
                                                var l = gn(s, this.tracks);
                                                i = this.tracks[l]
                                            }
                                        }
                                        var u = this.findTrackId(i); - 1 === u && i && (u = this.findTrackId(null));
                                        var c = {
                                            audioTracks: a
                                        };
                                        this.log("Updating audio tracks, " + a.length + " track(s) found in group(s): " + (null == r ? void 0 : r.join(","))), this.hls.trigger(I.AUDIO_TRACKS_UPDATED, c);
                                        var d = this.trackId;
                                        if (-1 !== u && -1 === d) this.setAudioTrack(u);
                                        else if (a.length && -1 === d) {
                                            var h, f = new Error("No audio track selected for current audio group-ID(s): " + (null == (h = this.groupIds) ? void 0 : h.join(",")) + " track count: " + a.length);
                                            this.warn(f.message), this.hls.trigger(I.ERROR, {
                                                type: w.MEDIA_ERROR,
                                                details: D.AUDIO_TRACK_LOAD_ERROR,
                                                fatal: !0,
                                                error: f
                                            })
                                        }
                                    } else this.shouldReloadPlaylist(i) && this.setAudioTrack(this.trackId)
                                }
                            }, r.onError = function(e, t) {
                                !t.fatal && t.context && (t.context.type !== Xt.AUDIO_TRACK || t.context.id !== this.trackId || this.groupIds && -1 === this.groupIds.indexOf(t.context.groupId) || (this.requestScheduled = -1, this.checkRetry(t)))
                            }, r.setAudioOption = function(e) {
                                var t = this.hls;
                                if (t.config.audioPreference = e, e) {
                                    var r = this.allAudioTracks;
                                    if (this.selectDefaultTrack = !1, r.length) {
                                        var n = this.currentTrack;
                                        if (n && pn(e, n, vn)) return n;
                                        var i = gn(e, this.tracksInGroup, vn);
                                        if (i > -1) {
                                            var a = this.tracksInGroup[i];
                                            return this.setAudioTrack(i), a
                                        }
                                        if (n) {
                                            var s = t.loadLevel; - 1 === s && (s = t.firstAutoLevel);
                                            var o = yn(e, t.levels, r, s, vn);
                                            if (-1 === o) return null;
                                            t.nextLoadLevel = o
                                        }
                                        if (e.channels || e.audioCodec) {
                                            var l = gn(e, r);
                                            if (l > -1) return r[l]
                                        }
                                    }
                                }
                                return null
                            }, r.setAudioTrack = function(e) {
                                var t = this.tracksInGroup;
                                if (e < 0 || e >= t.length) this.warn("Invalid audio track id: " + e);
                                else {
                                    this.clearTimer(), this.selectDefaultTrack = !1;
                                    var r = this.currentTrack,
                                        i = t[e],
                                        a = i.details && !i.details.live;
                                    if (!(e === this.trackId && i === r && a || (this.log("Switching to audio-track " + e + ' "' + i.name + '" lang:' + i.lang + " group:" + i.groupId + " channels:" + i.channels), this.trackId = e, this.currentTrack = i, this.hls.trigger(I.AUDIO_TRACK_SWITCHING, n({}, i)), a))) {
                                        var s = this.switchParams(i.url, null == r ? void 0 : r.details);
                                        this.loadPlaylist(s)
                                    }
                                }
                            }, r.findTrackId = function(e) {
                                for (var t = this.tracksInGroup, r = 0; r < t.length; r++) {
                                    var n = t[r];
                                    if ((!this.selectDefaultTrack || n.default) && (!e || pn(e, n, vn))) return r
                                }
                                if (e) {
                                    for (var i = e.name, a = e.lang, s = e.assocLang, o = e.characteristics, l = e.audioCodec, u = e.channels, c = 0; c < t.length; c++)
                                        if (pn({
                                                name: i,
                                                lang: a,
                                                assocLang: s,
                                                characteristics: o,
                                                audioCodec: l,
                                                channels: u
                                            }, t[c], vn)) return c;
                                    for (var d = 0; d < t.length; d++) {
                                        var h = t[d];
                                        if (Oa(e.attrs, h.attrs, ["LANGUAGE", "ASSOC-LANGUAGE", "CHARACTERISTICS"])) return d
                                    }
                                    for (var f = 0; f < t.length; f++) {
                                        var g = t[f];
                                        if (Oa(e.attrs, g.attrs, ["LANGUAGE"])) return f
                                    }
                                }
                                return -1
                            }, r.loadPlaylist = function(t) {
                                var r = this.currentTrack;
                                if (this.shouldLoadPlaylist(r) && r) {
                                    e.prototype.loadPlaylist.call(this);
                                    var n = r.id,
                                        i = r.groupId,
                                        a = r.url;
                                    if (t) try {
                                        a = t.addDirectives(a)
                                    } catch (e) {
                                        this.warn("Could not construct new URL with HLS Delivery Directives: " + e)
                                    }
                                    this.log("loading audio-track playlist " + n + ' "' + r.name + '" lang:' + r.lang + " group:" + i), this.clearTimer(), this.hls.trigger(I.AUDIO_TRACK_LOADING, {
                                        url: a,
                                        id: n,
                                        groupId: i,
                                        deliveryDirectives: t || null
                                    })
                                }
                            }, o(t, [{
                                key: "allAudioTracks",
                                get: function() {
                                    return this.tracks
                                }
                            }, {
                                key: "audioTracks",
                                get: function() {
                                    return this.tracksInGroup
                                }
                            }, {
                                key: "audioTrack",
                                get: function() {
                                    return this.trackId
                                },
                                set: function(e) {
                                    this.selectDefaultTrack = !1, this.setAudioTrack(e)
                                }
                            }]), t
                        }(Zr),
                        Ua = 500,
                        Ba = function(e) {
                            function t(t, r, n) {
                                var i;
                                return (i = e.call(this, t, r, n, "[subtitle-stream-controller]", $t.SUBTITLE) || this).currentTrackId = -1, i.tracksBuffered = [], i.mainDetails = null, i._registerListeners(), i
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.onHandlerDestroying = function() {
                                this._unregisterListeners(), e.prototype.onHandlerDestroying.call(this), this.mainDetails = null
                            }, r._registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.LEVEL_LOADED, this.onLevelLoaded, this), e.on(I.ERROR, this.onError, this), e.on(I.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), e.on(I.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), e.on(I.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), e.on(I.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), e.on(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.on(I.FRAG_BUFFERED, this.onFragBuffered, this)
                            }, r._unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.LEVEL_LOADED, this.onLevelLoaded, this), e.off(I.ERROR, this.onError, this), e.off(I.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), e.off(I.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), e.off(I.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), e.off(I.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), e.off(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.off(I.FRAG_BUFFERED, this.onFragBuffered, this)
                            }, r.startLoad = function(e) {
                                this.stopLoad(), this.state = $n.IDLE, this.setInterval(Ua), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e, this.tick()
                            }, r.onManifestLoading = function() {
                                this.mainDetails = null, this.fragmentTracker.removeAllFragments()
                            }, r.onMediaDetaching = function() {
                                this.tracksBuffered = [], e.prototype.onMediaDetaching.call(this)
                            }, r.onLevelLoaded = function(e, t) {
                                this.mainDetails = t.details
                            }, r.onSubtitleFragProcessed = function(e, t) {
                                var r = t.frag,
                                    n = t.success;
                                if (this.fragPrevious = r, this.state = $n.IDLE, n) {
                                    var i = this.tracksBuffered[this.currentTrackId];
                                    if (i) {
                                        for (var a, s = r.start, o = 0; o < i.length; o++)
                                            if (s >= i[o].start && s <= i[o].end) {
                                                a = i[o];
                                                break
                                            }
                                        var l = r.start + r.duration;
                                        a ? a.end = l : (a = {
                                            start: s,
                                            end: l
                                        }, i.push(a)), this.fragmentTracker.fragBuffered(r), this.fragBufferedComplete(r, null)
                                    }
                                }
                            }, r.onBufferFlushing = function(e, t) {
                                var r = t.startOffset,
                                    n = t.endOffset;
                                if (0 === r && n !== Number.POSITIVE_INFINITY) {
                                    var i = n - 1;
                                    if (i <= 0) return;
                                    t.endOffsetSubtitles = Math.max(0, i), this.tracksBuffered.forEach((function(e) {
                                        for (var t = 0; t < e.length;)
                                            if (e[t].end <= i) e.shift();
                                            else {
                                                if (!(e[t].start < i)) break;
                                                e[t].start = i, t++
                                            }
                                    })), this.fragmentTracker.removeFragmentsInRange(r, i, $t.SUBTITLE)
                                }
                            }, r.onFragBuffered = function(e, t) {
                                var r;
                                this.loadedmetadata || t.frag.type !== $t.MAIN || null != (r = this.media) && r.buffered.length && (this.loadedmetadata = !0)
                            }, r.onError = function(e, t) {
                                var r = t.frag;
                                (null == r ? void 0 : r.type) === $t.SUBTITLE && (this.fragCurrent && this.fragCurrent.abortRequests(), this.state !== $n.STOPPED && (this.state = $n.IDLE))
                            }, r.onSubtitleTracksUpdated = function(e, t) {
                                var r = this,
                                    n = t.subtitleTracks;
                                this.levels && !_a(this.levels, n) ? (this.tracksBuffered = [], this.levels = n.map((function(e) {
                                    var t = new Ar(e);
                                    return r.tracksBuffered[t.id] = [], t
                                })), this.fragmentTracker.removeFragmentsInRange(0, Number.POSITIVE_INFINITY, $t.SUBTITLE), this.fragPrevious = null, this.mediaBuffer = null) : this.levels = n.map((function(e) {
                                    return new Ar(e)
                                }))
                            }, r.onSubtitleTrackSwitch = function(e, t) {
                                var r;
                                if (this.currentTrackId = t.id, null != (r = this.levels) && r.length && -1 !== this.currentTrackId) {
                                    var n = this.levels[this.currentTrackId];
                                    null != n && n.details ? this.mediaBuffer = this.mediaBufferTimeRanges : this.mediaBuffer = null, n && this.setInterval(Ua)
                                } else this.clearInterval()
                            }, r.onSubtitleTrackLoaded = function(e, t) {
                                var r, n = this.currentTrackId,
                                    i = this.levels,
                                    a = t.details,
                                    s = t.id;
                                if (i) {
                                    var o = i[n];
                                    if (!(s >= i.length || s !== n) && o) {
                                        this.log("Subtitle track " + s + " loaded [" + a.startSN + "," + a.endSN + "]" + (a.lastPartSn ? "[part-" + a.lastPartSn + "-" + a.lastPartIndex + "]" : "") + ",duration:" + a.totalduration), this.mediaBuffer = this.mediaBufferTimeRanges;
                                        var l = 0;
                                        if (a.live || null != (r = o.details) && r.live) {
                                            var u = this.mainDetails;
                                            if (a.deltaUpdateFailed || !u) return;
                                            var c, d = u.fragments[0];
                                            o.details ? 0 === (l = this.alignPlaylists(a, o.details, null == (c = this.levelLastLoaded) ? void 0 : c.details)) && d && _r(a, l = d.start) : a.hasProgramDateTime && u.hasProgramDateTime ? (Nn(a, u), l = a.fragments[0].start) : d && _r(a, l = d.start)
                                        }
                                        o.details = a, this.levelLastLoaded = o, this.startFragRequested || !this.mainDetails && a.live || this.setStartPosition(this.mainDetails || a, l), this.tick(), a.live && !this.fragCurrent && this.media && this.state === $n.IDLE && (Wr(null, a.fragments, this.media.currentTime, 0) || (this.warn("Subtitle playlist not aligned with playback"), o.details = void 0))
                                    }
                                } else this.warn("Subtitle tracks were reset while loading level " + s)
                            }, r._handleFragmentLoadComplete = function(e) {
                                var t = this,
                                    r = e.frag,
                                    n = e.payload,
                                    i = r.decryptdata,
                                    a = this.hls;
                                if (!this.fragContextChanged(r) && n && n.byteLength > 0 && null != i && i.key && i.iv && "AES-128" === i.method) {
                                    var s = performance.now();
                                    this.decrypter.decrypt(new Uint8Array(n), i.key.buffer, i.iv.buffer).catch((function(e) {
                                        throw a.trigger(I.ERROR, {
                                            type: w.MEDIA_ERROR,
                                            details: D.FRAG_DECRYPT_ERROR,
                                            fatal: !1,
                                            error: e,
                                            reason: e.message,
                                            frag: r
                                        }), e
                                    })).then((function(e) {
                                        var t = performance.now();
                                        a.trigger(I.FRAG_DECRYPTED, {
                                            frag: r,
                                            payload: e,
                                            stats: {
                                                tstart: s,
                                                tdecrypt: t
                                            }
                                        })
                                    })).catch((function(e) {
                                        t.warn(e.name + ": " + e.message), t.state = $n.IDLE
                                    }))
                                }
                            }, r.doTick = function() {
                                if (this.media) {
                                    if (this.state === $n.IDLE) {
                                        var e = this.currentTrackId,
                                            t = this.levels,
                                            r = null == t ? void 0 : t[e];
                                        if (!r || !t.length || !r.details) return;
                                        var n = this.config,
                                            i = this.getLoadPosition(),
                                            a = In.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], i, n.maxBufferHole),
                                            s = a.end,
                                            o = a.len,
                                            l = this.getFwdBufferInfo(this.media, $t.MAIN),
                                            u = r.details;
                                        if (o > this.getMaxBufferLength(null == l ? void 0 : l.len) + u.levelTargetDuration) return;
                                        var c = u.fragments,
                                            d = c.length,
                                            h = u.edge,
                                            f = null,
                                            g = this.fragPrevious;
                                        if (s < h) {
                                            var p = n.maxFragLookUpTolerance,
                                                m = s > h - p ? 0 : p;
                                            !(f = Wr(g, c, Math.max(c[0].start, s), m)) && g && g.start < c[0].start && (f = c[0])
                                        } else f = c[d - 1];
                                        if (!f) return;
                                        if ("initSegment" !== (f = this.mapToInitFragWhenRequired(f)).sn) {
                                            var v = c[f.sn - u.startSN - 1];
                                            v && v.cc === f.cc && this.fragmentTracker.getState(v) === Sn.NOT_LOADED && (f = v)
                                        }
                                        this.fragmentTracker.getState(f) === Sn.NOT_LOADED && this.loadFragment(f, r, s)
                                    }
                                } else this.state = $n.IDLE
                            }, r.getMaxBufferLength = function(t) {
                                var r = e.prototype.getMaxBufferLength.call(this);
                                return t ? Math.max(r, t) : r
                            }, r.loadFragment = function(t, r, n) {
                                this.fragCurrent = t, "initSegment" === t.sn ? this._loadInitSegment(t, r) : (this.startFragRequested = !0, e.prototype.loadFragment.call(this, t, r, n))
                            }, o(t, [{
                                key: "mediaBufferTimeRanges",
                                get: function() {
                                    return new Ga(this.tracksBuffered[this.currentTrackId] || [])
                                }
                            }]), t
                        }(Jn),
                        Ga = function(e) {
                            this.buffered = void 0;
                            var t = function(t, r, n) {
                                if ((r >>>= 0) > n - 1) throw new DOMException("Failed to execute '" + t + "' on 'TimeRanges': The index provided (" + r + ") is greater than the maximum bound (" + n + ")");
                                return e[r][t]
                            };
                            this.buffered = {
                                get length() {
                                    return e.length
                                },
                                end: function(r) {
                                    return t("end", r, e.length)
                                },
                                start: function(r) {
                                    return t("start", r, e.length)
                                }
                            }
                        },
                        Va = function(e) {
                            function t(t) {
                                var r;
                                return (r = e.call(this, t, "[subtitle-track-controller]") || this).media = null, r.tracks = [], r.groupIds = null, r.tracksInGroup = [], r.trackId = -1, r.currentTrack = null, r.selectDefaultTrack = !0, r.queuedDefaultTrack = -1, r.asyncPollTrackChange = function() {
                                    return r.pollTrackChange(0)
                                }, r.useTextTrackPolling = !1, r.subtitlePollingInterval = -1, r._subtitleDisplay = !0, r.onTextTracksChanged = function() {
                                    if (r.useTextTrackPolling || self.clearInterval(r.subtitlePollingInterval), r.media && r.hls.config.renderTextTracksNatively) {
                                        for (var e = null, t = sr(r.media.textTracks), n = 0; n < t.length; n++)
                                            if ("hidden" === t[n].mode) e = t[n];
                                            else if ("showing" === t[n].mode) {
                                            e = t[n];
                                            break
                                        }
                                        var i = r.findTrackForTextTrack(e);
                                        r.subtitleTrack !== i && r.setSubtitleTrack(i)
                                    }
                                }, r.registerListeners(), r
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r.destroy = function() {
                                this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.currentTrack = null, this.onTextTracksChanged = this.asyncPollTrackChange = null, e.prototype.destroy.call(this)
                            }, r.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.MANIFEST_PARSED, this.onManifestParsed, this), e.on(I.LEVEL_LOADING, this.onLevelLoading, this), e.on(I.LEVEL_SWITCHING, this.onLevelSwitching, this), e.on(I.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), e.on(I.ERROR, this.onError, this)
                            }, r.unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.MANIFEST_PARSED, this.onManifestParsed, this), e.off(I.LEVEL_LOADING, this.onLevelLoading, this), e.off(I.LEVEL_SWITCHING, this.onLevelSwitching, this), e.off(I.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), e.off(I.ERROR, this.onError, this)
                            }, r.onMediaAttached = function(e, t) {
                                this.media = t.media, this.media && (this.queuedDefaultTrack > -1 && (this.subtitleTrack = this.queuedDefaultTrack, this.queuedDefaultTrack = -1), this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks), this.useTextTrackPolling ? this.pollTrackChange(500) : this.media.textTracks.addEventListener("change", this.asyncPollTrackChange))
                            }, r.pollTrackChange = function(e) {
                                self.clearInterval(this.subtitlePollingInterval), this.subtitlePollingInterval = self.setInterval(this.onTextTracksChanged, e)
                            }, r.onMediaDetaching = function() {
                                this.media && (self.clearInterval(this.subtitlePollingInterval), this.useTextTrackPolling || this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange), this.trackId > -1 && (this.queuedDefaultTrack = this.trackId), sr(this.media.textTracks).forEach((function(e) {
                                    rr(e)
                                })), this.subtitleTrack = -1, this.media = null)
                            }, r.onManifestLoading = function() {
                                this.tracks = [], this.groupIds = null, this.tracksInGroup = [], this.trackId = -1, this.currentTrack = null, this.selectDefaultTrack = !0
                            }, r.onManifestParsed = function(e, t) {
                                this.tracks = t.subtitleTracks
                            }, r.onSubtitleTrackLoaded = function(e, t) {
                                var r = t.id,
                                    n = t.groupId,
                                    i = t.details,
                                    a = this.tracksInGroup[r];
                                if (a && a.groupId === n) {
                                    var s = a.details;
                                    a.details = t.details, this.log("Subtitle track " + r + ' "' + a.name + '" lang:' + a.lang + " group:" + n + " loaded [" + i.startSN + "-" + i.endSN + "]"), r === this.trackId && this.playlistLoaded(r, t, s)
                                } else this.warn("Subtitle track with id:" + r + " and group:" + n + " not found in active group " + (null == a ? void 0 : a.groupId))
                            }, r.onLevelLoading = function(e, t) {
                                this.switchLevel(t.level)
                            }, r.onLevelSwitching = function(e, t) {
                                this.switchLevel(t.level)
                            }, r.switchLevel = function(e) {
                                var t = this.hls.levels[e];
                                if (t) {
                                    var r = t.subtitleGroups || null,
                                        n = this.groupIds,
                                        i = this.currentTrack;
                                    if (!r || (null == n ? void 0 : n.length) !== (null == r ? void 0 : r.length) || null != r && r.some((function(e) {
                                            return -1 === (null == n ? void 0 : n.indexOf(e))
                                        }))) {
                                        this.groupIds = r, this.trackId = -1, this.currentTrack = null;
                                        var a = this.tracks.filter((function(e) {
                                            return !r || -1 !== r.indexOf(e.groupId)
                                        }));
                                        if (a.length) this.selectDefaultTrack && !a.some((function(e) {
                                            return e.default
                                        })) && (this.selectDefaultTrack = !1), a.forEach((function(e, t) {
                                            e.id = t
                                        }));
                                        else if (!i && !this.tracksInGroup.length) return;
                                        this.tracksInGroup = a;
                                        var s = this.hls.config.subtitlePreference;
                                        if (!i && s) {
                                            this.selectDefaultTrack = !1;
                                            var o = gn(s, a);
                                            if (o > -1) i = a[o];
                                            else {
                                                var l = gn(s, this.tracks);
                                                i = this.tracks[l]
                                            }
                                        }
                                        var u = this.findTrackId(i); - 1 === u && i && (u = this.findTrackId(null));
                                        var c = {
                                            subtitleTracks: a
                                        };
                                        this.log("Updating subtitle tracks, " + a.length + ' track(s) found in "' + (null == r ? void 0 : r.join(",")) + '" group-id'), this.hls.trigger(I.SUBTITLE_TRACKS_UPDATED, c), -1 !== u && -1 === this.trackId && this.setSubtitleTrack(u)
                                    } else this.shouldReloadPlaylist(i) && this.setSubtitleTrack(this.trackId)
                                }
                            }, r.findTrackId = function(e) {
                                for (var t = this.tracksInGroup, r = this.selectDefaultTrack, n = 0; n < t.length; n++) {
                                    var i = t[n];
                                    if ((!r || i.default) && (r || e) && (!e || pn(i, e))) return n
                                }
                                if (e) {
                                    for (var a = 0; a < t.length; a++) {
                                        var s = t[a];
                                        if (Oa(e.attrs, s.attrs, ["LANGUAGE", "ASSOC-LANGUAGE", "CHARACTERISTICS"])) return a
                                    }
                                    for (var o = 0; o < t.length; o++) {
                                        var l = t[o];
                                        if (Oa(e.attrs, l.attrs, ["LANGUAGE"])) return o
                                    }
                                }
                                return -1
                            }, r.findTrackForTextTrack = function(e) {
                                if (e)
                                    for (var t = this.tracksInGroup, r = 0; r < t.length; r++)
                                        if (Pa(t[r], e)) return r;
                                return -1
                            }, r.onError = function(e, t) {
                                !t.fatal && t.context && (t.context.type !== Xt.SUBTITLE_TRACK || t.context.id !== this.trackId || this.groupIds && -1 === this.groupIds.indexOf(t.context.groupId) || this.checkRetry(t))
                            }, r.setSubtitleOption = function(e) {
                                if (this.hls.config.subtitlePreference = e, e) {
                                    var t = this.allSubtitleTracks;
                                    if (this.selectDefaultTrack = !1, t.length) {
                                        var r = this.currentTrack;
                                        if (r && pn(e, r)) return r;
                                        var n = gn(e, this.tracksInGroup);
                                        if (n > -1) {
                                            var i = this.tracksInGroup[n];
                                            return this.setSubtitleTrack(n), i
                                        }
                                        if (r) return null;
                                        var a = gn(e, t);
                                        if (a > -1) return t[a]
                                    }
                                }
                                return null
                            }, r.loadPlaylist = function(t) {
                                e.prototype.loadPlaylist.call(this);
                                var r = this.currentTrack;
                                if (this.shouldLoadPlaylist(r) && r) {
                                    var n = r.id,
                                        i = r.groupId,
                                        a = r.url;
                                    if (t) try {
                                        a = t.addDirectives(a)
                                    } catch (e) {
                                        this.warn("Could not construct new URL with HLS Delivery Directives: " + e)
                                    }
                                    this.log("Loading subtitle playlist for id " + n), this.hls.trigger(I.SUBTITLE_TRACK_LOADING, {
                                        url: a,
                                        id: n,
                                        groupId: i,
                                        deliveryDirectives: t || null
                                    })
                                }
                            }, r.toggleTrackModes = function() {
                                var e = this.media;
                                if (e) {
                                    var t, r = sr(e.textTracks),
                                        n = this.currentTrack;
                                    if (n && ((t = r.filter((function(e) {
                                            return Pa(n, e)
                                        }))[0]) || this.warn('Unable to find subtitle TextTrack with name "' + n.name + '" and language "' + n.lang + '"')), [].slice.call(r).forEach((function(e) {
                                            "disabled" !== e.mode && e !== t && (e.mode = "disabled")
                                        })), t) {
                                        var i = this.subtitleDisplay ? "showing" : "hidden";
                                        t.mode !== i && (t.mode = i)
                                    }
                                }
                            }, r.setSubtitleTrack = function(e) {
                                var t = this.tracksInGroup;
                                if (this.media)
                                    if (e < -1 || e >= t.length || !k(e)) this.warn("Invalid subtitle track id: " + e);
                                    else {
                                        this.clearTimer(), this.selectDefaultTrack = !1;
                                        var r = this.currentTrack,
                                            n = t[e] || null;
                                        if (this.trackId = e, this.currentTrack = n, this.toggleTrackModes(), n) {
                                            var i = !!n.details && !n.details.live;
                                            if (e !== this.trackId || n !== r || !i) {
                                                this.log("Switching to subtitle-track " + e + (n ? ' "' + n.name + '" lang:' + n.lang + " group:" + n.groupId : ""));
                                                var a = n.id,
                                                    s = n.groupId,
                                                    o = void 0 === s ? "" : s,
                                                    l = n.name,
                                                    u = n.type,
                                                    c = n.url;
                                                this.hls.trigger(I.SUBTITLE_TRACK_SWITCH, {
                                                    id: a,
                                                    groupId: o,
                                                    name: l,
                                                    type: u,
                                                    url: c
                                                });
                                                var d = this.switchParams(n.url, null == r ? void 0 : r.details);
                                                this.loadPlaylist(d)
                                            }
                                        } else this.hls.trigger(I.SUBTITLE_TRACK_SWITCH, {
                                            id: e
                                        })
                                    }
                                else this.queuedDefaultTrack = e
                            }, o(t, [{
                                key: "subtitleDisplay",
                                get: function() {
                                    return this._subtitleDisplay
                                },
                                set: function(e) {
                                    this._subtitleDisplay = e, this.trackId > -1 && this.toggleTrackModes()
                                }
                            }, {
                                key: "allSubtitleTracks",
                                get: function() {
                                    return this.tracks
                                }
                            }, {
                                key: "subtitleTracks",
                                get: function() {
                                    return this.tracksInGroup
                                }
                            }, {
                                key: "subtitleTrack",
                                get: function() {
                                    return this.trackId
                                },
                                set: function(e) {
                                    this.selectDefaultTrack = !1, this.setSubtitleTrack(e)
                                }
                            }]), t
                        }(Zr),
                        Ha = function() {
                            function e(e) {
                                this.buffers = void 0, this.queues = {
                                    video: [],
                                    audio: [],
                                    audiovideo: []
                                }, this.buffers = e
                            }
                            var t = e.prototype;
                            return t.append = function(e, t, r) {
                                var n = this.queues[t];
                                n.push(e), 1 !== n.length || r || this.executeNext(t)
                            }, t.insertAbort = function(e, t) {
                                this.queues[t].unshift(e), this.executeNext(t)
                            }, t.appendBlocker = function(e) {
                                var t, r = new Promise((function(e) {
                                        t = e
                                    })),
                                    n = {
                                        execute: t,
                                        onStart: function() {},
                                        onComplete: function() {},
                                        onError: function() {}
                                    };
                                return this.append(n, e), r
                            }, t.executeNext = function(e) {
                                var t = this.queues[e];
                                if (t.length) {
                                    var r = t[0];
                                    try {
                                        r.execute()
                                    } catch (t) {
                                        F.warn('[buffer-operation-queue]: Exception executing "' + e + '" SourceBuffer operation: ' + t), r.onError(t);
                                        var n = this.buffers[e];
                                        null != n && n.updating || this.shiftAndExecuteNext(e)
                                    }
                                }
                            }, t.shiftAndExecuteNext = function(e) {
                                this.queues[e].shift(), this.executeNext(e)
                            }, t.current = function(e) {
                                return this.queues[e][0]
                            }, e
                        }(),
                        Ka = /(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\.[^.,]+)+/,
                        ja = function() {
                            function e(e) {
                                var t = this;
                                this.details = null, this._objectUrl = null, this.operationQueue = void 0, this.listeners = void 0, this.hls = void 0, this.bufferCodecEventsExpected = 0, this._bufferCodecEventsTotal = 0, this.media = null, this.mediaSource = null, this.lastMpegAudioChunk = null, this.appendSource = void 0, this.appendErrors = {
                                    audio: 0,
                                    video: 0,
                                    audiovideo: 0
                                }, this.tracks = {}, this.pendingTracks = {}, this.sourceBuffer = void 0, this.log = void 0, this.warn = void 0, this.error = void 0, this._onEndStreaming = function(e) {
                                    t.hls && t.hls.pauseBuffering()
                                }, this._onStartStreaming = function(e) {
                                    t.hls && t.hls.resumeBuffering()
                                }, this._onMediaSourceOpen = function() {
                                    var e = t.media,
                                        r = t.mediaSource;
                                    t.log("Media source opened"), e && (e.removeEventListener("emptied", t._onMediaEmptied), t.updateMediaElementDuration(), t.hls.trigger(I.MEDIA_ATTACHED, {
                                        media: e,
                                        mediaSource: r
                                    })), r && r.removeEventListener("sourceopen", t._onMediaSourceOpen), t.checkPendingTracks()
                                }, this._onMediaSourceClose = function() {
                                    t.log("Media source closed")
                                }, this._onMediaSourceEnded = function() {
                                    t.log("Media source ended")
                                }, this._onMediaEmptied = function() {
                                    var e = t.mediaSrc,
                                        r = t._objectUrl;
                                    e !== r && F.error("Media element src was set while attaching MediaSource (" + r + " > " + e + ")")
                                }, this.hls = e;
                                var r = "[buffer-controller]";
                                this.appendSource = e.config.preferManagedMediaSource, this.log = F.log.bind(F, r), this.warn = F.warn.bind(F, r), this.error = F.error.bind(F, r), this._initSourceBuffer(), this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.hasSourceTypes = function() {
                                return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0
                            }, t.destroy = function() {
                                this.unregisterListeners(), this.details = null, this.lastMpegAudioChunk = null, this.hls = null
                            }, t.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MEDIA_ATTACHING, this.onMediaAttaching, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.MANIFEST_PARSED, this.onManifestParsed, this), e.on(I.BUFFER_RESET, this.onBufferReset, this), e.on(I.BUFFER_APPENDING, this.onBufferAppending, this), e.on(I.BUFFER_CODECS, this.onBufferCodecs, this), e.on(I.BUFFER_EOS, this.onBufferEos, this), e.on(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.on(I.LEVEL_UPDATED, this.onLevelUpdated, this), e.on(I.FRAG_PARSED, this.onFragParsed, this), e.on(I.FRAG_CHANGED, this.onFragChanged, this)
                            }, t.unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MEDIA_ATTACHING, this.onMediaAttaching, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.MANIFEST_PARSED, this.onManifestParsed, this), e.off(I.BUFFER_RESET, this.onBufferReset, this), e.off(I.BUFFER_APPENDING, this.onBufferAppending, this), e.off(I.BUFFER_CODECS, this.onBufferCodecs, this), e.off(I.BUFFER_EOS, this.onBufferEos, this), e.off(I.BUFFER_FLUSHING, this.onBufferFlushing, this), e.off(I.LEVEL_UPDATED, this.onLevelUpdated, this), e.off(I.FRAG_PARSED, this.onFragParsed, this), e.off(I.FRAG_CHANGED, this.onFragChanged, this)
                            }, t._initSourceBuffer = function() {
                                this.sourceBuffer = {}, this.operationQueue = new Ha(this.sourceBuffer), this.listeners = {
                                    audio: [],
                                    video: [],
                                    audiovideo: []
                                }, this.appendErrors = {
                                    audio: 0,
                                    video: 0,
                                    audiovideo: 0
                                }, this.lastMpegAudioChunk = null
                            }, t.onManifestLoading = function() {
                                this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = 0, this.details = null
                            }, t.onManifestParsed = function(e, t) {
                                var r = 2;
                                (t.audio && !t.video || !t.altAudio) && (r = 1), this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r, this.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected")
                            }, t.onMediaAttaching = function(e, t) {
                                var r = this.media = t.media,
                                    n = Et(this.appendSource);
                                if (r && n) {
                                    var i, a = this.mediaSource = new n;
                                    this.log("created media source: " + (null == (i = a.constructor) ? void 0 : i.name)), a.addEventListener("sourceopen", this._onMediaSourceOpen), a.addEventListener("sourceended", this._onMediaSourceEnded), a.addEventListener("sourceclose", this._onMediaSourceClose), a.addEventListener("startstreaming", this._onStartStreaming), a.addEventListener("endstreaming", this._onEndStreaming);
                                    var s = this._objectUrl = self.URL.createObjectURL(a);
                                    if (this.appendSource) try {
                                        r.removeAttribute("src");
                                        var o = self.ManagedMediaSource;
                                        r.disableRemotePlayback = r.disableRemotePlayback || o && a instanceof o, Ya(r), Wa(r, s), r.load()
                                    } catch (e) {
                                        r.src = s
                                    } else r.src = s;
                                    r.addEventListener("emptied", this._onMediaEmptied)
                                }
                            }, t.onMediaDetaching = function() {
                                var e = this.media,
                                    t = this.mediaSource,
                                    r = this._objectUrl;
                                if (t) {
                                    if (this.log("media source detaching"), "open" === t.readyState) try {
                                        t.endOfStream()
                                    } catch (e) {
                                        this.warn("onMediaDetaching: " + e.message + " while calling endOfStream")
                                    }
                                    this.onBufferReset(), t.removeEventListener("sourceopen", this._onMediaSourceOpen), t.removeEventListener("sourceended", this._onMediaSourceEnded), t.removeEventListener("sourceclose", this._onMediaSourceClose), t.removeEventListener("startstreaming", this._onStartStreaming), t.removeEventListener("endstreaming", this._onEndStreaming), e && (e.removeEventListener("emptied", this._onMediaEmptied), r && self.URL.revokeObjectURL(r), this.mediaSrc === r ? (e.removeAttribute("src"), this.appendSource && Ya(e), e.load()) : this.warn("media|source.src was changed by a third party - skip cleanup")), this.mediaSource = null, this.media = null, this._objectUrl = null, this.bufferCodecEventsExpected = this._bufferCodecEventsTotal, this.pendingTracks = {}, this.tracks = {}
                                }
                                this.hls.trigger(I.MEDIA_DETACHED, void 0)
                            }, t.onBufferReset = function() {
                                var e = this;
                                this.getSourceBufferTypes().forEach((function(t) {
                                    e.resetBuffer(t)
                                })), this._initSourceBuffer()
                            }, t.resetBuffer = function(e) {
                                var t = this.sourceBuffer[e];
                                try {
                                    var r;
                                    t && (this.removeBufferListeners(e), this.sourceBuffer[e] = void 0, null != (r = this.mediaSource) && r.sourceBuffers.length && this.mediaSource.removeSourceBuffer(t))
                                } catch (t) {
                                    this.warn("onBufferReset " + e, t)
                                }
                            }, t.onBufferCodecs = function(e, t) {
                                var r = this,
                                    n = this.getSourceBufferTypes().length,
                                    i = Object.keys(t);
                                if (i.forEach((function(e) {
                                        if (n) {
                                            var i = r.tracks[e];
                                            if (i && "function" == typeof i.buffer.changeType) {
                                                var a, s = t[e],
                                                    o = s.id,
                                                    l = s.codec,
                                                    u = s.levelCodec,
                                                    c = s.container,
                                                    d = s.metadata,
                                                    h = Ot(i.codec, i.levelCodec),
                                                    f = null == h ? void 0 : h.replace(Ka, "$1"),
                                                    g = Ot(l, u),
                                                    p = null == (a = g) ? void 0 : a.replace(Ka, "$1");
                                                if (g && f !== p) {
                                                    "audio" === e.slice(0, 5) && (g = _t(g, r.hls.config.preferManagedMediaSource));
                                                    var m = c + ";codecs=" + g;
                                                    r.appendChangeType(e, m), r.log("switching codec " + h + " to " + g), r.tracks[e] = {
                                                        buffer: i.buffer,
                                                        codec: l,
                                                        container: c,
                                                        levelCodec: u,
                                                        metadata: d,
                                                        id: o
                                                    }
                                                }
                                            }
                                        } else r.pendingTracks[e] = t[e]
                                    })), !n) {
                                    var a = Math.max(this.bufferCodecEventsExpected - 1, 0);
                                    this.bufferCodecEventsExpected !== a && (this.log(a + " bufferCodec event(s) expected " + i.join(",")), this.bufferCodecEventsExpected = a), this.mediaSource && "open" === this.mediaSource.readyState && this.checkPendingTracks()
                                }
                            }, t.appendChangeType = function(e, t) {
                                var r = this,
                                    n = this.operationQueue,
                                    i = {
                                        execute: function() {
                                            var i = r.sourceBuffer[e];
                                            i && (r.log("changing " + e + " sourceBuffer type to " + t), i.changeType(t)), n.shiftAndExecuteNext(e)
                                        },
                                        onStart: function() {},
                                        onComplete: function() {},
                                        onError: function(t) {
                                            r.warn("Failed to change " + e + " SourceBuffer type", t)
                                        }
                                    };
                                n.append(i, e, !!this.pendingTracks[e])
                            }, t.onBufferAppending = function(e, t) {
                                var r = this,
                                    n = this.hls,
                                    i = this.operationQueue,
                                    a = this.tracks,
                                    s = t.data,
                                    o = t.type,
                                    l = t.frag,
                                    u = t.part,
                                    c = t.chunkMeta,
                                    d = c.buffering[o],
                                    h = self.performance.now();
                                d.start = h;
                                var f = l.stats.buffering,
                                    g = u ? u.stats.buffering : null;
                                0 === f.start && (f.start = h), g && 0 === g.start && (g.start = h);
                                var p = a.audio,
                                    m = !1;
                                "audio" === o && "audio/mpeg" === (null == p ? void 0 : p.container) && (m = !this.lastMpegAudioChunk || 1 === c.id || this.lastMpegAudioChunk.sn !== c.sn, this.lastMpegAudioChunk = c);
                                var v = l.start,
                                    y = {
                                        execute: function() {
                                            if (d.executeStart = self.performance.now(), m) {
                                                var e = r.sourceBuffer[o];
                                                if (e) {
                                                    var t = v - e.timestampOffset;
                                                    Math.abs(t) >= .1 && (r.log("Updating audio SourceBuffer timestampOffset to " + v + " (delta: " + t + ") sn: " + l.sn + ")"), e.timestampOffset = v)
                                                }
                                            }
                                            r.appendExecutor(s, o)
                                        },
                                        onStart: function() {},
                                        onComplete: function() {
                                            var e = self.performance.now();
                                            d.executeEnd = d.end = e, 0 === f.first && (f.first = e), g && 0 === g.first && (g.first = e);
                                            var t = r.sourceBuffer,
                                                n = {};
                                            for (var i in t) n[i] = In.getBuffered(t[i]);
                                            r.appendErrors[o] = 0, "audio" === o || "video" === o ? r.appendErrors.audiovideo = 0 : (r.appendErrors.audio = 0, r.appendErrors.video = 0), r.hls.trigger(I.BUFFER_APPENDED, {
                                                type: o,
                                                frag: l,
                                                part: u,
                                                chunkMeta: c,
                                                parent: l.type,
                                                timeRanges: n
                                            })
                                        },
                                        onError: function(e) {
                                            var t = {
                                                type: w.MEDIA_ERROR,
                                                parent: l.type,
                                                details: D.BUFFER_APPEND_ERROR,
                                                sourceBufferName: o,
                                                frag: l,
                                                part: u,
                                                chunkMeta: c,
                                                error: e,
                                                err: e,
                                                fatal: !1
                                            };
                                            if (e.code === DOMException.QUOTA_EXCEEDED_ERR) t.details = D.BUFFER_FULL_ERROR;
                                            else {
                                                var i = ++r.appendErrors[o];
                                                t.details = D.BUFFER_APPEND_ERROR, r.warn("Failed " + i + "/" + n.config.appendErrorMaxRetry + ' times to append segment in "' + o + '" sourceBuffer'), i >= n.config.appendErrorMaxRetry && (t.fatal = !0)
                                            }
                                            n.trigger(I.ERROR, t)
                                        }
                                    };
                                i.append(y, o, !!this.pendingTracks[o])
                            }, t.onBufferFlushing = function(e, t) {
                                var r = this,
                                    n = this.operationQueue,
                                    i = function(e) {
                                        return {
                                            execute: r.removeExecutor.bind(r, e, t.startOffset, t.endOffset),
                                            onStart: function() {},
                                            onComplete: function() {
                                                r.hls.trigger(I.BUFFER_FLUSHED, {
                                                    type: e
                                                })
                                            },
                                            onError: function(t) {
                                                r.warn("Failed to remove from " + e + " SourceBuffer", t)
                                            }
                                        }
                                    };
                                t.type ? n.append(i(t.type), t.type) : this.getSourceBufferTypes().forEach((function(e) {
                                    n.append(i(e), e)
                                }))
                            }, t.onFragParsed = function(e, t) {
                                var r = this,
                                    n = t.frag,
                                    i = t.part,
                                    a = [],
                                    s = i ? i.elementaryStreams : n.elementaryStreams;
                                s[j.AUDIOVIDEO] ? a.push("audiovideo") : (s[j.AUDIO] && a.push("audio"), s[j.VIDEO] && a.push("video"));
                                var o = function() {
                                    var e = self.performance.now();
                                    n.stats.buffering.end = e, i && (i.stats.buffering.end = e);
                                    var t = i ? i.stats : n.stats;
                                    r.hls.trigger(I.FRAG_BUFFERED, {
                                        frag: n,
                                        part: i,
                                        stats: t,
                                        id: n.type
                                    })
                                };
                                0 === a.length && this.warn("Fragments must have at least one ElementaryStreamType set. type: " + n.type + " level: " + n.level + " sn: " + n.sn), this.blockBuffers(o, a)
                            }, t.onFragChanged = function(e, t) {
                                this.trimBuffers()
                            }, t.onBufferEos = function(e, t) {
                                var r = this;
                                this.getSourceBufferTypes().reduce((function(e, n) {
                                    var i = r.sourceBuffer[n];
                                    return !i || t.type && t.type !== n || (i.ending = !0, i.ended || (i.ended = !0, r.log(n + " sourceBuffer now EOS"))), e && !(i && !i.ended)
                                }), !0) && (this.log("Queueing mediaSource.endOfStream()"), this.blockBuffers((function() {
                                    r.getSourceBufferTypes().forEach((function(e) {
                                        var t = r.sourceBuffer[e];
                                        t && (t.ending = !1)
                                    }));
                                    var e = r.mediaSource;
                                    e && "open" === e.readyState ? (r.log("Calling mediaSource.endOfStream()"), e.endOfStream()) : e && r.log("Could not call mediaSource.endOfStream(). mediaSource.readyState: " + e.readyState)
                                })))
                            }, t.onLevelUpdated = function(e, t) {
                                var r = t.details;
                                r.fragments.length && (this.details = r, this.getSourceBufferTypes().length ? this.blockBuffers(this.updateMediaElementDuration.bind(this)) : this.updateMediaElementDuration())
                            }, t.trimBuffers = function() {
                                var e = this.hls,
                                    t = this.details,
                                    r = this.media;
                                if (r && null !== t && this.getSourceBufferTypes().length) {
                                    var n = e.config,
                                        i = r.currentTime,
                                        a = t.levelTargetDuration,
                                        s = t.live && null !== n.liveBackBufferLength ? n.liveBackBufferLength : n.backBufferLength;
                                    if (k(s) && s > 0) {
                                        var o = Math.max(s, a),
                                            l = Math.floor(i / a) * a - o;
                                        this.flushBackBuffer(i, a, l)
                                    }
                                    if (k(n.frontBufferFlushThreshold) && n.frontBufferFlushThreshold > 0) {
                                        var u = Math.max(n.maxBufferLength, n.frontBufferFlushThreshold),
                                            c = Math.max(u, a),
                                            d = Math.floor(i / a) * a + c;
                                        this.flushFrontBuffer(i, a, d)
                                    }
                                }
                            }, t.flushBackBuffer = function(e, t, r) {
                                var n = this,
                                    i = this.details,
                                    a = this.sourceBuffer;
                                this.getSourceBufferTypes().forEach((function(s) {
                                    var o = a[s];
                                    if (o) {
                                        var l = In.getBuffered(o);
                                        if (l.length > 0 && r > l.start(0)) {
                                            if (n.hls.trigger(I.BACK_BUFFER_REACHED, {
                                                    bufferEnd: r
                                                }), null != i && i.live) n.hls.trigger(I.LIVE_BACK_BUFFER_REACHED, {
                                                bufferEnd: r
                                            });
                                            else if (o.ended && l.end(l.length - 1) - e < 2 * t) return void n.log("Cannot flush " + s + " back buffer while SourceBuffer is in ended state");
                                            n.hls.trigger(I.BUFFER_FLUSHING, {
                                                startOffset: 0,
                                                endOffset: r,
                                                type: s
                                            })
                                        }
                                    }
                                }))
                            }, t.flushFrontBuffer = function(e, t, r) {
                                var n = this,
                                    i = this.sourceBuffer;
                                this.getSourceBufferTypes().forEach((function(a) {
                                    var s = i[a];
                                    if (s) {
                                        var o = In.getBuffered(s),
                                            l = o.length;
                                        if (l < 2) return;
                                        var u = o.start(l - 1),
                                            c = o.end(l - 1);
                                        if (r > u || e >= u && e <= c) return;
                                        if (s.ended && e - c < 2 * t) return void n.log("Cannot flush " + a + " front buffer while SourceBuffer is in ended state");
                                        n.hls.trigger(I.BUFFER_FLUSHING, {
                                            startOffset: u,
                                            endOffset: 1 / 0,
                                            type: a
                                        })
                                    }
                                }))
                            }, t.updateMediaElementDuration = function() {
                                if (this.details && this.media && this.mediaSource && "open" === this.mediaSource.readyState) {
                                    var e = this.details,
                                        t = this.hls,
                                        r = this.media,
                                        n = this.mediaSource,
                                        i = e.fragments[0].start + e.totalduration,
                                        a = r.duration,
                                        s = k(n.duration) ? n.duration : 0;
                                    e.live && t.config.liveDurationInfinity ? (n.duration = 1 / 0, this.updateSeekableRange(e)) : (i > s && i > a || !k(a)) && (this.log("Updating Media Source duration to " + i.toFixed(3)), n.duration = i)
                                }
                            }, t.updateSeekableRange = function(e) {
                                var t = this.mediaSource,
                                    r = e.fragments;
                                if (r.length && e.live && null != t && t.setLiveSeekableRange) {
                                    var n = Math.max(0, r[0].start),
                                        i = Math.max(n, n + e.totalduration);
                                    this.log("Media Source duration is set to " + t.duration + ". Setting seekable range to " + n + "-" + i + "."), t.setLiveSeekableRange(n, i)
                                }
                            }, t.checkPendingTracks = function() {
                                var e = this.bufferCodecEventsExpected,
                                    t = this.operationQueue,
                                    r = this.pendingTracks,
                                    n = Object.keys(r).length;
                                if (n && (!e || 2 === n || "audiovideo" in r)) {
                                    this.createSourceBuffers(r), this.pendingTracks = {};
                                    var i = this.getSourceBufferTypes();
                                    if (i.length) this.hls.trigger(I.BUFFER_CREATED, {
                                        tracks: this.tracks
                                    }), i.forEach((function(e) {
                                        t.executeNext(e)
                                    }));
                                    else {
                                        var a = new Error("could not create source buffer for media codec(s)");
                                        this.hls.trigger(I.ERROR, {
                                            type: w.MEDIA_ERROR,
                                            details: D.BUFFER_INCOMPATIBLE_CODECS_ERROR,
                                            fatal: !0,
                                            error: a,
                                            reason: a.message
                                        })
                                    }
                                }
                            }, t.createSourceBuffers = function(e) {
                                var t = this,
                                    r = this.sourceBuffer,
                                    n = this.mediaSource;
                                if (!n) throw Error("createSourceBuffers called when mediaSource was null");
                                var i = function(i) {
                                    if (!r[i]) {
                                        var a = e[i];
                                        if (!a) throw Error("source buffer exists for track " + i + ", however track does not");
                                        var s = a.levelCodec || a.codec;
                                        s && "audio" === i.slice(0, 5) && (s = _t(s, t.hls.config.preferManagedMediaSource));
                                        var o = a.container + ";codecs=" + s;
                                        t.log("creating sourceBuffer(" + o + ")");
                                        try {
                                            var l = r[i] = n.addSourceBuffer(o),
                                                u = i;
                                            t.addBufferListener(u, "updatestart", t._onSBUpdateStart), t.addBufferListener(u, "updateend", t._onSBUpdateEnd), t.addBufferListener(u, "error", t._onSBUpdateError), t.addBufferListener(u, "bufferedchange", (function(e, r) {
                                                var n = r.removedRanges;
                                                null != n && n.length && t.hls.trigger(I.BUFFER_FLUSHED, {
                                                    type: i
                                                })
                                            })), t.tracks[i] = {
                                                buffer: l,
                                                codec: s,
                                                container: a.container,
                                                levelCodec: a.levelCodec,
                                                metadata: a.metadata,
                                                id: a.id
                                            }
                                        } catch (e) {
                                            t.error("error while trying to add sourceBuffer: " + e.message), t.hls.trigger(I.ERROR, {
                                                type: w.MEDIA_ERROR,
                                                details: D.BUFFER_ADD_CODEC_ERROR,
                                                fatal: !1,
                                                error: e,
                                                sourceBufferName: i,
                                                mimeType: o
                                            })
                                        }
                                    }
                                };
                                for (var a in e) i(a)
                            }, t._onSBUpdateStart = function(e) {
                                this.operationQueue.current(e).onStart()
                            }, t._onSBUpdateEnd = function(e) {
                                var t;
                                if ("closed" !== (null == (t = this.mediaSource) ? void 0 : t.readyState)) {
                                    var r = this.operationQueue;
                                    r.current(e).onComplete(), r.shiftAndExecuteNext(e)
                                } else this.resetBuffer(e)
                            }, t._onSBUpdateError = function(e, t) {
                                var r, n = new Error(e + " SourceBuffer error. MediaSource readyState: " + (null == (r = this.mediaSource) ? void 0 : r.readyState));
                                this.error("" + n, t), this.hls.trigger(I.ERROR, {
                                    type: w.MEDIA_ERROR,
                                    details: D.BUFFER_APPENDING_ERROR,
                                    sourceBufferName: e,
                                    error: n,
                                    fatal: !1
                                });
                                var i = this.operationQueue.current(e);
                                i && i.onError(n)
                            }, t.removeExecutor = function(e, t, r) {
                                var n = this.media,
                                    i = this.mediaSource,
                                    a = this.operationQueue,
                                    s = this.sourceBuffer[e];
                                if (!n || !i || !s) return this.warn("Attempting to remove from the " + e + " SourceBuffer, but it does not exist"), void a.shiftAndExecuteNext(e);
                                var o = k(n.duration) ? n.duration : 1 / 0,
                                    l = k(i.duration) ? i.duration : 1 / 0,
                                    u = Math.max(0, t),
                                    c = Math.min(r, o, l);
                                c > u && (!s.ending || s.ended) ? (s.ended = !1, this.log("Removing [" + u + "," + c + "] from the " + e + " SourceBuffer"), s.remove(u, c)) : a.shiftAndExecuteNext(e)
                            }, t.appendExecutor = function(e, t) {
                                var r = this.sourceBuffer[t];
                                if (r) r.ended = !1, r.appendBuffer(e);
                                else if (!this.pendingTracks[t]) throw new Error("Attempting to append to the " + t + " SourceBuffer, but it does not exist")
                            }, t.blockBuffers = function(e, t) {
                                var r = this;
                                if (void 0 === t && (t = this.getSourceBufferTypes()), !t.length) return this.log("Blocking operation requested, but no SourceBuffers exist"), void Promise.resolve().then(e);
                                var n = this.operationQueue,
                                    i = t.map((function(e) {
                                        return n.appendBlocker(e)
                                    }));
                                Promise.all(i).then((function() {
                                    e(), t.forEach((function(e) {
                                        var t = r.sourceBuffer[e];
                                        null != t && t.updating || n.shiftAndExecuteNext(e)
                                    }))
                                }))
                            }, t.getSourceBufferTypes = function() {
                                return Object.keys(this.sourceBuffer)
                            }, t.addBufferListener = function(e, t, r) {
                                var n = this.sourceBuffer[e];
                                if (n) {
                                    var i = r.bind(this, e);
                                    this.listeners[e].push({
                                        event: t,
                                        listener: i
                                    }), n.addEventListener(t, i)
                                }
                            }, t.removeBufferListeners = function(e) {
                                var t = this.sourceBuffer[e];
                                t && this.listeners[e].forEach((function(e) {
                                    t.removeEventListener(e.event, e.listener)
                                }))
                            }, o(e, [{
                                key: "mediaSrc",
                                get: function() {
                                    var e, t = (null == (e = this.media) ? void 0 : e.firstChild) || this.media;
                                    return null == t ? void 0 : t.src
                                }
                            }]), e
                        }();

                    function Ya(e) {
                        var t = e.querySelectorAll("source");
                        [].slice.call(t).forEach((function(t) {
                            e.removeChild(t)
                        }))
                    }

                    function Wa(e, t) {
                        var r = self.document.createElement("source");
                        r.type = "video/mp4", r.src = t, e.appendChild(r)
                    }
                    var qa = {
                            42: 225,
                            92: 233,
                            94: 237,
                            95: 243,
                            96: 250,
                            123: 231,
                            124: 247,
                            125: 209,
                            126: 241,
                            127: 9608,
                            128: 174,
                            129: 176,
                            130: 189,
                            131: 191,
                            132: 8482,
                            133: 162,
                            134: 163,
                            135: 9834,
                            136: 224,
                            137: 32,
                            138: 232,
                            139: 226,
                            140: 234,
                            141: 238,
                            142: 244,
                            143: 251,
                            144: 193,
                            145: 201,
                            146: 211,
                            147: 218,
                            148: 220,
                            149: 252,
                            150: 8216,
                            151: 161,
                            152: 42,
                            153: 8217,
                            154: 9473,
                            155: 169,
                            156: 8480,
                            157: 8226,
                            158: 8220,
                            159: 8221,
                            160: 192,
                            161: 194,
                            162: 199,
                            163: 200,
                            164: 202,
                            165: 203,
                            166: 235,
                            167: 206,
                            168: 207,
                            169: 239,
                            170: 212,
                            171: 217,
                            172: 249,
                            173: 219,
                            174: 171,
                            175: 187,
                            176: 195,
                            177: 227,
                            178: 205,
                            179: 204,
                            180: 236,
                            181: 210,
                            182: 242,
                            183: 213,
                            184: 245,
                            185: 123,
                            186: 125,
                            187: 92,
                            188: 94,
                            189: 95,
                            190: 124,
                            191: 8764,
                            192: 196,
                            193: 228,
                            194: 214,
                            195: 246,
                            196: 223,
                            197: 165,
                            198: 164,
                            199: 9475,
                            200: 197,
                            201: 229,
                            202: 216,
                            203: 248,
                            204: 9487,
                            205: 9491,
                            206: 9495,
                            207: 9499
                        },
                        za = function(e) {
                            var t = e;
                            return qa.hasOwnProperty(e) && (t = qa[e]), String.fromCharCode(t)
                        },
                        Xa = 15,
                        $a = 100,
                        Ja = {
                            17: 1,
                            18: 3,
                            21: 5,
                            22: 7,
                            23: 9,
                            16: 11,
                            19: 12,
                            20: 14
                        },
                        Qa = {
                            17: 2,
                            18: 4,
                            21: 6,
                            22: 8,
                            23: 10,
                            19: 13,
                            20: 15
                        },
                        Za = {
                            25: 1,
                            26: 3,
                            29: 5,
                            30: 7,
                            31: 9,
                            24: 11,
                            27: 12,
                            28: 14
                        },
                        es = {
                            25: 2,
                            26: 4,
                            29: 6,
                            30: 8,
                            31: 10,
                            27: 13,
                            28: 15
                        },
                        ts = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"],
                        rs = function() {
                            function e() {
                                this.time = null, this.verboseLevel = 0
                            }
                            return e.prototype.log = function(e, t) {
                                if (this.verboseLevel >= e) {
                                    var r = "function" == typeof t ? t() : t;
                                    F.log(this.time + " [" + e + "] " + r)
                                }
                            }, e
                        }(),
                        ns = function(e) {
                            for (var t = [], r = 0; r < e.length; r++) t.push(e[r].toString(16));
                            return t
                        },
                        is = function() {
                            function e() {
                                this.foreground = "white", this.underline = !1, this.italics = !1, this.background = "black", this.flash = !1
                            }
                            var t = e.prototype;
                            return t.reset = function() {
                                this.foreground = "white", this.underline = !1, this.italics = !1, this.background = "black", this.flash = !1
                            }, t.setStyles = function(e) {
                                for (var t = ["foreground", "underline", "italics", "background", "flash"], r = 0; r < t.length; r++) {
                                    var n = t[r];
                                    e.hasOwnProperty(n) && (this[n] = e[n])
                                }
                            }, t.isDefault = function() {
                                return "white" === this.foreground && !this.underline && !this.italics && "black" === this.background && !this.flash
                            }, t.equals = function(e) {
                                return this.foreground === e.foreground && this.underline === e.underline && this.italics === e.italics && this.background === e.background && this.flash === e.flash
                            }, t.copy = function(e) {
                                this.foreground = e.foreground, this.underline = e.underline, this.italics = e.italics, this.background = e.background, this.flash = e.flash
                            }, t.toString = function() {
                                return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash
                            }, e
                        }(),
                        as = function() {
                            function e() {
                                this.uchar = " ", this.penState = new is
                            }
                            var t = e.prototype;
                            return t.reset = function() {
                                this.uchar = " ", this.penState.reset()
                            }, t.setChar = function(e, t) {
                                this.uchar = e, this.penState.copy(t)
                            }, t.setPenState = function(e) {
                                this.penState.copy(e)
                            }, t.equals = function(e) {
                                return this.uchar === e.uchar && this.penState.equals(e.penState)
                            }, t.copy = function(e) {
                                this.uchar = e.uchar, this.penState.copy(e.penState)
                            }, t.isEmpty = function() {
                                return " " === this.uchar && this.penState.isDefault()
                            }, e
                        }(),
                        ss = function() {
                            function e(e) {
                                this.chars = [], this.pos = 0, this.currPenState = new is, this.cueStartTime = null, this.logger = void 0;
                                for (var t = 0; t < $a; t++) this.chars.push(new as);
                                this.logger = e
                            }
                            var t = e.prototype;
                            return t.equals = function(e) {
                                for (var t = 0; t < $a; t++)
                                    if (!this.chars[t].equals(e.chars[t])) return !1;
                                return !0
                            }, t.copy = function(e) {
                                for (var t = 0; t < $a; t++) this.chars[t].copy(e.chars[t])
                            }, t.isEmpty = function() {
                                for (var e = !0, t = 0; t < $a; t++)
                                    if (!this.chars[t].isEmpty()) {
                                        e = !1;
                                        break
                                    }
                                return e
                            }, t.setCursor = function(e) {
                                this.pos !== e && (this.pos = e), this.pos < 0 ? (this.logger.log(3, "Negative cursor position " + this.pos), this.pos = 0) : this.pos > $a && (this.logger.log(3, "Too large cursor position " + this.pos), this.pos = $a)
                            }, t.moveCursor = function(e) {
                                var t = this.pos + e;
                                if (e > 1)
                                    for (var r = this.pos + 1; r < t + 1; r++) this.chars[r].setPenState(this.currPenState);
                                this.setCursor(t)
                            }, t.backSpace = function() {
                                this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState)
                            }, t.insertChar = function(e) {
                                var t = this;
                                e >= 144 && this.backSpace();
                                var r = za(e);
                                this.pos >= $a ? this.logger.log(0, (function() {
                                    return "Cannot insert " + e.toString(16) + " (" + r + ") at position " + t.pos + ". Skipping it!"
                                })) : (this.chars[this.pos].setChar(r, this.currPenState), this.moveCursor(1))
                            }, t.clearFromPos = function(e) {
                                var t;
                                for (t = e; t < $a; t++) this.chars[t].reset()
                            }, t.clear = function() {
                                this.clearFromPos(0), this.pos = 0, this.currPenState.reset()
                            }, t.clearToEndOfRow = function() {
                                this.clearFromPos(this.pos)
                            }, t.getTextString = function() {
                                for (var e = [], t = !0, r = 0; r < $a; r++) {
                                    var n = this.chars[r].uchar;
                                    " " !== n && (t = !1), e.push(n)
                                }
                                return t ? "" : e.join("")
                            }, t.setPenStyles = function(e) {
                                this.currPenState.setStyles(e), this.chars[this.pos].setPenState(this.currPenState)
                            }, e
                        }(),
                        os = function() {
                            function e(e) {
                                this.rows = [], this.currRow = Xa - 1, this.nrRollUpRows = null, this.lastOutputScreen = null, this.logger = void 0;
                                for (var t = 0; t < Xa; t++) this.rows.push(new ss(e));
                                this.logger = e
                            }
                            var t = e.prototype;
                            return t.reset = function() {
                                for (var e = 0; e < Xa; e++) this.rows[e].clear();
                                this.currRow = Xa - 1
                            }, t.equals = function(e) {
                                for (var t = !0, r = 0; r < Xa; r++)
                                    if (!this.rows[r].equals(e.rows[r])) {
                                        t = !1;
                                        break
                                    }
                                return t
                            }, t.copy = function(e) {
                                for (var t = 0; t < Xa; t++) this.rows[t].copy(e.rows[t])
                            }, t.isEmpty = function() {
                                for (var e = !0, t = 0; t < Xa; t++)
                                    if (!this.rows[t].isEmpty()) {
                                        e = !1;
                                        break
                                    }
                                return e
                            }, t.backSpace = function() {
                                this.rows[this.currRow].backSpace()
                            }, t.clearToEndOfRow = function() {
                                this.rows[this.currRow].clearToEndOfRow()
                            }, t.insertChar = function(e) {
                                this.rows[this.currRow].insertChar(e)
                            }, t.setPen = function(e) {
                                this.rows[this.currRow].setPenStyles(e)
                            }, t.moveCursor = function(e) {
                                this.rows[this.currRow].moveCursor(e)
                            }, t.setCursor = function(e) {
                                this.logger.log(2, "setCursor: " + e), this.rows[this.currRow].setCursor(e)
                            }, t.setPAC = function(e) {
                                this.logger.log(2, (function() {
                                    return "pacData = " + JSON.stringify(e)
                                }));
                                var t = e.row - 1;
                                if (this.nrRollUpRows && t < this.nrRollUpRows - 1 && (t = this.nrRollUpRows - 1), this.nrRollUpRows && this.currRow !== t) {
                                    for (var r = 0; r < Xa; r++) this.rows[r].clear();
                                    var n = this.currRow + 1 - this.nrRollUpRows,
                                        i = this.lastOutputScreen;
                                    if (i) {
                                        var a = i.rows[n].cueStartTime,
                                            s = this.logger.time;
                                        if (null !== a && null !== s && a < s)
                                            for (var o = 0; o < this.nrRollUpRows; o++) this.rows[t - this.nrRollUpRows + o + 1].copy(i.rows[n + o])
                                    }
                                }
                                this.currRow = t;
                                var l = this.rows[this.currRow];
                                if (null !== e.indent) {
                                    var u = e.indent,
                                        c = Math.max(u - 1, 0);
                                    l.setCursor(e.indent), e.color = l.chars[c].penState.foreground
                                }
                                var d = {
                                    foreground: e.color,
                                    underline: e.underline,
                                    italics: e.italics,
                                    background: "black",
                                    flash: !1
                                };
                                this.setPen(d)
                            }, t.setBkgData = function(e) {
                                this.logger.log(2, (function() {
                                    return "bkgData = " + JSON.stringify(e)
                                })), this.backSpace(), this.setPen(e), this.insertChar(32)
                            }, t.setRollUpRows = function(e) {
                                this.nrRollUpRows = e
                            }, t.rollUp = function() {
                                var e = this;
                                if (null !== this.nrRollUpRows) {
                                    this.logger.log(1, (function() {
                                        return e.getDisplayText()
                                    }));
                                    var t = this.currRow + 1 - this.nrRollUpRows,
                                        r = this.rows.splice(t, 1)[0];
                                    r.clear(), this.rows.splice(this.currRow, 0, r), this.logger.log(2, "Rolling up")
                                } else this.logger.log(3, "roll_up but nrRollUpRows not set yet")
                            }, t.getDisplayText = function(e) {
                                e = e || !1;
                                for (var t = [], r = "", n = -1, i = 0; i < Xa; i++) {
                                    var a = this.rows[i].getTextString();
                                    a && (n = i + 1, e ? t.push("Row " + n + ": '" + a + "'") : t.push(a.trim()))
                                }
                                return t.length > 0 && (r = e ? "[" + t.join(" | ") + "]" : t.join("\n")), r
                            }, t.getTextAndFormat = function() {
                                return this.rows
                            }, e
                        }(),
                        ls = function() {
                            function e(e, t, r) {
                                this.chNr = void 0, this.outputFilter = void 0, this.mode = void 0, this.verbose = void 0, this.displayedMemory = void 0, this.nonDisplayedMemory = void 0, this.lastOutputScreen = void 0, this.currRollUpRow = void 0, this.writeScreen = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chNr = e, this.outputFilter = t, this.mode = null, this.verbose = 0, this.displayedMemory = new os(r), this.nonDisplayedMemory = new os(r), this.lastOutputScreen = new os(r), this.currRollUpRow = this.displayedMemory.rows[Xa - 1], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, this.logger = r
                            }
                            var t = e.prototype;
                            return t.reset = function() {
                                this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), this.lastOutputScreen.reset(), this.outputFilter.reset(), this.currRollUpRow = this.displayedMemory.rows[Xa - 1], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null
                            }, t.getHandler = function() {
                                return this.outputFilter
                            }, t.setHandler = function(e) {
                                this.outputFilter = e
                            }, t.setPAC = function(e) {
                                this.writeScreen.setPAC(e)
                            }, t.setBkgData = function(e) {
                                this.writeScreen.setBkgData(e)
                            }, t.setMode = function(e) {
                                e !== this.mode && (this.mode = e, this.logger.log(2, (function() {
                                    return "MODE=" + e
                                })), "MODE_POP-ON" === this.mode ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, this.writeScreen.reset()), "MODE_ROLL-UP" !== this.mode && (this.displayedMemory.nrRollUpRows = null, this.nonDisplayedMemory.nrRollUpRows = null), this.mode = e)
                            }, t.insertChars = function(e) {
                                for (var t = this, r = 0; r < e.length; r++) this.writeScreen.insertChar(e[r]);
                                var n = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
                                this.logger.log(2, (function() {
                                    return n + ": " + t.writeScreen.getDisplayText(!0)
                                })), "MODE_PAINT-ON" !== this.mode && "MODE_ROLL-UP" !== this.mode || (this.logger.log(1, (function() {
                                    return "DISPLAYED: " + t.displayedMemory.getDisplayText(!0)
                                })), this.outputDataUpdate())
                            }, t.ccRCL = function() {
                                this.logger.log(2, "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON")
                            }, t.ccBS = function() {
                                this.logger.log(2, "BS - BackSpace"), "MODE_TEXT" !== this.mode && (this.writeScreen.backSpace(), this.writeScreen === this.displayedMemory && this.outputDataUpdate())
                            }, t.ccAOF = function() {}, t.ccAON = function() {}, t.ccDER = function() {
                                this.logger.log(2, "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), this.outputDataUpdate()
                            }, t.ccRU = function(e) {
                                this.logger.log(2, "RU(" + e + ") - Roll Up"), this.writeScreen = this.displayedMemory, this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(e)
                            }, t.ccFON = function() {
                                this.logger.log(2, "FON - Flash On"), this.writeScreen.setPen({
                                    flash: !0
                                })
                            }, t.ccRDC = function() {
                                this.logger.log(2, "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON")
                            }, t.ccTR = function() {
                                this.logger.log(2, "TR"), this.setMode("MODE_TEXT")
                            }, t.ccRTD = function() {
                                this.logger.log(2, "RTD"), this.setMode("MODE_TEXT")
                            }, t.ccEDM = function() {
                                this.logger.log(2, "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), this.outputDataUpdate(!0)
                            }, t.ccCR = function() {
                                this.logger.log(2, "CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate(!0)
                            }, t.ccENM = function() {
                                this.logger.log(2, "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset()
                            }, t.ccEOC = function() {
                                var e = this;
                                if (this.logger.log(2, "EOC - End Of Caption"), "MODE_POP-ON" === this.mode) {
                                    var t = this.displayedMemory;
                                    this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = t, this.writeScreen = this.nonDisplayedMemory, this.logger.log(1, (function() {
                                        return "DISP: " + e.displayedMemory.getDisplayText()
                                    }))
                                }
                                this.outputDataUpdate(!0)
                            }, t.ccTO = function(e) {
                                this.logger.log(2, "TO(" + e + ") - Tab Offset"), this.writeScreen.moveCursor(e)
                            }, t.ccMIDROW = function(e) {
                                var t = {
                                    flash: !1
                                };
                                if (t.underline = e % 2 == 1, t.italics = e >= 46, t.italics) t.foreground = "white";
                                else {
                                    var r = Math.floor(e / 2) - 16,
                                        n = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"];
                                    t.foreground = n[r]
                                }
                                this.logger.log(2, "MIDROW: " + JSON.stringify(t)), this.writeScreen.setPen(t)
                            }, t.outputDataUpdate = function(e) {
                                void 0 === e && (e = !1);
                                var t = this.logger.time;
                                null !== t && this.outputFilter && (null !== this.cueStartTime || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen), e && this.outputFilter.dispatchCue && this.outputFilter.dispatchCue(), this.cueStartTime = this.displayedMemory.isEmpty() ? null : t) : this.cueStartTime = t, this.lastOutputScreen.copy(this.displayedMemory))
                            }, t.cueSplitAtTime = function(e) {
                                this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, e, this.displayedMemory), this.cueStartTime = e))
                            }, e
                        }(),
                        us = function() {
                            function e(e, t, r) {
                                this.channels = void 0, this.currentChannel = 0, this.cmdHistory = hs(), this.logger = void 0;
                                var n = this.logger = new rs;
                                this.channels = [null, new ls(e, t, n), new ls(e + 1, r, n)]
                            }
                            var t = e.prototype;
                            return t.getHandler = function(e) {
                                return this.channels[e].getHandler()
                            }, t.setHandler = function(e, t) {
                                this.channels[e].setHandler(t)
                            }, t.addData = function(e, t) {
                                var r, n, i, a = !1;
                                this.logger.time = e;
                                for (var s = 0; s < t.length; s += 2)
                                    if (n = 127 & t[s], i = 127 & t[s + 1], 0 !== n || 0 !== i) {
                                        if (this.logger.log(3, "[" + ns([t[s], t[s + 1]]) + "] -> (" + ns([n, i]) + ")"), (r = this.parseCmd(n, i)) || (r = this.parseMidrow(n, i)), r || (r = this.parsePAC(n, i)), r || (r = this.parseBackgroundAttributes(n, i)), !r && (a = this.parseChars(n, i))) {
                                            var o = this.currentChannel;
                                            o && o > 0 ? this.channels[o].insertChars(a) : this.logger.log(2, "No channel found yet. TEXT-MODE?")
                                        }
                                        r || a || this.logger.log(2, "Couldn't parse cleaned data " + ns([n, i]) + " orig: " + ns([t[s], t[s + 1]]))
                                    }
                            }, t.parseCmd = function(e, t) {
                                var r = this.cmdHistory;
                                if (!((20 === e || 28 === e || 21 === e || 29 === e) && t >= 32 && t <= 47 || (23 === e || 31 === e) && t >= 33 && t <= 35)) return !1;
                                if (ds(e, t, r)) return cs(null, null, r), this.logger.log(3, "Repeated command (" + ns([e, t]) + ") is dropped"), !0;
                                var n = 20 === e || 21 === e || 23 === e ? 1 : 2,
                                    i = this.channels[n];
                                return 20 === e || 21 === e || 28 === e || 29 === e ? 32 === t ? i.ccRCL() : 33 === t ? i.ccBS() : 34 === t ? i.ccAOF() : 35 === t ? i.ccAON() : 36 === t ? i.ccDER() : 37 === t ? i.ccRU(2) : 38 === t ? i.ccRU(3) : 39 === t ? i.ccRU(4) : 40 === t ? i.ccFON() : 41 === t ? i.ccRDC() : 42 === t ? i.ccTR() : 43 === t ? i.ccRTD() : 44 === t ? i.ccEDM() : 45 === t ? i.ccCR() : 46 === t ? i.ccENM() : 47 === t && i.ccEOC() : i.ccTO(t - 32), cs(e, t, r), this.currentChannel = n, !0
                            }, t.parseMidrow = function(e, t) {
                                var r = 0;
                                if ((17 === e || 25 === e) && t >= 32 && t <= 47) {
                                    if ((r = 17 === e ? 1 : 2) !== this.currentChannel) return this.logger.log(0, "Mismatch channel in midrow parsing"), !1;
                                    var n = this.channels[r];
                                    return !!n && (n.ccMIDROW(t), this.logger.log(3, "MIDROW (" + ns([e, t]) + ")"), !0)
                                }
                                return !1
                            }, t.parsePAC = function(e, t) {
                                var r, n = this.cmdHistory;
                                if (!((e >= 17 && e <= 23 || e >= 25 && e <= 31) && t >= 64 && t <= 127 || (16 === e || 24 === e) && t >= 64 && t <= 95)) return !1;
                                if (ds(e, t, n)) return cs(null, null, n), !0;
                                var i = e <= 23 ? 1 : 2;
                                r = t >= 64 && t <= 95 ? 1 === i ? Ja[e] : Za[e] : 1 === i ? Qa[e] : es[e];
                                var a = this.channels[i];
                                return !!a && (a.setPAC(this.interpretPAC(r, t)), cs(e, t, n), this.currentChannel = i, !0)
                            }, t.interpretPAC = function(e, t) {
                                var r, n = {
                                    color: null,
                                    italics: !1,
                                    indent: null,
                                    underline: !1,
                                    row: e
                                };
                                return r = t > 95 ? t - 96 : t - 64, n.underline = !(1 & ~r), r <= 13 ? n.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(r / 2)] : r <= 15 ? (n.italics = !0, n.color = "white") : n.indent = 4 * Math.floor((r - 16) / 2), n
                            }, t.parseChars = function(e, t) {
                                var r, n, i = null,
                                    a = null;
                                if (e >= 25 ? (r = 2, a = e - 8) : (r = 1, a = e), a >= 17 && a <= 19 ? (n = 17 === a ? t + 80 : 18 === a ? t + 112 : t + 144, this.logger.log(2, "Special char '" + za(n) + "' in channel " + r), i = [n]) : e >= 32 && e <= 127 && (i = 0 === t ? [e] : [e, t]), i) {
                                    var s = ns(i);
                                    this.logger.log(3, "Char codes =  " + s.join(",")), cs(e, t, this.cmdHistory)
                                }
                                return i
                            }, t.parseBackgroundAttributes = function(e, t) {
                                var r;
                                if (!((16 === e || 24 === e) && t >= 32 && t <= 47 || (23 === e || 31 === e) && t >= 45 && t <= 47)) return !1;
                                var n = {};
                                16 === e || 24 === e ? (r = Math.floor((t - 32) / 2), n.background = ts[r], t % 2 == 1 && (n.background = n.background + "_semi")) : 45 === t ? n.background = "transparent" : (n.foreground = "black", 47 === t && (n.underline = !0));
                                var i = e <= 23 ? 1 : 2;
                                return this.channels[i].setBkgData(n), cs(e, t, this.cmdHistory), !0
                            }, t.reset = function() {
                                for (var e = 0; e < Object.keys(this.channels).length; e++) {
                                    var t = this.channels[e];
                                    t && t.reset()
                                }
                                this.cmdHistory = hs()
                            }, t.cueSplitAtTime = function(e) {
                                for (var t = 0; t < this.channels.length; t++) {
                                    var r = this.channels[t];
                                    r && r.cueSplitAtTime(e)
                                }
                            }, e
                        }();

                    function cs(e, t, r) {
                        r.a = e, r.b = t
                    }

                    function ds(e, t, r) {
                        return r.a === e && r.b === t
                    }

                    function hs() {
                        return {
                            a: null,
                            b: null
                        }
                    }
                    var fs = function() {
                            function e(e, t) {
                                this.timelineController = void 0, this.cueRanges = [], this.trackName = void 0, this.startTime = null, this.endTime = null, this.screen = null, this.timelineController = e, this.trackName = t
                            }
                            var t = e.prototype;
                            return t.dispatchCue = function() {
                                null !== this.startTime && (this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges), this.startTime = null)
                            }, t.newCue = function(e, t, r) {
                                (null === this.startTime || this.startTime > e) && (this.startTime = e), this.endTime = t, this.screen = r, this.timelineController.createCaptionsTrack(this.trackName)
                            }, t.reset = function() {
                                this.cueRanges = [], this.startTime = null
                            }, e
                        }(),
                        gs = function() {
                            if (null != te && te.VTTCue) return self.VTTCue;
                            var e = ["", "lr", "rl"],
                                t = ["start", "middle", "end", "left", "right"];

                            function r(e, t) {
                                if ("string" != typeof t) return !1;
                                if (!Array.isArray(e)) return !1;
                                var r = t.toLowerCase();
                                return !!~e.indexOf(r) && r
                            }

                            function n(t) {
                                return r(e, t)
                            }

                            function i(e) {
                                return r(t, e)
                            }

                            function a(e) {
                                for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++) r[n - 1] = arguments[n];
                                for (var i = 1; i < arguments.length; i++) {
                                    var a = arguments[i];
                                    for (var s in a) e[s] = a[s]
                                }
                                return e
                            }

                            function s(e, t, r) {
                                var s = this,
                                    o = {
                                        enumerable: !0
                                    };
                                s.hasBeenReset = !1;
                                var l = "",
                                    u = !1,
                                    c = e,
                                    d = t,
                                    h = r,
                                    f = null,
                                    g = "",
                                    p = !0,
                                    m = "auto",
                                    v = "start",
                                    y = 50,
                                    T = "middle",
                                    b = 50,
                                    E = "middle";
                                Object.defineProperty(s, "id", a({}, o, {
                                    get: function() {
                                        return l
                                    },
                                    set: function(e) {
                                        l = "" + e
                                    }
                                })), Object.defineProperty(s, "pauseOnExit", a({}, o, {
                                    get: function() {
                                        return u
                                    },
                                    set: function(e) {
                                        u = !!e
                                    }
                                })), Object.defineProperty(s, "startTime", a({}, o, {
                                    get: function() {
                                        return c
                                    },
                                    set: function(e) {
                                        if ("number" != typeof e) throw new TypeError("Start time must be set to a number.");
                                        c = e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "endTime", a({}, o, {
                                    get: function() {
                                        return d
                                    },
                                    set: function(e) {
                                        if ("number" != typeof e) throw new TypeError("End time must be set to a number.");
                                        d = e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "text", a({}, o, {
                                    get: function() {
                                        return h
                                    },
                                    set: function(e) {
                                        h = "" + e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "region", a({}, o, {
                                    get: function() {
                                        return f
                                    },
                                    set: function(e) {
                                        f = e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "vertical", a({}, o, {
                                    get: function() {
                                        return g
                                    },
                                    set: function(e) {
                                        var t = n(e);
                                        if (!1 === t) throw new SyntaxError("An invalid or illegal string was specified.");
                                        g = t, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "snapToLines", a({}, o, {
                                    get: function() {
                                        return p
                                    },
                                    set: function(e) {
                                        p = !!e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "line", a({}, o, {
                                    get: function() {
                                        return m
                                    },
                                    set: function(e) {
                                        if ("number" != typeof e && "auto" !== e) throw new SyntaxError("An invalid number or illegal string was specified.");
                                        m = e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "lineAlign", a({}, o, {
                                    get: function() {
                                        return v
                                    },
                                    set: function(e) {
                                        var t = i(e);
                                        if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                                        v = t, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "position", a({}, o, {
                                    get: function() {
                                        return y
                                    },
                                    set: function(e) {
                                        if (e < 0 || e > 100) throw new Error("Position must be between 0 and 100.");
                                        y = e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "positionAlign", a({}, o, {
                                    get: function() {
                                        return T
                                    },
                                    set: function(e) {
                                        var t = i(e);
                                        if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                                        T = t, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "size", a({}, o, {
                                    get: function() {
                                        return b
                                    },
                                    set: function(e) {
                                        if (e < 0 || e > 100) throw new Error("Size must be between 0 and 100.");
                                        b = e, this.hasBeenReset = !0
                                    }
                                })), Object.defineProperty(s, "align", a({}, o, {
                                    get: function() {
                                        return E
                                    },
                                    set: function(e) {
                                        var t = i(e);
                                        if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                                        E = t, this.hasBeenReset = !0
                                    }
                                })), s.displayState = void 0
                            }
                            return s.prototype.getCueAsHTML = function() {
                                return self.WebVTT.convertCueToDOMTree(self, this.text)
                            }, s
                        }(),
                        ps = function() {
                            function e() {}
                            return e.prototype.decode = function(e, t) {
                                if (!e) return "";
                                if ("string" != typeof e) throw new Error("Error - expected string data.");
                                return decodeURIComponent(encodeURIComponent(e))
                            }, e
                        }();

                    function ms(e) {
                        function t(e, t, r, n) {
                            return 3600 * (0 | e) + 60 * (0 | t) + (0 | r) + parseFloat(n || 0)
                        }
                        var r = e.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
                        return r ? parseFloat(r[2]) > 59 ? t(r[2], r[3], 0, r[4]) : t(r[1], r[2], r[3], r[4]) : null
                    }
                    var vs = function() {
                        function e() {
                            this.values = Object.create(null)
                        }
                        var t = e.prototype;
                        return t.set = function(e, t) {
                            this.get(e) || "" === t || (this.values[e] = t)
                        }, t.get = function(e, t, r) {
                            return r ? this.has(e) ? this.values[e] : t[r] : this.has(e) ? this.values[e] : t
                        }, t.has = function(e) {
                            return e in this.values
                        }, t.alt = function(e, t, r) {
                            for (var n = 0; n < r.length; ++n)
                                if (t === r[n]) {
                                    this.set(e, t);
                                    break
                                }
                        }, t.integer = function(e, t) {
                            /^-?\d+$/.test(t) && this.set(e, parseInt(t, 10))
                        }, t.percent = function(e, t) {
                            if (/^([\d]{1,3})(\.[\d]*)?%$/.test(t)) {
                                var r = parseFloat(t);
                                if (r >= 0 && r <= 100) return this.set(e, r), !0
                            }
                            return !1
                        }, e
                    }();

                    function ys(e, t, r, n) {
                        var i = n ? e.split(n) : [e];
                        for (var a in i)
                            if ("string" == typeof i[a]) {
                                var s = i[a].split(r);
                                2 === s.length && t(s[0], s[1])
                            }
                    }
                    var Ts = new gs(0, 0, ""),
                        bs = "middle" === Ts.align ? "middle" : "center";

                    function Es(e, t, r) {
                        var n = e;

                        function i() {
                            var t = ms(e);
                            if (null === t) throw new Error("Malformed timestamp: " + n);
                            return e = e.replace(/^[^\sa-zA-Z-]+/, ""), t
                        }

                        function a(e, t) {
                            var n = new vs;
                            ys(e, (function(e, t) {
                                var i;
                                switch (e) {
                                    case "region":
                                        for (var a = r.length - 1; a >= 0; a--)
                                            if (r[a].id === t) {
                                                n.set(e, r[a].region);
                                                break
                                            }
                                        break;
                                    case "vertical":
                                        n.alt(e, t, ["rl", "lr"]);
                                        break;
                                    case "line":
                                        i = t.split(","), n.integer(e, i[0]), n.percent(e, i[0]) && n.set("snapToLines", !1), n.alt(e, i[0], ["auto"]), 2 === i.length && n.alt("lineAlign", i[1], ["start", bs, "end"]);
                                        break;
                                    case "position":
                                        i = t.split(","), n.percent(e, i[0]), 2 === i.length && n.alt("positionAlign", i[1], ["start", bs, "end", "line-left", "line-right", "auto"]);
                                        break;
                                    case "size":
                                        n.percent(e, t);
                                        break;
                                    case "align":
                                        n.alt(e, t, ["start", bs, "end", "left", "right"])
                                }
                            }), /:/, /\s/), t.region = n.get("region", null), t.vertical = n.get("vertical", "");
                            var i = n.get("line", "auto");
                            "auto" === i && -1 === Ts.line && (i = -1), t.line = i, t.lineAlign = n.get("lineAlign", "start"), t.snapToLines = n.get("snapToLines", !0), t.size = n.get("size", 100), t.align = n.get("align", bs);
                            var a = n.get("position", "auto");
                            "auto" === a && 50 === Ts.position && (a = "start" === t.align || "left" === t.align ? 0 : "end" === t.align || "right" === t.align ? 100 : 50), t.position = a
                        }

                        function s() {
                            e = e.replace(/^\s+/, "")
                        }
                        if (s(), t.startTime = i(), s(), "--\x3e" !== e.slice(0, 3)) throw new Error("Malformed time stamp (time stamps must be separated by '--\x3e'): " + n);
                        e = e.slice(3), s(), t.endTime = i(), s(), a(e, t)
                    }

                    function Ss(e) {
                        return e.replace(/<br(?: \/)?>/gi, "\n")
                    }
                    var As = function() {
                            function e() {
                                this.state = "INITIAL", this.buffer = "", this.decoder = new ps, this.regionList = [], this.cue = null, this.oncue = void 0, this.onparsingerror = void 0, this.onflush = void 0
                            }
                            var t = e.prototype;
                            return t.parse = function(e) {
                                var t = this;

                                function r() {
                                    var e = t.buffer,
                                        r = 0;
                                    for (e = Ss(e); r < e.length && "\r" !== e[r] && "\n" !== e[r];) ++r;
                                    var n = e.slice(0, r);
                                    return "\r" === e[r] && ++r, "\n" === e[r] && ++r, t.buffer = e.slice(r), n
                                }

                                function n(e) {
                                    ys(e, (function(e, t) {}), /:/)
                                }
                                e && (t.buffer += t.decoder.decode(e, {
                                    stream: !0
                                }));
                                try {
                                    var i = "";
                                    if ("INITIAL" === t.state) {
                                        if (!/\r\n|\n/.test(t.buffer)) return this;
                                        var a = (i = r()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                                        if (null == a || !a[0]) throw new Error("Malformed WebVTT signature.");
                                        t.state = "HEADER"
                                    }
                                    for (var s = !1; t.buffer;) {
                                        if (!/\r\n|\n/.test(t.buffer)) return this;
                                        switch (s ? s = !1 : i = r(), t.state) {
                                            case "HEADER":
                                                /:/.test(i) ? n(i) : i || (t.state = "ID");
                                                continue;
                                            case "NOTE":
                                                i || (t.state = "ID");
                                                continue;
                                            case "ID":
                                                if (/^NOTE($|[ \t])/.test(i)) {
                                                    t.state = "NOTE";
                                                    break
                                                }
                                                if (!i) continue;
                                                if (t.cue = new gs(0, 0, ""), t.state = "CUE", -1 === i.indexOf("--\x3e")) {
                                                    t.cue.id = i;
                                                    continue
                                                }
                                            case "CUE":
                                                if (!t.cue) {
                                                    t.state = "BADCUE";
                                                    continue
                                                }
                                                try {
                                                    Es(i, t.cue, t.regionList)
                                                } catch (e) {
                                                    t.cue = null, t.state = "BADCUE";
                                                    continue
                                                }
                                                t.state = "CUETEXT";
                                                continue;
                                            case "CUETEXT":
                                                var o = -1 !== i.indexOf("--\x3e");
                                                if (!i || o && (s = !0)) {
                                                    t.oncue && t.cue && t.oncue(t.cue), t.cue = null, t.state = "ID";
                                                    continue
                                                }
                                                if (null === t.cue) continue;
                                                t.cue.text && (t.cue.text += "\n"), t.cue.text += i;
                                                continue;
                                            case "BADCUE":
                                                i || (t.state = "ID")
                                        }
                                    }
                                } catch (e) {
                                    "CUETEXT" === t.state && t.cue && t.oncue && t.oncue(t.cue), t.cue = null, t.state = "INITIAL" === t.state ? "BADWEBVTT" : "BADCUE"
                                }
                                return this
                            }, t.flush = function() {
                                var e = this;
                                try {
                                    if ((e.cue || "HEADER" === e.state) && (e.buffer += "\n\n", e.parse()), "INITIAL" === e.state || "BADWEBVTT" === e.state) throw new Error("Malformed WebVTT signature.")
                                } catch (t) {
                                    e.onparsingerror && e.onparsingerror(t)
                                }
                                return e.onflush && e.onflush(), this
                            }, e
                        }(),
                        ks = /\r\n|\n\r|\n|\r/g,
                        Ls = function(e, t, r) {
                            return void 0 === r && (r = 0), e.slice(r, r + t.length) === t
                        },
                        Rs = function(e) {
                            var t = parseInt(e.slice(-3)),
                                r = parseInt(e.slice(-6, -4)),
                                n = parseInt(e.slice(-9, -7)),
                                i = e.length > 9 ? parseInt(e.substring(0, e.indexOf(":"))) : 0;
                            if (!(k(t) && k(r) && k(n) && k(i))) throw Error("Malformed X-TIMESTAMP-MAP: Local:" + e);
                            return t += 1e3 * r, t += 6e4 * n, t += 36e5 * i
                        },
                        Is = function(e) {
                            for (var t = 5381, r = e.length; r;) t = 33 * t ^ e.charCodeAt(--r);
                            return (t >>> 0).toString()
                        };

                    function ws(e, t, r) {
                        return Is(e.toString()) + Is(t.toString()) + Is(r)
                    }
                    var Ds = function(e, t, r) {
                        var n = e[t],
                            i = e[n.prevCC];
                        if (!i || !i.new && n.new) return e.ccOffset = e.presentationOffset = n.start, void(n.new = !1);
                        for (; null != (a = i) && a.new;) {
                            var a;
                            e.ccOffset += n.start - i.start, n.new = !1, i = e[(n = i).prevCC]
                        }
                        e.presentationOffset = r
                    };

                    function Cs(e, t, r, n, i, a, s) {
                        var o, l = new As,
                            u = De(new Uint8Array(e)).trim().replace(ks, "\n").split("\n"),
                            c = [],
                            d = t ? Ji(t.baseTime, t.timescale) : 0,
                            h = "00:00.000",
                            f = 0,
                            g = 0,
                            p = !0;
                        l.oncue = function(e) {
                            var a = r[n],
                                s = r.ccOffset,
                                l = (f - d) / 9e4;
                            if (null != a && a.new && (void 0 !== g ? s = r.ccOffset = a.start : Ds(r, n, l)), l) {
                                if (!t) return void(o = new Error("Missing initPTS for VTT MPEGTS"));
                                s = l - r.presentationOffset
                            }
                            var u = e.endTime - e.startTime,
                                h = aa(9e4 * (e.startTime + s - g), 9e4 * i) / 9e4;
                            e.startTime = Math.max(h, 0), e.endTime = Math.max(h + u, 0);
                            var p = e.text.trim();
                            e.text = decodeURIComponent(encodeURIComponent(p)), e.id || (e.id = ws(e.startTime, e.endTime, p)), e.endTime > 0 && c.push(e)
                        }, l.onparsingerror = function(e) {
                            o = e
                        }, l.onflush = function() {
                            o ? s(o) : a(c)
                        }, u.forEach((function(e) {
                            if (p) {
                                if (Ls(e, "X-TIMESTAMP-MAP=")) {
                                    p = !1, e.slice(16).split(",").forEach((function(e) {
                                        Ls(e, "LOCAL:") ? h = e.slice(6) : Ls(e, "MPEGTS:") && (f = parseInt(e.slice(7)))
                                    }));
                                    try {
                                        g = Rs(h) / 1e3
                                    } catch (e) {
                                        o = e
                                    }
                                    return
                                }
                                "" === e && (p = !1)
                            }
                            l.parse(e + "\n")
                        })), l.flush()
                    }
                    var xs = "stpp.ttml.im1t",
                        _s = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/,
                        Os = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/,
                        Ps = {
                            left: "start",
                            center: "center",
                            right: "end",
                            start: "start",
                            end: "end"
                        };

                    function Ms(e, t, r, n) {
                        var i = He(new Uint8Array(e), ["mdat"]);
                        if (0 !== i.length) {
                            var a = i.map((function(e) {
                                    return De(e)
                                })),
                                s = Xi(t.baseTime, 1, t.timescale);
                            try {
                                a.forEach((function(e) {
                                    return r(Fs(e, s))
                                }))
                            } catch (e) {
                                n(e)
                            }
                        } else n(new Error("Could not parse IMSC1 mdat"))
                    }

                    function Fs(e, t) {
                        var r = (new DOMParser).parseFromString(e, "text/xml").getElementsByTagName("tt")[0];
                        if (!r) throw new Error("Invalid ttml");
                        var n = {
                                frameRate: 30,
                                subFrameRate: 1,
                                frameRateMultiplier: 0,
                                tickRate: 0
                            },
                            i = Object.keys(n).reduce((function(e, t) {
                                return e[t] = r.getAttribute("ttp:" + t) || n[t], e
                            }), {}),
                            a = "preserve" !== r.getAttribute("xml:space"),
                            s = Us(Ns(r, "styling", "style")),
                            o = Us(Ns(r, "layout", "region")),
                            l = Ns(r, "body", "[begin]");
                        return [].map.call(l, (function(e) {
                            var r = Bs(e, a);
                            if (!r || !e.hasAttribute("begin")) return null;
                            var n = Ks(e.getAttribute("begin"), i),
                                l = Ks(e.getAttribute("dur"), i),
                                c = Ks(e.getAttribute("end"), i);
                            if (null === n) throw Hs(e);
                            if (null === c) {
                                if (null === l) throw Hs(e);
                                c = n + l
                            }
                            var d = new gs(n - t, c - t, r);
                            d.id = ws(d.startTime, d.endTime, d.text);
                            var h = Gs(o[e.getAttribute("region")], s[e.getAttribute("style")], s),
                                f = h.textAlign;
                            if (f) {
                                var g = Ps[f];
                                g && (d.lineAlign = g), d.align = f
                            }
                            return u(d, h), d
                        })).filter((function(e) {
                            return null !== e
                        }))
                    }

                    function Ns(e, t, r) {
                        var n = e.getElementsByTagName(t)[0];
                        return n ? [].slice.call(n.querySelectorAll(r)) : []
                    }

                    function Us(e) {
                        return e.reduce((function(e, t) {
                            var r = t.getAttribute("xml:id");
                            return r && (e[r] = t), e
                        }), {})
                    }

                    function Bs(e, t) {
                        return [].slice.call(e.childNodes).reduce((function(e, r, n) {
                            var i;
                            return "br" === r.nodeName && n ? e + "\n" : null != (i = r.childNodes) && i.length ? Bs(r, t) : t ? e + r.textContent.trim().replace(/\s+/g, " ") : e + r.textContent
                        }), "")
                    }

                    function Gs(e, t, r) {
                        var n = "http://www.w3.org/ns/ttml#styling",
                            i = null,
                            a = ["displayAlign", "textAlign", "color", "backgroundColor", "fontSize", "fontFamily"],
                            s = null != e && e.hasAttribute("style") ? e.getAttribute("style") : null;
                        return s && r.hasOwnProperty(s) && (i = r[s]), a.reduce((function(r, a) {
                            var s = Vs(t, n, a) || Vs(e, n, a) || Vs(i, n, a);
                            return s && (r[a] = s), r
                        }), {})
                    }

                    function Vs(e, t, r) {
                        return e && e.hasAttributeNS(t, r) ? e.getAttributeNS(t, r) : null
                    }

                    function Hs(e) {
                        return new Error("Could not parse ttml timestamp " + e)
                    }

                    function Ks(e, t) {
                        if (!e) return null;
                        var r = ms(e);
                        return null === r && (_s.test(e) ? r = js(e, t) : Os.test(e) && (r = Ys(e, t))), r
                    }

                    function js(e, t) {
                        var r = _s.exec(e),
                            n = (0 | r[4]) + (0 | r[5]) / t.subFrameRate;
                        return 3600 * (0 | r[1]) + 60 * (0 | r[2]) + (0 | r[3]) + n / t.frameRate
                    }

                    function Ys(e, t) {
                        var r = Os.exec(e),
                            n = Number(r[1]);
                        switch (r[2]) {
                            case "h":
                                return 3600 * n;
                            case "m":
                                return 60 * n;
                            case "ms":
                                return 1e3 * n;
                            case "f":
                                return n / t.frameRate;
                            case "t":
                                return n / t.tickRate
                        }
                        return n
                    }
                    var Ws = function() {
                        function e(e) {
                            this.hls = void 0, this.media = null, this.config = void 0, this.enabled = !0, this.Cues = void 0, this.textTracks = [], this.tracks = [], this.initPTS = [], this.unparsedVttFrags = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.cea608Parser1 = void 0, this.cea608Parser2 = void 0, this.lastCc = -1, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = $s(), this.captionsProperties = void 0, this.hls = e, this.config = e.config, this.Cues = e.config.cueHandler, this.captionsProperties = {
                                textTrack1: {
                                    label: this.config.captionsTextTrack1Label,
                                    languageCode: this.config.captionsTextTrack1LanguageCode
                                },
                                textTrack2: {
                                    label: this.config.captionsTextTrack2Label,
                                    languageCode: this.config.captionsTextTrack2LanguageCode
                                },
                                textTrack3: {
                                    label: this.config.captionsTextTrack3Label,
                                    languageCode: this.config.captionsTextTrack3LanguageCode
                                },
                                textTrack4: {
                                    label: this.config.captionsTextTrack4Label,
                                    languageCode: this.config.captionsTextTrack4LanguageCode
                                }
                            }, e.on(I.MEDIA_ATTACHING, this.onMediaAttaching, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.MANIFEST_LOADED, this.onManifestLoaded, this), e.on(I.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), e.on(I.FRAG_LOADING, this.onFragLoading, this), e.on(I.FRAG_LOADED, this.onFragLoaded, this), e.on(I.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), e.on(I.FRAG_DECRYPTED, this.onFragDecrypted, this), e.on(I.INIT_PTS_FOUND, this.onInitPtsFound, this), e.on(I.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), e.on(I.BUFFER_FLUSHING, this.onBufferFlushing, this)
                        }
                        var t = e.prototype;
                        return t.destroy = function() {
                            var e = this.hls;
                            e.off(I.MEDIA_ATTACHING, this.onMediaAttaching, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.MANIFEST_LOADED, this.onManifestLoaded, this), e.off(I.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), e.off(I.FRAG_LOADING, this.onFragLoading, this), e.off(I.FRAG_LOADED, this.onFragLoaded, this), e.off(I.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), e.off(I.FRAG_DECRYPTED, this.onFragDecrypted, this), e.off(I.INIT_PTS_FOUND, this.onInitPtsFound, this), e.off(I.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), e.off(I.BUFFER_FLUSHING, this.onBufferFlushing, this), this.hls = this.config = null, this.cea608Parser1 = this.cea608Parser2 = void 0
                        }, t.initCea608Parsers = function() {
                            if (this.config.enableCEA708Captions && (!this.cea608Parser1 || !this.cea608Parser2)) {
                                var e = new fs(this, "textTrack1"),
                                    t = new fs(this, "textTrack2"),
                                    r = new fs(this, "textTrack3"),
                                    n = new fs(this, "textTrack4");
                                this.cea608Parser1 = new us(1, e, t), this.cea608Parser2 = new us(3, r, n)
                            }
                        }, t.addCues = function(e, t, r, n, i) {
                            for (var a = !1, s = i.length; s--;) {
                                var o = i[s],
                                    l = Xs(o[0], o[1], t, r);
                                if (l >= 0 && (o[0] = Math.min(o[0], t), o[1] = Math.max(o[1], r), a = !0, l / (r - t) > .5)) return
                            }
                            if (a || i.push([t, r]), this.config.renderTextTracksNatively) {
                                var u = this.captionsTracks[e];
                                this.Cues.newCue(u, t, r, n)
                            } else {
                                var c = this.Cues.newCue(null, t, r, n);
                                this.hls.trigger(I.CUES_PARSED, {
                                    type: "captions",
                                    cues: c,
                                    track: e
                                })
                            }
                        }, t.onInitPtsFound = function(e, t) {
                            var r = this,
                                n = t.frag,
                                i = t.id,
                                a = t.initPTS,
                                s = t.timescale,
                                o = this.unparsedVttFrags;
                            "main" === i && (this.initPTS[n.cc] = {
                                baseTime: a,
                                timescale: s
                            }), o.length && (this.unparsedVttFrags = [], o.forEach((function(e) {
                                r.onFragLoaded(I.FRAG_LOADED, e)
                            })))
                        }, t.getExistingTrack = function(e, t) {
                            var r = this.media;
                            if (r)
                                for (var n = 0; n < r.textTracks.length; n++) {
                                    var i = r.textTracks[n];
                                    if (zs(i, {
                                            name: e,
                                            lang: t,
                                            attrs: {}
                                        })) return i
                                }
                            return null
                        }, t.createCaptionsTrack = function(e) {
                            this.config.renderTextTracksNatively ? this.createNativeTrack(e) : this.createNonNativeTrack(e)
                        }, t.createNativeTrack = function(e) {
                            if (!this.captionsTracks[e]) {
                                var t = this.captionsProperties,
                                    r = this.captionsTracks,
                                    n = this.media,
                                    i = t[e],
                                    a = i.label,
                                    s = i.languageCode,
                                    o = this.getExistingTrack(a, s);
                                if (o) r[e] = o, rr(r[e]), er(r[e], n);
                                else {
                                    var l = this.createTextTrack("captions", a, s);
                                    l && (l[e] = !0, r[e] = l)
                                }
                            }
                        }, t.createNonNativeTrack = function(e) {
                            if (!this.nonNativeCaptionsTracks[e]) {
                                var t = this.captionsProperties[e];
                                if (t) {
                                    var r = {
                                        _id: e,
                                        label: t.label,
                                        kind: "captions",
                                        default: !!t.media && !!t.media.default,
                                        closedCaptions: t.media
                                    };
                                    this.nonNativeCaptionsTracks[e] = r, this.hls.trigger(I.NON_NATIVE_TEXT_TRACKS_FOUND, {
                                        tracks: [r]
                                    })
                                }
                            }
                        }, t.createTextTrack = function(e, t, r) {
                            var n = this.media;
                            if (n) return n.addTextTrack(e, t, r)
                        }, t.onMediaAttaching = function(e, t) {
                            this.media = t.media, this._cleanTracks()
                        }, t.onMediaDetaching = function() {
                            var e = this.captionsTracks;
                            Object.keys(e).forEach((function(t) {
                                rr(e[t]), delete e[t]
                            })), this.nonNativeCaptionsTracks = {}
                        }, t.onManifestLoading = function() {
                            this.lastCc = -1, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = $s(), this._cleanTracks(), this.tracks = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.textTracks = [], this.unparsedVttFrags = [], this.initPTS = [], this.cea608Parser1 && this.cea608Parser2 && (this.cea608Parser1.reset(), this.cea608Parser2.reset())
                        }, t._cleanTracks = function() {
                            var e = this.media;
                            if (e) {
                                var t = e.textTracks;
                                if (t)
                                    for (var r = 0; r < t.length; r++) rr(t[r])
                            }
                        }, t.onSubtitleTracksUpdated = function(e, t) {
                            var r = this,
                                n = t.subtitleTracks || [],
                                i = n.some((function(e) {
                                    return e.textCodec === xs
                                }));
                            if (this.config.enableWebVTT || i && this.config.enableIMSC1) {
                                if (_a(this.tracks, n)) return void(this.tracks = n);
                                if (this.textTracks = [], this.tracks = n, this.config.renderTextTracksNatively) {
                                    var a = this.media,
                                        s = a ? sr(a.textTracks) : null;
                                    if (this.tracks.forEach((function(e, t) {
                                            var n;
                                            if (s) {
                                                for (var i = null, a = 0; a < s.length; a++)
                                                    if (s[a] && zs(s[a], e)) {
                                                        i = s[a], s[a] = null;
                                                        break
                                                    }
                                                i && (n = i)
                                            }
                                            if (n) rr(n);
                                            else {
                                                var o = qs(e);
                                                (n = r.createTextTrack(o, e.name, e.lang)) && (n.mode = "disabled")
                                            }
                                            n && r.textTracks.push(n)
                                        })), null != s && s.length) {
                                        var o = s.filter((function(e) {
                                            return null !== e
                                        })).map((function(e) {
                                            return e.label
                                        }));
                                        o.length && F.warn("Media element contains unused subtitle tracks: " + o.join(", ") + ". Replace media element for each source to clear TextTracks and captions menu.")
                                    }
                                } else if (this.tracks.length) {
                                    var l = this.tracks.map((function(e) {
                                        return {
                                            label: e.name,
                                            kind: e.type.toLowerCase(),
                                            default: e.default,
                                            subtitleTrack: e
                                        }
                                    }));
                                    this.hls.trigger(I.NON_NATIVE_TEXT_TRACKS_FOUND, {
                                        tracks: l
                                    })
                                }
                            }
                        }, t.onManifestLoaded = function(e, t) {
                            var r = this;
                            this.config.enableCEA708Captions && t.captions && t.captions.forEach((function(e) {
                                var t = /(?:CC|SERVICE)([1-4])/.exec(e.instreamId);
                                if (t) {
                                    var n = "textTrack" + t[1],
                                        i = r.captionsProperties[n];
                                    i && (i.label = e.name, e.lang && (i.languageCode = e.lang), i.media = e)
                                }
                            }))
                        }, t.closedCaptionsForLevel = function(e) {
                            var t = this.hls.levels[e.level];
                            return null == t ? void 0 : t.attrs["CLOSED-CAPTIONS"]
                        }, t.onFragLoading = function(e, t) {
                            this.initCea608Parsers();
                            var r = this.cea608Parser1,
                                n = this.cea608Parser2,
                                i = this.lastCc,
                                a = this.lastSn,
                                s = this.lastPartIndex;
                            if (this.enabled && r && n && t.frag.type === $t.MAIN) {
                                var o, l, u = t.frag,
                                    c = u.cc,
                                    d = u.sn,
                                    h = null != (o = null == t || null == (l = t.part) ? void 0 : l.index) ? o : -1;
                                d === a + 1 || d === a && h === s + 1 || c === i || (r.reset(), n.reset()), this.lastCc = c, this.lastSn = d, this.lastPartIndex = h
                            }
                        }, t.onFragLoaded = function(e, t) {
                            var r = t.frag,
                                n = t.payload;
                            if (r.type === $t.SUBTITLE)
                                if (n.byteLength) {
                                    var i = r.decryptdata,
                                        a = "stats" in t;
                                    if (null == i || !i.encrypted || a) {
                                        var s = this.tracks[r.level],
                                            o = this.vttCCs;
                                        o[r.cc] || (o[r.cc] = {
                                            start: r.start,
                                            prevCC: this.prevCC,
                                            new: !0
                                        }, this.prevCC = r.cc), s && s.textCodec === xs ? this._parseIMSC1(r, n) : this._parseVTTs(t)
                                    }
                                } else this.hls.trigger(I.SUBTITLE_FRAG_PROCESSED, {
                                    success: !1,
                                    frag: r,
                                    error: new Error("Empty subtitle payload")
                                })
                        }, t._parseIMSC1 = function(e, t) {
                            var r = this,
                                n = this.hls;
                            Ms(t, this.initPTS[e.cc], (function(t) {
                                r._appendCues(t, e.level), n.trigger(I.SUBTITLE_FRAG_PROCESSED, {
                                    success: !0,
                                    frag: e
                                })
                            }), (function(t) {
                                F.log("Failed to parse IMSC1: " + t), n.trigger(I.SUBTITLE_FRAG_PROCESSED, {
                                    success: !1,
                                    frag: e,
                                    error: t
                                })
                            }))
                        }, t._parseVTTs = function(e) {
                            var t, r = this,
                                n = e.frag,
                                i = e.payload,
                                a = this.initPTS,
                                s = this.unparsedVttFrags,
                                o = a.length - 1;
                            if (a[n.cc] || -1 !== o) {
                                var l = this.hls;
                                Cs(null != (t = n.initSegment) && t.data ? rt(n.initSegment.data, new Uint8Array(i)) : i, this.initPTS[n.cc], this.vttCCs, n.cc, n.start, (function(e) {
                                    r._appendCues(e, n.level), l.trigger(I.SUBTITLE_FRAG_PROCESSED, {
                                        success: !0,
                                        frag: n
                                    })
                                }), (function(t) {
                                    var a = "Missing initPTS for VTT MPEGTS" === t.message;
                                    a ? s.push(e) : r._fallbackToIMSC1(n, i), F.log("Failed to parse VTT cue: " + t), a && o > n.cc || l.trigger(I.SUBTITLE_FRAG_PROCESSED, {
                                        success: !1,
                                        frag: n,
                                        error: t
                                    })
                                }))
                            } else s.push(e)
                        }, t._fallbackToIMSC1 = function(e, t) {
                            var r = this,
                                n = this.tracks[e.level];
                            n.textCodec || Ms(t, this.initPTS[e.cc], (function() {
                                n.textCodec = xs, r._parseIMSC1(e, t)
                            }), (function() {
                                n.textCodec = "wvtt"
                            }))
                        }, t._appendCues = function(e, t) {
                            var r = this.hls;
                            if (this.config.renderTextTracksNatively) {
                                var n = this.textTracks[t];
                                if (!n || "disabled" === n.mode) return;
                                e.forEach((function(e) {
                                    return tr(n, e)
                                }))
                            } else {
                                var i = this.tracks[t];
                                if (!i) return;
                                var a = i.default ? "default" : "subtitles" + t;
                                r.trigger(I.CUES_PARSED, {
                                    type: "subtitles",
                                    cues: e,
                                    track: a
                                })
                            }
                        }, t.onFragDecrypted = function(e, t) {
                            t.frag.type === $t.SUBTITLE && this.onFragLoaded(I.FRAG_LOADED, t)
                        }, t.onSubtitleTracksCleared = function() {
                            this.tracks = [], this.captionsTracks = {}
                        }, t.onFragParsingUserdata = function(e, t) {
                            this.initCea608Parsers();
                            var r = this.cea608Parser1,
                                n = this.cea608Parser2;
                            if (this.enabled && r && n) {
                                var i = t.frag,
                                    a = t.samples;
                                if (i.type !== $t.MAIN || "NONE" !== this.closedCaptionsForLevel(i))
                                    for (var s = 0; s < a.length; s++) {
                                        var o = a[s].bytes;
                                        if (o) {
                                            var l = this.extractCea608Data(o);
                                            r.addData(a[s].pts, l[0]), n.addData(a[s].pts, l[1])
                                        }
                                    }
                            }
                        }, t.onBufferFlushing = function(e, t) {
                            var r = t.startOffset,
                                n = t.endOffset,
                                i = t.endOffsetSubtitles,
                                a = t.type,
                                s = this.media;
                            if (s && !(s.currentTime < n)) {
                                if (!a || "video" === a) {
                                    var o = this.captionsTracks;
                                    Object.keys(o).forEach((function(e) {
                                        return nr(o[e], r, n)
                                    }))
                                }
                                if (this.config.renderTextTracksNatively && 0 === r && void 0 !== i) {
                                    var l = this.textTracks;
                                    Object.keys(l).forEach((function(e) {
                                        return nr(l[e], r, i)
                                    }))
                                }
                            }
                        }, t.extractCea608Data = function(e) {
                            for (var t = [
                                    [],
                                    []
                                ], r = 31 & e[0], n = 2, i = 0; i < r; i++) {
                                var a = e[n++],
                                    s = 127 & e[n++],
                                    o = 127 & e[n++];
                                if ((0 !== s || 0 !== o) && 4 & a) {
                                    var l = 3 & a;
                                    0 !== l && 1 !== l || (t[l].push(s), t[l].push(o))
                                }
                            }
                            return t
                        }, e
                    }();

                    function qs(e) {
                        return e.characteristics && /transcribes-spoken-dialog/gi.test(e.characteristics) && /describes-music-and-sound/gi.test(e.characteristics) ? "captions" : "subtitles"
                    }

                    function zs(e, t) {
                        return !!e && e.kind === qs(t) && Pa(t, e)
                    }

                    function Xs(e, t, r, n) {
                        return Math.min(t, n) - Math.max(e, r)
                    }

                    function $s() {
                        return {
                            ccOffset: 0,
                            presentationOffset: 0,
                            0: {
                                start: 0,
                                prevCC: -1,
                                new: !0
                            }
                        }
                    }
                    var Js = function() {
                            function e(e) {
                                this.hls = void 0, this.autoLevelCapping = void 0, this.firstLevel = void 0, this.media = void 0, this.restrictedLevels = void 0, this.timer = void 0, this.clientRect = void 0, this.streamController = void 0, this.hls = e, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.firstLevel = -1, this.media = null, this.restrictedLevels = [], this.timer = void 0, this.clientRect = null, this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.setStreamController = function(e) {
                                this.streamController = e
                            }, t.destroy = function() {
                                this.hls && this.unregisterListener(), this.timer && this.stopCapping(), this.media = null, this.clientRect = null, this.hls = this.streamController = null
                            }, t.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), e.on(I.MEDIA_ATTACHING, this.onMediaAttaching, this), e.on(I.MANIFEST_PARSED, this.onManifestParsed, this), e.on(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.on(I.BUFFER_CODECS, this.onBufferCodecs, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this)
                            }, t.unregisterListener = function() {
                                var e = this.hls;
                                e.off(I.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), e.off(I.MEDIA_ATTACHING, this.onMediaAttaching, this), e.off(I.MANIFEST_PARSED, this.onManifestParsed, this), e.off(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.off(I.BUFFER_CODECS, this.onBufferCodecs, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this)
                            }, t.onFpsDropLevelCapping = function(e, t) {
                                var r = this.hls.levels[t.droppedLevel];
                                this.isLevelAllowed(r) && this.restrictedLevels.push({
                                    bitrate: r.bitrate,
                                    height: r.height,
                                    width: r.width
                                })
                            }, t.onMediaAttaching = function(e, t) {
                                this.media = t.media instanceof HTMLVideoElement ? t.media : null, this.clientRect = null, this.timer && this.hls.levels.length && this.detectPlayerSize()
                            }, t.onManifestParsed = function(e, t) {
                                var r = this.hls;
                                this.restrictedLevels = [], this.firstLevel = t.firstLevel, r.config.capLevelToPlayerSize && t.video && this.startCapping()
                            }, t.onLevelsUpdated = function(e, t) {
                                this.timer && k(this.autoLevelCapping) && this.detectPlayerSize()
                            }, t.onBufferCodecs = function(e, t) {
                                this.hls.config.capLevelToPlayerSize && t.video && this.startCapping()
                            }, t.onMediaDetaching = function() {
                                this.stopCapping()
                            }, t.detectPlayerSize = function() {
                                if (this.media) {
                                    if (this.mediaHeight <= 0 || this.mediaWidth <= 0) return void(this.clientRect = null);
                                    var e = this.hls.levels;
                                    if (e.length) {
                                        var t = this.hls,
                                            r = this.getMaxLevel(e.length - 1);
                                        r !== this.autoLevelCapping && F.log("Setting autoLevelCapping to " + r + ": " + e[r].height + "p@" + e[r].bitrate + " for media " + this.mediaWidth + "x" + this.mediaHeight), t.autoLevelCapping = r, t.autoLevelCapping > this.autoLevelCapping && this.streamController && this.streamController.nextLevelSwitch(), this.autoLevelCapping = t.autoLevelCapping
                                    }
                                }
                            }, t.getMaxLevel = function(t) {
                                var r = this,
                                    n = this.hls.levels;
                                if (!n.length) return -1;
                                var i = n.filter((function(e, n) {
                                    return r.isLevelAllowed(e) && n <= t
                                }));
                                return this.clientRect = null, e.getMaxLevelByMediaSize(i, this.mediaWidth, this.mediaHeight)
                            }, t.startCapping = function() {
                                this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY, self.clearInterval(this.timer), this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3), this.detectPlayerSize())
                            }, t.stopCapping = function() {
                                this.restrictedLevels = [], this.firstLevel = -1, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.timer && (self.clearInterval(this.timer), this.timer = void 0)
                            }, t.getDimensions = function() {
                                if (this.clientRect) return this.clientRect;
                                var e = this.media,
                                    t = {
                                        width: 0,
                                        height: 0
                                    };
                                if (e) {
                                    var r = e.getBoundingClientRect();
                                    t.width = r.width, t.height = r.height, t.width || t.height || (t.width = r.right - r.left || e.width || 0, t.height = r.bottom - r.top || e.height || 0)
                                }
                                return this.clientRect = t, t
                            }, t.isLevelAllowed = function(e) {
                                return !this.restrictedLevels.some((function(t) {
                                    return e.bitrate === t.bitrate && e.width === t.width && e.height === t.height
                                }))
                            }, e.getMaxLevelByMediaSize = function(e, t, r) {
                                if (null == e || !e.length) return -1;
                                for (var n = function(e, t) {
                                        return !t || e.width !== t.width || e.height !== t.height
                                    }, i = e.length - 1, a = Math.max(t, r), s = 0; s < e.length; s += 1) {
                                    var o = e[s];
                                    if ((o.width >= a || o.height >= a) && n(o, e[s + 1])) {
                                        i = s;
                                        break
                                    }
                                }
                                return i
                            }, o(e, [{
                                key: "mediaWidth",
                                get: function() {
                                    return this.getDimensions().width * this.contentScaleFactor
                                }
                            }, {
                                key: "mediaHeight",
                                get: function() {
                                    return this.getDimensions().height * this.contentScaleFactor
                                }
                            }, {
                                key: "contentScaleFactor",
                                get: function() {
                                    var e = 1;
                                    if (!this.hls.config.ignoreDevicePixelRatio) try {
                                        e = self.devicePixelRatio
                                    } catch (e) {}
                                    return e
                                }
                            }]), e
                        }(),
                        Qs = function() {
                            function e(e) {
                                this.hls = void 0, this.isVideoPlaybackQualityAvailable = !1, this.timer = void 0, this.media = null, this.lastTime = void 0, this.lastDroppedFrames = 0, this.lastDecodedFrames = 0, this.streamController = void 0, this.hls = e, this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.setStreamController = function(e) {
                                this.streamController = e
                            }, t.registerListeners = function() {
                                this.hls.on(I.MEDIA_ATTACHING, this.onMediaAttaching, this)
                            }, t.unregisterListeners = function() {
                                this.hls.off(I.MEDIA_ATTACHING, this.onMediaAttaching, this)
                            }, t.destroy = function() {
                                this.timer && clearInterval(this.timer), this.unregisterListeners(), this.isVideoPlaybackQualityAvailable = !1, this.media = null
                            }, t.onMediaAttaching = function(e, t) {
                                var r = this.hls.config;
                                if (r.capLevelOnFPSDrop) {
                                    var n = t.media instanceof self.HTMLVideoElement ? t.media : null;
                                    this.media = n, n && "function" == typeof n.getVideoPlaybackQuality && (this.isVideoPlaybackQualityAvailable = !0), self.clearInterval(this.timer), this.timer = self.setInterval(this.checkFPSInterval.bind(this), r.fpsDroppedMonitoringPeriod)
                                }
                            }, t.checkFPS = function(e, t, r) {
                                var n = performance.now();
                                if (t) {
                                    if (this.lastTime) {
                                        var i = n - this.lastTime,
                                            a = r - this.lastDroppedFrames,
                                            s = t - this.lastDecodedFrames,
                                            o = 1e3 * a / i,
                                            l = this.hls;
                                        if (l.trigger(I.FPS_DROP, {
                                                currentDropped: a,
                                                currentDecoded: s,
                                                totalDroppedFrames: r
                                            }), o > 0 && a > l.config.fpsDroppedMonitoringThreshold * s) {
                                            var u = l.currentLevel;
                                            F.warn("drop FPS ratio greater than max allowed value for currentLevel: " + u), u > 0 && (-1 === l.autoLevelCapping || l.autoLevelCapping >= u) && (u -= 1, l.trigger(I.FPS_DROP_LEVEL_CAPPING, {
                                                level: u,
                                                droppedLevel: l.currentLevel
                                            }), l.autoLevelCapping = u, this.streamController.nextLevelSwitch())
                                        }
                                    }
                                    this.lastTime = n, this.lastDroppedFrames = r, this.lastDecodedFrames = t
                                }
                            }, t.checkFPSInterval = function() {
                                var e = this.media;
                                if (e)
                                    if (this.isVideoPlaybackQualityAvailable) {
                                        var t = e.getVideoPlaybackQuality();
                                        this.checkFPS(e, t.totalVideoFrames, t.droppedVideoFrames)
                                    } else this.checkFPS(e, e.webkitDecodedFrameCount, e.webkitDroppedFrameCount)
                            }, e
                        }(),
                        Zs = "[eme]",
                        eo = function() {
                            function e(t) {
                                this.hls = void 0, this.config = void 0, this.media = null, this.keyFormatPromise = null, this.keySystemAccessPromises = {}, this._requestLicenseFailureCount = 0, this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, this.setMediaKeysQueue = e.CDMCleanupPromise ? [e.CDMCleanupPromise] : [], this.onMediaEncrypted = this._onMediaEncrypted.bind(this), this.onWaitingForKey = this._onWaitingForKey.bind(this), this.debug = F.debug.bind(F, Zs), this.log = F.log.bind(F, Zs), this.warn = F.warn.bind(F, Zs), this.error = F.error.bind(F, Zs), this.hls = t, this.config = t.config, this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.unregisterListeners(), this.onMediaDetached();
                                var e = this.config;
                                e.requestMediaKeySystemAccessFunc = null, e.licenseXhrSetup = e.licenseResponseCallback = void 0, e.drmSystems = e.drmSystemOptions = {}, this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null, this.config = null
                            }, t.registerListeners = function() {
                                this.hls.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(I.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.on(I.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(I.MANIFEST_LOADED, this.onManifestLoaded, this)
                            }, t.unregisterListeners = function() {
                                this.hls.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(I.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.off(I.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.off(I.MANIFEST_LOADED, this.onManifestLoaded, this)
                            }, t.getLicenseServerUrl = function(e) {
                                var t = this.config,
                                    r = t.drmSystems,
                                    n = t.widevineLicenseUrl,
                                    i = r[e];
                                if (i) return i.licenseUrl;
                                if (e === re.WIDEVINE && n) return n;
                                throw new Error('no license server URL configured for key-system "' + e + '"')
                            }, t.getServerCertificateUrl = function(e) {
                                var t = this.config.drmSystems[e];
                                if (t) return t.serverCertificateUrl;
                                this.log('No Server Certificate in config.drmSystems["' + e + '"]')
                            }, t.attemptKeySystemAccess = function(e) {
                                var t = this,
                                    r = this.hls.levels,
                                    n = function(e, t, r) {
                                        return !!e && r.indexOf(e) === t
                                    },
                                    i = r.map((function(e) {
                                        return e.audioCodec
                                    })).filter(n),
                                    a = r.map((function(e) {
                                        return e.videoCodec
                                    })).filter(n);
                                return i.length + a.length === 0 && a.push("avc1.42e01e"), new Promise((function(r, n) {
                                    ! function e(s) {
                                        var o = s.shift();
                                        t.getMediaKeysPromise(o, i, a).then((function(e) {
                                            return r({
                                                keySystem: o,
                                                mediaKeys: e
                                            })
                                        })).catch((function(t) {
                                            s.length ? e(s) : n(t instanceof ao ? t : new ao({
                                                type: w.KEY_SYSTEM_ERROR,
                                                details: D.KEY_SYSTEM_NO_ACCESS,
                                                error: t,
                                                fatal: !0
                                            }, t.message))
                                        }))
                                    }(e)
                                }))
                            }, t.requestMediaKeySystemAccess = function(e, t) {
                                var r = this.config.requestMediaKeySystemAccessFunc;
                                if ("function" != typeof r) {
                                    var n = "Configured requestMediaKeySystemAccess is not a function " + r;
                                    return null === ce && "http:" === self.location.protocol && (n = "navigator.requestMediaKeySystemAccess is not available over insecure protocol " + location.protocol), Promise.reject(new Error(n))
                                }
                                return r(e, t)
                            }, t.getMediaKeysPromise = function(e, t, r) {
                                var n = this,
                                    i = de(e, t, r, this.config.drmSystemOptions),
                                    a = this.keySystemAccessPromises[e],
                                    s = null == a ? void 0 : a.keySystemAccess;
                                if (!s) {
                                    this.log('Requesting encrypted media "' + e + '" key-system access with config: ' + JSON.stringify(i)), s = this.requestMediaKeySystemAccess(e, i);
                                    var o = this.keySystemAccessPromises[e] = {
                                        keySystemAccess: s
                                    };
                                    return s.catch((function(t) {
                                        n.log('Failed to obtain access to key-system "' + e + '": ' + t)
                                    })), s.then((function(t) {
                                        n.log('Access for key-system "' + t.keySystem + '" obtained');
                                        var r = n.fetchServerCertificate(e);
                                        return n.log('Create media-keys for "' + e + '"'), o.mediaKeys = t.createMediaKeys().then((function(t) {
                                            return n.log('Media-keys created for "' + e + '"'), r.then((function(r) {
                                                return r ? n.setMediaKeysServerCertificate(t, e, r) : t
                                            }))
                                        })), o.mediaKeys.catch((function(t) {
                                            n.error('Failed to create media-keys for "' + e + '"}: ' + t)
                                        })), o.mediaKeys
                                    }))
                                }
                                return s.then((function() {
                                    return a.mediaKeys
                                }))
                            }, t.createMediaKeySessionContext = function(e) {
                                var t = e.decryptdata,
                                    r = e.keySystem,
                                    n = e.mediaKeys;
                                this.log('Creating key-system session "' + r + '" keyId: ' + xe.hexDump(t.keyId || []));
                                var i = n.createSession(),
                                    a = {
                                        decryptdata: t,
                                        keySystem: r,
                                        mediaKeys: n,
                                        mediaKeysSession: i,
                                        keyStatus: "status-pending"
                                    };
                                return this.mediaKeySessions.push(a), a
                            }, t.renewKeySession = function(e) {
                                var t = e.decryptdata;
                                if (t.pssh) {
                                    var r = this.createMediaKeySessionContext(e),
                                        n = this.getKeyIdString(t),
                                        i = "cenc";
                                    this.keyIdToKeySessionPromise[n] = this.generateRequestWithPreferredKeySession(r, i, t.pssh, "expired")
                                } else this.warn("Could not renew expired session. Missing pssh initData.");
                                this.removeSession(e)
                            }, t.getKeyIdString = function(e) {
                                if (!e) throw new Error("Could not read keyId of undefined decryptdata");
                                if (null === e.keyId) throw new Error("keyId is null");
                                return xe.hexDump(e.keyId)
                            }, t.updateKeySession = function(e, t) {
                                var r, n = e.mediaKeysSession;
                                return this.log('Updating key-session "' + n.sessionId + '" for keyID ' + xe.hexDump((null == (r = e.decryptdata) ? void 0 : r.keyId) || []) + "\n      } (data length: " + (t ? t.byteLength : t) + ")"), n.update(t)
                            }, t.selectKeySystemFormat = function(e) {
                                var t = Object.keys(e.levelkeys || {});
                                return this.keyFormatPromise || (this.log("Selecting key-system from fragment (sn: " + e.sn + " " + e.type + ": " + e.level + ") key formats " + t.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(t)), this.keyFormatPromise
                            }, t.getKeyFormatPromise = function(e) {
                                var t = this;
                                return new Promise((function(r, n) {
                                    var i = le(t.config),
                                        a = e.map(ie).filter((function(e) {
                                            return !!e && -1 !== i.indexOf(e)
                                        }));
                                    return t.getKeySystemSelectionPromise(a).then((function(e) {
                                        var t = e.keySystem,
                                            i = oe(t);
                                        i ? r(i) : n(new Error('Unable to find format for key-system "' + t + '"'))
                                    })).catch(n)
                                }))
                            }, t.loadKey = function(e) {
                                var t = this,
                                    r = e.keyInfo.decryptdata,
                                    n = this.getKeyIdString(r),
                                    i = "(keyId: " + n + ' format: "' + r.keyFormat + '" method: ' + r.method + " uri: " + r.uri + ")";
                                this.log("Starting session for key " + i);
                                var a = this.keyIdToKeySessionPromise[n];
                                return a || (a = this.keyIdToKeySessionPromise[n] = this.getKeySystemForKeyPromise(r).then((function(n) {
                                    var a = n.keySystem,
                                        s = n.mediaKeys;
                                    return t.throwIfDestroyed(), t.log("Handle encrypted media sn: " + e.frag.sn + " " + e.frag.type + ": " + e.frag.level + " using key " + i), t.attemptSetMediaKeys(a, s).then((function() {
                                        t.throwIfDestroyed();
                                        var e = t.createMediaKeySessionContext({
                                                keySystem: a,
                                                mediaKeys: s,
                                                decryptdata: r
                                            }),
                                            n = "cenc";
                                        return t.generateRequestWithPreferredKeySession(e, n, r.pssh, "playlist-key")
                                    }))
                                }))).catch((function(e) {
                                    return t.handleError(e)
                                })), a
                            }, t.throwIfDestroyed = function(e) {
                                if (!this.hls) throw new Error("invalid state")
                            }, t.handleError = function(e) {
                                this.hls && (this.error(e.message), e instanceof ao ? this.hls.trigger(I.ERROR, e.data) : this.hls.trigger(I.ERROR, {
                                    type: w.KEY_SYSTEM_ERROR,
                                    details: D.KEY_SYSTEM_NO_KEYS,
                                    error: e,
                                    fatal: !0
                                }))
                            }, t.getKeySystemForKeyPromise = function(e) {
                                var t = this.getKeyIdString(e),
                                    r = this.keyIdToKeySessionPromise[t];
                                if (!r) {
                                    var n = ie(e.keyFormat),
                                        i = n ? [n] : le(this.config);
                                    return this.attemptKeySystemAccess(i)
                                }
                                return r
                            }, t.getKeySystemSelectionPromise = function(e) {
                                if (e.length || (e = le(this.config)), 0 === e.length) throw new ao({
                                    type: w.KEY_SYSTEM_ERROR,
                                    details: D.KEY_SYSTEM_NO_CONFIGURED_LICENSE,
                                    fatal: !0
                                }, "Missing key-system license configuration options " + JSON.stringify({
                                    drmSystems: this.config.drmSystems
                                }));
                                return this.attemptKeySystemAccess(e)
                            }, t._onMediaEncrypted = function(e) {
                                var t = this,
                                    r = e.initDataType,
                                    n = e.initData;
                                if (this.debug('"' + e.type + '" event: init data type: "' + r + '"'), null !== n) {
                                    var i, a;
                                    if ("sinf" === r && this.config.drmSystems[re.FAIRPLAY]) {
                                        var s = Me(new Uint8Array(n));
                                        try {
                                            var o = $(JSON.parse(s).sinf),
                                                l = $e(new Uint8Array(o));
                                            if (!l) return;
                                            i = l.subarray(8, 24), a = re.FAIRPLAY
                                        } catch (e) {
                                            return void this.warn('Failed to parse sinf "encrypted" event message initData')
                                        }
                                    } else {
                                        var u = dt(n);
                                        if (null === u) return;
                                        0 === u.version && u.systemId === ae.WIDEVINE && u.data && (i = u.data.subarray(8, 24)), a = se(u.systemId)
                                    }
                                    if (a && i) {
                                        for (var c, d = xe.hexDump(i), h = this.keyIdToKeySessionPromise, f = this.mediaKeySessions, g = h[d], p = function() {
                                                var e = f[m],
                                                    a = e.decryptdata;
                                                if (a.pssh || !a.keyId) return 0;
                                                var s = xe.hexDump(a.keyId);
                                                return d === s || -1 !== a.uri.replace(/-/g, "").indexOf(d) ? (g = h[s], delete h[s], a.pssh = new Uint8Array(n), a.keyId = i, g = h[d] = g.then((function() {
                                                    return t.generateRequestWithPreferredKeySession(e, r, n, "encrypted-event-key-match")
                                                })), 1) : void 0
                                            }, m = 0; m < f.length && (0 === (c = p()) || 1 !== c); m++);
                                        g || (g = h[d] = this.getKeySystemSelectionPromise([a]).then((function(e) {
                                            var a, s = e.keySystem,
                                                o = e.mediaKeys;
                                            t.throwIfDestroyed();
                                            var l = new ft("ISO-23001-7", d, null != (a = oe(s)) ? a : "");
                                            return l.pssh = new Uint8Array(n), l.keyId = i, t.attemptSetMediaKeys(s, o).then((function() {
                                                t.throwIfDestroyed();
                                                var e = t.createMediaKeySessionContext({
                                                    decryptdata: l,
                                                    keySystem: s,
                                                    mediaKeys: o
                                                });
                                                return t.generateRequestWithPreferredKeySession(e, r, n, "encrypted-event-no-match")
                                            }))
                                        }))), g.catch((function(e) {
                                            return t.handleError(e)
                                        }))
                                    }
                                }
                            }, t._onWaitingForKey = function(e) {
                                this.log('"' + e.type + '" event')
                            }, t.attemptSetMediaKeys = function(e, t) {
                                var r = this,
                                    n = this.setMediaKeysQueue.slice();
                                this.log('Setting media-keys for "' + e + '"');
                                var i = Promise.all(n).then((function() {
                                    if (!r.media) throw new Error("Attempted to set mediaKeys without media element attached");
                                    return r.media.setMediaKeys(t)
                                }));
                                return this.setMediaKeysQueue.push(i), i.then((function() {
                                    r.log('Media-keys set for "' + e + '"'), n.push(i), r.setMediaKeysQueue = r.setMediaKeysQueue.filter((function(e) {
                                        return -1 === n.indexOf(e)
                                    }))
                                }))
                            }, t.generateRequestWithPreferredKeySession = function(e, t, r, n) {
                                var i, a, s = this,
                                    o = null == (i = this.config.drmSystems) || null == (a = i[e.keySystem]) ? void 0 : a.generateRequest;
                                if (o) try {
                                    var l = o.call(this.hls, t, r, e);
                                    if (!l) throw new Error("Invalid response from configured generateRequest filter");
                                    t = l.initDataType, r = e.decryptdata.pssh = l.initData ? new Uint8Array(l.initData) : null
                                } catch (e) {
                                    var u;
                                    if (this.warn(e.message), null != (u = this.hls) && u.config.debug) throw e
                                }
                                if (null === r) return this.log('Skipping key-session request for "' + n + '" (no initData)'), Promise.resolve(e);
                                var c = this.getKeyIdString(e.decryptdata);
                                this.log('Generating key-session request for "' + n + '": ' + c + " (init data type: " + t + " length: " + (r ? r.byteLength : null) + ")");
                                var d = new Sa,
                                    h = e._onmessage = function(t) {
                                        var r = e.mediaKeysSession;
                                        if (r) {
                                            var n = t.messageType,
                                                i = t.message;
                                            s.log('"' + n + '" message event for session "' + r.sessionId + '" message size: ' + i.byteLength), "license-request" === n || "license-renewal" === n ? s.renewLicense(e, i).catch((function(e) {
                                                s.handleError(e), d.emit("error", e)
                                            })) : "license-release" === n ? e.keySystem === re.FAIRPLAY && (s.updateKeySession(e, ee("acknowledged")), s.removeSession(e)) : s.warn('unhandled media key message type "' + n + '"')
                                        } else d.emit("error", new Error("invalid state"))
                                    },
                                    f = e._onkeystatuseschange = function(t) {
                                        if (e.mediaKeysSession) {
                                            s.onKeyStatusChange(e);
                                            var r = e.keyStatus;
                                            d.emit("keyStatus", r), "expired" === r && (s.warn(e.keySystem + " expired for key " + c), s.renewKeySession(e))
                                        } else d.emit("error", new Error("invalid state"))
                                    };
                                e.mediaKeysSession.addEventListener("message", h), e.mediaKeysSession.addEventListener("keystatuseschange", f);
                                var g = new Promise((function(e, t) {
                                    d.on("error", t), d.on("keyStatus", (function(r) {
                                        r.startsWith("usable") ? e() : "output-restricted" === r ? t(new ao({
                                            type: w.KEY_SYSTEM_ERROR,
                                            details: D.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED,
                                            fatal: !1
                                        }, "HDCP level output restricted")) : "internal-error" === r ? t(new ao({
                                            type: w.KEY_SYSTEM_ERROR,
                                            details: D.KEY_SYSTEM_STATUS_INTERNAL_ERROR,
                                            fatal: !0
                                        }, 'key status changed to "' + r + '"')) : "expired" === r ? t(new Error("key expired while generating request")) : s.warn('unhandled key status change "' + r + '"')
                                    }))
                                }));
                                return e.mediaKeysSession.generateRequest(t, r).then((function() {
                                    var t;
                                    s.log('Request generated for key-session "' + (null == (t = e.mediaKeysSession) ? void 0 : t.sessionId) + '" keyId: ' + c)
                                })).catch((function(e) {
                                    throw new ao({
                                        type: w.KEY_SYSTEM_ERROR,
                                        details: D.KEY_SYSTEM_NO_SESSION,
                                        error: e,
                                        fatal: !1
                                    }, "Error generating key-session request: " + e)
                                })).then((function() {
                                    return g
                                })).catch((function(t) {
                                    throw d.removeAllListeners(), s.removeSession(e), t
                                })).then((function() {
                                    return d.removeAllListeners(), e
                                }))
                            }, t.onKeyStatusChange = function(e) {
                                var t = this;
                                e.mediaKeysSession.keyStatuses.forEach((function(r, n) {
                                    t.log('key status change "' + r + '" for keyStatuses keyId: ' + xe.hexDump("buffer" in n ? new Uint8Array(n.buffer, n.byteOffset, n.byteLength) : new Uint8Array(n)) + " session keyId: " + xe.hexDump(new Uint8Array(e.decryptdata.keyId || [])) + " uri: " + e.decryptdata.uri), e.keyStatus = r
                                }))
                            }, t.fetchServerCertificate = function(e) {
                                var t = this.config,
                                    r = new(0, t.loader)(t),
                                    i = this.getServerCertificateUrl(e);
                                return i ? (this.log('Fetching server certificate for "' + e + '"'), new Promise((function(a, s) {
                                    var o = {
                                            responseType: "arraybuffer",
                                            url: i
                                        },
                                        l = t.certLoadPolicy.default,
                                        u = {
                                            loadPolicy: l,
                                            timeout: l.maxLoadTimeMs,
                                            maxRetry: 0,
                                            retryDelay: 0,
                                            maxRetryDelay: 0
                                        },
                                        c = {
                                            onSuccess: function(e, t, r, n) {
                                                a(e.data)
                                            },
                                            onError: function(t, r, a, l) {
                                                s(new ao({
                                                    type: w.KEY_SYSTEM_ERROR,
                                                    details: D.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,
                                                    fatal: !0,
                                                    networkDetails: a,
                                                    response: n({
                                                        url: o.url,
                                                        data: void 0
                                                    }, t)
                                                }, '"' + e + '" certificate request failed (' + i + "). Status: " + t.code + " (" + t.text + ")"))
                                            },
                                            onTimeout: function(t, r, n) {
                                                s(new ao({
                                                    type: w.KEY_SYSTEM_ERROR,
                                                    details: D.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,
                                                    fatal: !0,
                                                    networkDetails: n,
                                                    response: {
                                                        url: o.url,
                                                        data: void 0
                                                    }
                                                }, '"' + e + '" certificate request timed out (' + i + ")"))
                                            },
                                            onAbort: function(e, t, r) {
                                                s(new Error("aborted"))
                                            }
                                        };
                                    r.load(o, u, c)
                                }))) : Promise.resolve()
                            }, t.setMediaKeysServerCertificate = function(e, t, r) {
                                var n = this;
                                return new Promise((function(i, a) {
                                    e.setServerCertificate(r).then((function(a) {
                                        n.log("setServerCertificate " + (a ? "success" : "not supported by CDM") + " (" + (null == r ? void 0 : r.byteLength) + ') on "' + t + '"'), i(e)
                                    })).catch((function(e) {
                                        a(new ao({
                                            type: w.KEY_SYSTEM_ERROR,
                                            details: D.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,
                                            error: e,
                                            fatal: !0
                                        }, e.message))
                                    }))
                                }))
                            }, t.renewLicense = function(e, t) {
                                var r = this;
                                return this.requestLicense(e, new Uint8Array(t)).then((function(t) {
                                    return r.updateKeySession(e, new Uint8Array(t)).catch((function(e) {
                                        throw new ao({
                                            type: w.KEY_SYSTEM_ERROR,
                                            details: D.KEY_SYSTEM_SESSION_UPDATE_FAILED,
                                            error: e,
                                            fatal: !0
                                        }, e.message)
                                    }))
                                }))
                            }, t.unpackPlayReadyKeyMessage = function(e, t) {
                                var r = String.fromCharCode.apply(null, new Uint16Array(t.buffer));
                                if (!r.includes("PlayReadyKeyMessage")) return e.setRequestHeader("Content-Type", "text/xml; charset=utf-8"), t;
                                var n = (new DOMParser).parseFromString(r, "application/xml"),
                                    i = n.querySelectorAll("HttpHeader");
                                if (i.length > 0)
                                    for (var a, s = 0, o = i.length; s < o; s++) {
                                        var l, u, c = null == (l = (a = i[s]).querySelector("name")) ? void 0 : l.textContent,
                                            d = null == (u = a.querySelector("value")) ? void 0 : u.textContent;
                                        c && d && e.setRequestHeader(c, d)
                                    }
                                var h = n.querySelector("Challenge"),
                                    f = null == h ? void 0 : h.textContent;
                                if (!f) throw new Error("Cannot find <Challenge> in key message");
                                return ee(atob(f))
                            }, t.setupLicenseXHR = function(e, t, r, n) {
                                var i = this,
                                    a = this.config.licenseXhrSetup;
                                return a ? Promise.resolve().then((function() {
                                    if (!r.decryptdata) throw new Error("Key removed");
                                    return a.call(i.hls, e, t, r, n)
                                })).catch((function(s) {
                                    if (!r.decryptdata) throw s;
                                    return e.open("POST", t, !0), a.call(i.hls, e, t, r, n)
                                })).then((function(r) {
                                    return e.readyState || e.open("POST", t, !0), {
                                        xhr: e,
                                        licenseChallenge: r || n
                                    }
                                })) : (e.open("POST", t, !0), Promise.resolve({
                                    xhr: e,
                                    licenseChallenge: n
                                }))
                            }, t.requestLicense = function(e, t) {
                                var r = this,
                                    n = this.config.keyLoadPolicy.default;
                                return new Promise((function(i, a) {
                                    var s = r.getLicenseServerUrl(e.keySystem);
                                    r.log("Sending license request to URL: " + s);
                                    var o = new XMLHttpRequest;
                                    o.responseType = "arraybuffer", o.onreadystatechange = function() {
                                        if (!r.hls || !e.mediaKeysSession) return a(new Error("invalid state"));
                                        if (4 === o.readyState)
                                            if (200 === o.status) {
                                                r._requestLicenseFailureCount = 0;
                                                var l = o.response;
                                                r.log("License received " + (l instanceof ArrayBuffer ? l.byteLength : l));
                                                var u = r.config.licenseResponseCallback;
                                                if (u) try {
                                                    l = u.call(r.hls, o, s, e)
                                                } catch (e) {
                                                    r.error(e)
                                                }
                                                i(l)
                                            } else {
                                                var c = n.errorRetry,
                                                    d = c ? c.maxNumRetry : 0;
                                                if (r._requestLicenseFailureCount++, r._requestLicenseFailureCount > d || o.status >= 400 && o.status < 500) a(new ao({
                                                    type: w.KEY_SYSTEM_ERROR,
                                                    details: D.KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                                                    fatal: !0,
                                                    networkDetails: o,
                                                    response: {
                                                        url: s,
                                                        data: void 0,
                                                        code: o.status,
                                                        text: o.statusText
                                                    }
                                                }, "License Request XHR failed (" + s + "). Status: " + o.status + " (" + o.statusText + ")"));
                                                else {
                                                    var h = d - r._requestLicenseFailureCount + 1;
                                                    r.warn("Retrying license request, " + h + " attempts left"), r.requestLicense(e, t).then(i, a)
                                                }
                                            }
                                    }, e.licenseXhr && e.licenseXhr.readyState !== XMLHttpRequest.DONE && e.licenseXhr.abort(), e.licenseXhr = o, r.setupLicenseXHR(o, s, e, t).then((function(t) {
                                        var n = t.xhr,
                                            i = t.licenseChallenge;
                                        e.keySystem == re.PLAYREADY && (i = r.unpackPlayReadyKeyMessage(n, i)), n.send(i)
                                    }))
                                }))
                            }, t.onMediaAttached = function(e, t) {
                                if (this.config.emeEnabled) {
                                    var r = t.media;
                                    this.media = r, r.addEventListener("encrypted", this.onMediaEncrypted), r.addEventListener("waitingforkey", this.onWaitingForKey)
                                }
                            }, t.onMediaDetached = function() {
                                var t = this,
                                    r = this.media,
                                    n = this.mediaKeySessions;
                                r && (r.removeEventListener("encrypted", this.onMediaEncrypted), r.removeEventListener("waitingforkey", this.onWaitingForKey), this.media = null), this._requestLicenseFailureCount = 0, this.setMediaKeysQueue = [], this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, ft.clearKeyUriToKeyIdMap();
                                var i = n.length;
                                e.CDMCleanupPromise = Promise.all(n.map((function(e) {
                                    return t.removeSession(e)
                                })).concat(null == r ? void 0 : r.setMediaKeys(null).catch((function(e) {
                                    t.log("Could not clear media keys: " + e)
                                })))).then((function() {
                                    i && (t.log("finished closing key sessions and clearing media keys"), n.length = 0)
                                })).catch((function(e) {
                                    t.log("Could not close sessions and clear media keys: " + e)
                                }))
                            }, t.onManifestLoading = function() {
                                this.keyFormatPromise = null
                            }, t.onManifestLoaded = function(e, t) {
                                var r = t.sessionKeys;
                                if (r && this.config.emeEnabled && !this.keyFormatPromise) {
                                    var n = r.reduce((function(e, t) {
                                        return -1 === e.indexOf(t.keyFormat) && e.push(t.keyFormat), e
                                    }), []);
                                    this.log("Selecting key-system from session-keys " + n.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(n)
                                }
                            }, t.removeSession = function(e) {
                                var t = this,
                                    r = e.mediaKeysSession,
                                    n = e.licenseXhr;
                                if (r) {
                                    this.log("Remove licenses and keys and close session " + r.sessionId), e._onmessage && (r.removeEventListener("message", e._onmessage), e._onmessage = void 0), e._onkeystatuseschange && (r.removeEventListener("keystatuseschange", e._onkeystatuseschange), e._onkeystatuseschange = void 0), n && n.readyState !== XMLHttpRequest.DONE && n.abort(), e.mediaKeysSession = e.decryptdata = e.licenseXhr = void 0;
                                    var i = this.mediaKeySessions.indexOf(e);
                                    return i > -1 && this.mediaKeySessions.splice(i, 1), r.remove().catch((function(e) {
                                        t.log("Could not remove session: " + e)
                                    })).then((function() {
                                        return r.close()
                                    })).catch((function(e) {
                                        t.log("Could not close session: " + e)
                                    }))
                                }
                            }, e
                        }();
                    eo.CDMCleanupPromise = void 0;
                    var to, ro, no, io, ao = function(e) {
                        function t(t, r) {
                            var n;
                            return (n = e.call(this, r) || this).data = void 0, t.error || (t.error = new Error(r)), n.data = t, t.err = t.error, n
                        }
                        return c(t, e), t
                    }(m(Error));
                    (function(e) {
                        e.MANIFEST = "m", e.AUDIO = "a", e.VIDEO = "v", e.MUXED = "av", e.INIT = "i", e.CAPTION = "c", e.TIMED_TEXT = "tt", e.KEY = "k", e.OTHER = "o"
                    })(to || (to = {})),
                    function(e) {
                        e.DASH = "d", e.HLS = "h", e.SMOOTH = "s", e.OTHER = "o"
                    }(ro || (ro = {})),
                    function(e) {
                        e.OBJECT = "CMCD-Object", e.REQUEST = "CMCD-Request", e.SESSION = "CMCD-Session", e.STATUS = "CMCD-Status"
                    }(no || (no = {}));
                    var so = ((io = {})[no.OBJECT] = ["br", "d", "ot", "tb"], io[no.REQUEST] = ["bl", "dl", "mtp", "nor", "nrr", "su"], io[no.SESSION] = ["cid", "pr", "sf", "sid", "st", "v"], io[no.STATUS] = ["bs", "rtp"], io),
                        oo = function e(t, r) {
                            this.value = void 0, this.params = void 0, Array.isArray(t) && (t = t.map((function(t) {
                                return t instanceof e ? t : new e(t)
                            }))), this.value = t, this.params = r
                        },
                        lo = function(e) {
                            this.description = void 0, this.description = e
                        },
                        uo = "Dict";

                    function co(e) {
                        return Array.isArray(e) ? JSON.stringify(e) : e instanceof Map ? "Map{}" : e instanceof Set ? "Set{}" : "object" == typeof e ? JSON.stringify(e) : String(e)
                    }

                    function ho(e, t, r, n) {
                        return new Error("failed to " + e + ' "' + co(t) + '" as ' + r, {
                            cause: n
                        })
                    }
                    var fo = "Bare Item",
                        go = "Boolean",
                        po = "Byte Sequence",
                        mo = "Decimal",
                        vo = "Integer";

                    function yo(e) {
                        return e < -999999999999999 || 999999999999999 < e
                    }
                    var To = /[\x00-\x1f\x7f]+/,
                        bo = "Token",
                        Eo = "Key";

                    function So(e, t, r) {
                        return ho("serialize", e, t, r)
                    }

                    function Ao(e) {
                        if ("boolean" != typeof e) throw So(e, go);
                        return e ? "?1" : "?0"
                    }

                    function ko(e) {
                        return btoa(String.fromCharCode.apply(String, e))
                    }

                    function Lo(e) {
                        if (!1 === ArrayBuffer.isView(e)) throw So(e, po);
                        return ":" + ko(e) + ":"
                    }

                    function Ro(e) {
                        if (yo(e)) throw So(e, vo);
                        return e.toString()
                    }

                    function Io(e) {
                        return "@" + Ro(e.getTime() / 1e3)
                    }

                    function wo(e, t) {
                        if (e < 0) return -wo(-e, t);
                        var r = Math.pow(10, t);
                        if (Math.abs(e * r % 1 - .5) < Number.EPSILON) {
                            var n = Math.floor(e * r);
                            return (n % 2 == 0 ? n : n + 1) / r
                        }
                        return Math.round(e * r) / r
                    }

                    function Do(e) {
                        var t = wo(e, 3);
                        if (Math.floor(Math.abs(t)).toString().length > 12) throw So(e, mo);
                        var r = t.toString();
                        return r.includes(".") ? r : r + ".0"
                    }
                    var Co = "String";

                    function xo(e) {
                        if (To.test(e)) throw So(e, Co);
                        return '"' + e.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"'
                    }

                    function _o(e) {
                        return e.description || e.toString().slice(7, -1)
                    }

                    function Oo(e) {
                        var t = _o(e);
                        if (!1 === /^([a-zA-Z*])([!#$%&'*+\-.^_`|~\w:/]*)$/.test(t)) throw So(t, bo);
                        return t
                    }

                    function Po(e) {
                        switch (typeof e) {
                            case "number":
                                if (!k(e)) throw So(e, fo);
                                return Number.isInteger(e) ? Ro(e) : Do(e);
                            case "string":
                                return xo(e);
                            case "symbol":
                                return Oo(e);
                            case "boolean":
                                return Ao(e);
                            case "object":
                                if (e instanceof Date) return Io(e);
                                if (e instanceof Uint8Array) return Lo(e);
                                if (e instanceof lo) return Oo(e);
                            default:
                                throw So(e, fo)
                        }
                    }

                    function Mo(e) {
                        if (!1 === /^[a-z*][a-z0-9\-_.*]*$/.test(e)) throw So(e, Eo);
                        return e
                    }

                    function Fo(e) {
                        return null == e ? "" : Object.entries(e).map((function(e) {
                            var t = e[0],
                                r = e[1];
                            return !0 === r ? ";" + Mo(t) : ";" + Mo(t) + "=" + Po(r)
                        })).join("")
                    }

                    function No(e) {
                        return e instanceof oo ? "" + Po(e.value) + Fo(e.params) : Po(e)
                    }

                    function Uo(e) {
                        return "(" + e.value.map(No).join(" ") + ")" + Fo(e.params)
                    }

                    function Bo(e, t) {
                        var r;
                        if (void 0 === t && (t = {
                                whitespace: !0
                            }), "object" != typeof e) throw So(e, uo);
                        var n = e instanceof Map ? e.entries() : Object.entries(e),
                            i = null != (r = t) && r.whitespace ? " " : "";
                        return Array.from(n).map((function(e) {
                            var t = e[0],
                                r = e[1];
                            r instanceof oo == 0 && (r = new oo(r));
                            var n = Mo(t);
                            return !0 === r.value ? n += Fo(r.params) : (n += "=", Array.isArray(r.value) ? n += Uo(r) : n += No(r)), n
                        })).join("," + i)
                    }

                    function Go(e, t) {
                        return Bo(e, t)
                    }
                    var Vo = function(e) {
                            return "ot" === e || "sf" === e || "st" === e
                        },
                        Ho = function(e) {
                            return "number" == typeof e ? k(e) : null != e && "" !== e && !1 !== e
                        };

                    function Ko(e, t) {
                        var r = new URL(e),
                            n = new URL(t);
                        if (r.origin !== n.origin) return e;
                        for (var i = r.pathname.split("/").slice(1), a = n.pathname.split("/").slice(1, -1); i[0] === a[0];) i.shift(), a.shift();
                        for (; a.length;) a.shift(), i.unshift("..");
                        return i.join("/")
                    }

                    function jo() {
                        try {
                            return crypto.randomUUID()
                        } catch (n) {
                            try {
                                var e = URL.createObjectURL(new Blob),
                                    t = e.toString();
                                return URL.revokeObjectURL(e), t.slice(t.lastIndexOf("/") + 1)
                            } catch (e) {
                                var r = (new Date).getTime();
                                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function(e) {
                                    var t = (r + 16 * Math.random()) % 16 | 0;
                                    return r = Math.floor(r / 16), ("x" == e ? t : 3 & t | 8).toString(16)
                                }))
                            }
                        }
                    }
                    var Yo = function(e) {
                            return Math.round(e)
                        },
                        Wo = function(e) {
                            return 100 * Yo(e / 100)
                        },
                        qo = {
                            br: Yo,
                            d: Yo,
                            bl: Wo,
                            dl: Wo,
                            mtp: Wo,
                            nor: function(e, t) {
                                return null != t && t.baseUrl && (e = Ko(e, t.baseUrl)), encodeURIComponent(e)
                            },
                            rtp: Wo,
                            tb: Yo
                        };

                    function zo(e, t) {
                        var r = {};
                        if (null == e || "object" != typeof e) return r;
                        var n = Object.keys(e).sort(),
                            i = u({}, qo, null == t ? void 0 : t.formatters),
                            a = null == t ? void 0 : t.filter;
                        return n.forEach((function(n) {
                            if (null == a || !a(n)) {
                                var s = e[n],
                                    o = i[n];
                                o && (s = o(s, t)), "v" === n && 1 === s || "pr" == n && 1 === s || Ho(s) && (Vo(n) && "string" == typeof s && (s = new lo(s)), r[n] = s)
                            }
                        })), r
                    }

                    function Xo(e, t) {
                        return void 0 === t && (t = {}), e ? Go(zo(e, t), u({
                            whitespace: !1
                        }, t)) : ""
                    }

                    function $o(e, t) {
                        var r;
                        if (void 0 === t && (t = {}), !e) return {};
                        var n = Object.entries(e),
                            i = Object.entries(so).concat(Object.entries((null == (r = t) ? void 0 : r.customHeaderMap) || {})),
                            a = n.reduce((function(e, t) {
                                var r, n = t[0],
                                    a = t[1],
                                    s = (null == (r = i.find((function(e) {
                                        return e[1].includes(n)
                                    }))) ? void 0 : r[0]) || no.REQUEST;
                                return null != e[s] || (e[s] = {}), e[s][n] = a, e
                            }), {});
                        return Object.entries(a).reduce((function(e, r) {
                            var n = r[0],
                                i = r[1];
                            return e[n] = Xo(i, t), e
                        }), {})
                    }

                    function Jo(e, t, r) {
                        return u(e, $o(t, r))
                    }
                    var Qo = "CMCD";

                    function Zo(e, t) {
                        if (void 0 === t && (t = {}), !e) return "";
                        var r = Xo(e, t);
                        return Qo + "=" + encodeURIComponent(r)
                    }
                    var el = /CMCD=[^&#]+/;

                    function tl(e, t, r) {
                        var n = Zo(t, r);
                        if (!n) return e;
                        if (el.test(e)) return e.replace(el, n);
                        var i = e.includes("?") ? "&" : "?";
                        return "" + e + i + n
                    }
                    var rl = function() {
                            function e(e) {
                                var t = this;
                                this.hls = void 0, this.config = void 0, this.media = void 0, this.sid = void 0, this.cid = void 0, this.useHeaders = !1, this.includeKeys = void 0, this.initialized = !1, this.starved = !1, this.buffering = !0, this.audioBuffer = void 0, this.videoBuffer = void 0, this.onWaiting = function() {
                                    t.initialized && (t.starved = !0), t.buffering = !0
                                }, this.onPlaying = function() {
                                    t.initialized || (t.initialized = !0), t.buffering = !1
                                }, this.applyPlaylistData = function(e) {
                                    try {
                                        t.apply(e, {
                                            ot: to.MANIFEST,
                                            su: !t.initialized
                                        })
                                    } catch (e) {
                                        F.warn("Could not generate manifest CMCD data.", e)
                                    }
                                }, this.applyFragmentData = function(e) {
                                    try {
                                        var r = e.frag,
                                            n = t.hls.levels[r.level],
                                            i = t.getObjectType(r),
                                            a = {
                                                d: 1e3 * r.duration,
                                                ot: i
                                            };
                                        i !== to.VIDEO && i !== to.AUDIO && i != to.MUXED || (a.br = n.bitrate / 1e3, a.tb = t.getTopBandwidth(i) / 1e3, a.bl = t.getBufferLength(i)), t.apply(e, a)
                                    } catch (e) {
                                        F.warn("Could not generate segment CMCD data.", e)
                                    }
                                }, this.hls = e;
                                var r = this.config = e.config,
                                    n = r.cmcd;
                                null != n && (r.pLoader = this.createPlaylistLoader(), r.fLoader = this.createFragmentLoader(), this.sid = n.sessionId || jo(), this.cid = n.contentId, this.useHeaders = !0 === n.useHeaders, this.includeKeys = n.includeKeys, this.registerListeners())
                            }
                            var t = e.prototype;
                            return t.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.on(I.MEDIA_DETACHED, this.onMediaDetached, this), e.on(I.BUFFER_CREATED, this.onBufferCreated, this)
                            }, t.unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.off(I.MEDIA_DETACHED, this.onMediaDetached, this), e.off(I.BUFFER_CREATED, this.onBufferCreated, this)
                            }, t.destroy = function() {
                                this.unregisterListeners(), this.onMediaDetached(), this.hls = this.config = this.audioBuffer = this.videoBuffer = null, this.onWaiting = this.onPlaying = null
                            }, t.onMediaAttached = function(e, t) {
                                this.media = t.media, this.media.addEventListener("waiting", this.onWaiting), this.media.addEventListener("playing", this.onPlaying)
                            }, t.onMediaDetached = function() {
                                this.media && (this.media.removeEventListener("waiting", this.onWaiting), this.media.removeEventListener("playing", this.onPlaying), this.media = null)
                            }, t.onBufferCreated = function(e, t) {
                                var r, n;
                                this.audioBuffer = null == (r = t.tracks.audio) ? void 0 : r.buffer, this.videoBuffer = null == (n = t.tracks.video) ? void 0 : n.buffer
                            }, t.createData = function() {
                                var e;
                                return {
                                    v: 1,
                                    sf: ro.HLS,
                                    sid: this.sid,
                                    cid: this.cid,
                                    pr: null == (e = this.media) ? void 0 : e.playbackRate,
                                    mtp: this.hls.bandwidthEstimate / 1e3
                                }
                            }, t.apply = function(e, t) {
                                void 0 === t && (t = {}), u(t, this.createData());
                                var r = t.ot === to.INIT || t.ot === to.VIDEO || t.ot === to.MUXED;
                                this.starved && r && (t.bs = !0, t.su = !0, this.starved = !1), null == t.su && (t.su = this.buffering);
                                var n = this.includeKeys;
                                n && (t = Object.keys(t).reduce((function(e, r) {
                                    return n.includes(r) && (e[r] = t[r]), e
                                }), {})), this.useHeaders ? (e.headers || (e.headers = {}), Jo(e.headers, t)) : e.url = tl(e.url, t)
                            }, t.getObjectType = function(e) {
                                var t = e.type;
                                return "subtitle" === t ? to.TIMED_TEXT : "initSegment" === e.sn ? to.INIT : "audio" === t ? to.AUDIO : "main" === t ? this.hls.audioTracks.length ? to.VIDEO : to.MUXED : void 0
                            }, t.getTopBandwidth = function(e) {
                                var t, r = 0,
                                    n = this.hls;
                                if (e === to.AUDIO) t = n.audioTracks;
                                else {
                                    var i = n.maxAutoLevel,
                                        a = i > -1 ? i + 1 : n.levels.length;
                                    t = n.levels.slice(0, a)
                                }
                                for (var s, o = b(t); !(s = o()).done;) {
                                    var l = s.value;
                                    l.bitrate > r && (r = l.bitrate)
                                }
                                return r > 0 ? r : NaN
                            }, t.getBufferLength = function(e) {
                                var t = this.hls.media,
                                    r = e === to.AUDIO ? this.audioBuffer : this.videoBuffer;
                                return r && t ? 1e3 * In.bufferInfo(r, t.currentTime, this.config.maxBufferHole).len : NaN
                            }, t.createPlaylistLoader = function() {
                                var e = this.config.pLoader,
                                    t = this.applyPlaylistData,
                                    r = e || this.config.loader;
                                return function() {
                                    function e(e) {
                                        this.loader = void 0, this.loader = new r(e)
                                    }
                                    var n = e.prototype;
                                    return n.destroy = function() {
                                        this.loader.destroy()
                                    }, n.abort = function() {
                                        this.loader.abort()
                                    }, n.load = function(e, r, n) {
                                        t(e), this.loader.load(e, r, n)
                                    }, o(e, [{
                                        key: "stats",
                                        get: function() {
                                            return this.loader.stats
                                        }
                                    }, {
                                        key: "context",
                                        get: function() {
                                            return this.loader.context
                                        }
                                    }]), e
                                }()
                            }, t.createFragmentLoader = function() {
                                var e = this.config.fLoader,
                                    t = this.applyFragmentData,
                                    r = e || this.config.loader;
                                return function() {
                                    function e(e) {
                                        this.loader = void 0, this.loader = new r(e)
                                    }
                                    var n = e.prototype;
                                    return n.destroy = function() {
                                        this.loader.destroy()
                                    }, n.abort = function() {
                                        this.loader.abort()
                                    }, n.load = function(e, r, n) {
                                        t(e), this.loader.load(e, r, n)
                                    }, o(e, [{
                                        key: "stats",
                                        get: function() {
                                            return this.loader.stats
                                        }
                                    }, {
                                        key: "context",
                                        get: function() {
                                            return this.loader.context
                                        }
                                    }]), e
                                }()
                            }, e
                        }(),
                        nl = 3e5,
                        il = function() {
                            function e(e) {
                                this.hls = void 0, this.log = void 0, this.loader = null, this.uri = null, this.pathwayId = ".", this.pathwayPriority = null, this.timeToLoad = 300, this.reloadTimer = -1, this.updated = 0, this.started = !1, this.enabled = !0, this.levels = null, this.audioTracks = null, this.subtitleTracks = null, this.penalizedPathways = {}, this.hls = e, this.log = F.log.bind(F, "[content-steering]:"), this.registerListeners()
                            }
                            var t = e.prototype;
                            return t.registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.MANIFEST_LOADED, this.onManifestLoaded, this), e.on(I.MANIFEST_PARSED, this.onManifestParsed, this), e.on(I.ERROR, this.onError, this)
                            }, t.unregisterListeners = function() {
                                var e = this.hls;
                                e && (e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.MANIFEST_LOADED, this.onManifestLoaded, this), e.off(I.MANIFEST_PARSED, this.onManifestParsed, this), e.off(I.ERROR, this.onError, this))
                            }, t.startLoad = function() {
                                if (this.started = !0, this.clearTimeout(), this.enabled && this.uri) {
                                    if (this.updated) {
                                        var e = 1e3 * this.timeToLoad - (performance.now() - this.updated);
                                        if (e > 0) return void this.scheduleRefresh(this.uri, e)
                                    }
                                    this.loadSteeringManifest(this.uri)
                                }
                            }, t.stopLoad = function() {
                                this.started = !1, this.loader && (this.loader.destroy(), this.loader = null), this.clearTimeout()
                            }, t.clearTimeout = function() {
                                -1 !== this.reloadTimer && (self.clearTimeout(this.reloadTimer), this.reloadTimer = -1)
                            }, t.destroy = function() {
                                this.unregisterListeners(), this.stopLoad(), this.hls = null, this.levels = this.audioTracks = this.subtitleTracks = null
                            }, t.removeLevel = function(e) {
                                var t = this.levels;
                                t && (this.levels = t.filter((function(t) {
                                    return t !== e
                                })))
                            }, t.onManifestLoading = function() {
                                this.stopLoad(), this.enabled = !0, this.timeToLoad = 300, this.updated = 0, this.uri = null, this.pathwayId = ".", this.levels = this.audioTracks = this.subtitleTracks = null
                            }, t.onManifestLoaded = function(e, t) {
                                var r = t.contentSteering;
                                null !== r && (this.pathwayId = r.pathwayId, this.uri = r.uri, this.started && this.startLoad())
                            }, t.onManifestParsed = function(e, t) {
                                this.audioTracks = t.audioTracks, this.subtitleTracks = t.subtitleTracks
                            }, t.onError = function(e, t) {
                                var r = t.errorAction;
                                if ((null == r ? void 0 : r.action) === $r.SendAlternateToPenaltyBox && r.flags === Jr.MoveAllAlternatesMatchingHost) {
                                    var n = this.levels,
                                        i = this.pathwayPriority,
                                        a = this.pathwayId;
                                    if (t.context) {
                                        var s = t.context,
                                            o = s.groupId,
                                            l = s.pathwayId,
                                            u = s.type;
                                        o && n ? a = this.getPathwayForGroupId(o, u, a) : l && (a = l)
                                    }
                                    a in this.penalizedPathways || (this.penalizedPathways[a] = performance.now()), !i && n && (i = n.reduce((function(e, t) {
                                        return -1 === e.indexOf(t.pathwayId) && e.push(t.pathwayId), e
                                    }), [])), i && i.length > 1 && (this.updatePathwayPriority(i), r.resolved = this.pathwayId !== a), r.resolved || F.warn("Could not resolve " + t.details + ' ("' + t.error.message + '") with content-steering for Pathway: ' + a + " levels: " + (n ? n.length : n) + " priorities: " + JSON.stringify(i) + " penalized: " + JSON.stringify(this.penalizedPathways))
                                }
                            }, t.filterParsedLevels = function(e) {
                                this.levels = e;
                                var t = this.getLevelsForPathway(this.pathwayId);
                                if (0 === t.length) {
                                    var r = e[0].pathwayId;
                                    this.log("No levels found in Pathway " + this.pathwayId + '. Setting initial Pathway to "' + r + '"'), t = this.getLevelsForPathway(r), this.pathwayId = r
                                }
                                return t.length !== e.length ? (this.log("Found " + t.length + "/" + e.length + ' levels in Pathway "' + this.pathwayId + '"'), t) : e
                            }, t.getLevelsForPathway = function(e) {
                                return null === this.levels ? [] : this.levels.filter((function(t) {
                                    return e === t.pathwayId
                                }))
                            }, t.updatePathwayPriority = function(e) {
                                var t;
                                this.pathwayPriority = e;
                                var r = this.penalizedPathways,
                                    n = performance.now();
                                Object.keys(r).forEach((function(e) {
                                    n - r[e] > nl && delete r[e]
                                }));
                                for (var i = 0; i < e.length; i++) {
                                    var a = e[i];
                                    if (!(a in r)) {
                                        if (a === this.pathwayId) return;
                                        var s = this.hls.nextLoadLevel,
                                            o = this.hls.levels[s];
                                        if ((t = this.getLevelsForPathway(a)).length > 0) {
                                            this.log('Setting Pathway to "' + a + '"'), this.pathwayId = a, Nr(t), this.hls.trigger(I.LEVELS_UPDATED, {
                                                levels: t
                                            });
                                            var l = this.hls.levels[s];
                                            o && l && this.levels && (l.attrs["STABLE-VARIANT-ID"] !== o.attrs["STABLE-VARIANT-ID"] && l.bitrate !== o.bitrate && this.log("Unstable Pathways change from bitrate " + o.bitrate + " to " + l.bitrate), this.hls.nextLoadLevel = s);
                                            break
                                        }
                                    }
                                }
                            }, t.getPathwayForGroupId = function(e, t, r) {
                                for (var n = this.getLevelsForPathway(r).concat(this.levels || []), i = 0; i < n.length; i++)
                                    if (t === Xt.AUDIO_TRACK && n[i].hasAudioGroup(e) || t === Xt.SUBTITLE_TRACK && n[i].hasSubtitleGroup(e)) return n[i].pathwayId;
                                return r
                            }, t.clonePathways = function(e) {
                                var t = this,
                                    r = this.levels;
                                if (r) {
                                    var n = {},
                                        i = {};
                                    e.forEach((function(e) {
                                        var a = e.ID,
                                            s = e["BASE-ID"],
                                            o = e["URI-REPLACEMENT"];
                                        if (!r.some((function(e) {
                                                return e.pathwayId === a
                                            }))) {
                                            var l = t.getLevelsForPathway(s).map((function(e) {
                                                var t = new B(e.attrs);
                                                t["PATHWAY-ID"] = a;
                                                var r = t.AUDIO && t.AUDIO + "_clone_" + a,
                                                    s = t.SUBTITLES && t.SUBTITLES + "_clone_" + a;
                                                r && (n[t.AUDIO] = r, t.AUDIO = r), s && (i[t.SUBTITLES] = s, t.SUBTITLES = s);
                                                var l = sl(e.uri, t["STABLE-VARIANT-ID"], "PER-VARIANT-URIS", o),
                                                    u = new Ar({
                                                        attrs: t,
                                                        audioCodec: e.audioCodec,
                                                        bitrate: e.bitrate,
                                                        height: e.height,
                                                        name: e.name,
                                                        url: l,
                                                        videoCodec: e.videoCodec,
                                                        width: e.width
                                                    });
                                                if (e.audioGroups)
                                                    for (var c = 1; c < e.audioGroups.length; c++) u.addGroupId("audio", e.audioGroups[c] + "_clone_" + a);
                                                if (e.subtitleGroups)
                                                    for (var d = 1; d < e.subtitleGroups.length; d++) u.addGroupId("text", e.subtitleGroups[d] + "_clone_" + a);
                                                return u
                                            }));
                                            r.push.apply(r, l), al(t.audioTracks, n, o, a), al(t.subtitleTracks, i, o, a)
                                        }
                                    }))
                                }
                            }, t.loadSteeringManifest = function(e) {
                                var t, r = this,
                                    n = this.hls.config,
                                    i = n.loader;
                                this.loader && this.loader.destroy(), this.loader = new i(n);
                                try {
                                    t = new self.URL(e)
                                } catch (t) {
                                    return this.enabled = !1, void this.log("Failed to parse Steering Manifest URI: " + e)
                                }
                                if ("data:" !== t.protocol) {
                                    var a = 0 | (this.hls.bandwidthEstimate || n.abrEwmaDefaultEstimate);
                                    t.searchParams.set("_HLS_pathway", this.pathwayId), t.searchParams.set("_HLS_throughput", "" + a)
                                }
                                var s = {
                                        responseType: "json",
                                        url: t.href
                                    },
                                    o = n.steeringManifestLoadPolicy.default,
                                    l = o.errorRetry || o.timeoutRetry || {},
                                    u = {
                                        loadPolicy: o,
                                        timeout: o.maxLoadTimeMs,
                                        maxRetry: l.maxNumRetry || 0,
                                        retryDelay: l.retryDelayMs || 0,
                                        maxRetryDelay: l.maxRetryDelayMs || 0
                                    },
                                    c = {
                                        onSuccess: function(e, n, i, a) {
                                            r.log('Loaded steering manifest: "' + t + '"');
                                            var s = e.data;
                                            if (1 === s.VERSION) {
                                                r.updated = performance.now(), r.timeToLoad = s.TTL;
                                                var o = s["RELOAD-URI"],
                                                    l = s["PATHWAY-CLONES"],
                                                    u = s["PATHWAY-PRIORITY"];
                                                if (o) try {
                                                    r.uri = new self.URL(o, t).href
                                                } catch (e) {
                                                    return r.enabled = !1, void r.log("Failed to parse Steering Manifest RELOAD-URI: " + o)
                                                }
                                                r.scheduleRefresh(r.uri || i.url), l && r.clonePathways(l);
                                                var c = {
                                                    steeringManifest: s,
                                                    url: t.toString()
                                                };
                                                r.hls.trigger(I.STEERING_MANIFEST_LOADED, c), u && r.updatePathwayPriority(u)
                                            } else r.log("Steering VERSION " + s.VERSION + " not supported!")
                                        },
                                        onError: function(e, t, n, i) {
                                            if (r.log("Error loading steering manifest: " + e.code + " " + e.text + " (" + t.url + ")"), r.stopLoad(), 410 === e.code) return r.enabled = !1, void r.log("Steering manifest " + t.url + " no longer available");
                                            var a = 1e3 * r.timeToLoad;
                                            if (429 !== e.code) r.scheduleRefresh(r.uri || t.url, a);
                                            else {
                                                var s = r.loader;
                                                if ("function" == typeof(null == s ? void 0 : s.getResponseHeader)) {
                                                    var o = s.getResponseHeader("Retry-After");
                                                    o && (a = 1e3 * parseFloat(o))
                                                }
                                                r.log("Steering manifest " + t.url + " rate limited")
                                            }
                                        },
                                        onTimeout: function(e, t, n) {
                                            r.log("Timeout loading steering manifest (" + t.url + ")"), r.scheduleRefresh(r.uri || t.url)
                                        }
                                    };
                                this.log("Requesting steering manifest: " + t), this.loader.load(s, u, c)
                            }, t.scheduleRefresh = function(e, t) {
                                var r = this;
                                void 0 === t && (t = 1e3 * this.timeToLoad), this.clearTimeout(), this.reloadTimer = self.setTimeout((function() {
                                    var t, n = null == (t = r.hls) ? void 0 : t.media;
                                    !n || n.ended ? r.scheduleRefresh(e, 1e3 * r.timeToLoad) : r.loadSteeringManifest(e)
                                }), t)
                            }, e
                        }();

                    function al(e, t, r, n) {
                        e && Object.keys(t).forEach((function(i) {
                            var a = e.filter((function(e) {
                                return e.groupId === i
                            })).map((function(e) {
                                var a = u({}, e);
                                return a.details = void 0, a.attrs = new B(a.attrs), a.url = a.attrs.URI = sl(e.url, e.attrs["STABLE-RENDITION-ID"], "PER-RENDITION-URIS", r), a.groupId = a.attrs["GROUP-ID"] = t[i], a.attrs["PATHWAY-ID"] = n, a
                            }));
                            e.push.apply(e, a)
                        }))
                    }

                    function sl(e, t, r, n) {
                        var i, a = n.HOST,
                            s = n.PARAMS,
                            o = n[r];
                        t && (i = null == o ? void 0 : o[t]) && (e = i);
                        var l = new self.URL(e);
                        return a && !i && (l.host = a), s && Object.keys(s).sort().forEach((function(e) {
                            e && l.searchParams.set(e, s[e])
                        })), l.href
                    }
                    var ol = /^age:\s*[\d.]+\s*$/im,
                        ll = function() {
                            function e(e) {
                                this.xhrSetup = void 0, this.requestTimeout = void 0, this.retryTimeout = void 0, this.retryDelay = void 0, this.config = null, this.callbacks = null, this.context = null, this.loader = null, this.stats = void 0, this.xhrSetup = e && e.xhrSetup || null, this.stats = new K, this.retryDelay = 0
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.callbacks = null, this.abortInternal(), this.loader = null, this.config = null, this.context = null, this.xhrSetup = null, this.stats = null
                            }, t.abortInternal = function() {
                                var e = this.loader;
                                self.clearTimeout(this.requestTimeout), self.clearTimeout(this.retryTimeout), e && (e.onreadystatechange = null, e.onprogress = null, 4 !== e.readyState && (this.stats.aborted = !0, e.abort()))
                            }, t.abort = function() {
                                var e;
                                this.abortInternal(), null != (e = this.callbacks) && e.onAbort && this.callbacks.onAbort(this.stats, this.context, this.loader)
                            }, t.load = function(e, t, r) {
                                if (this.stats.loading.start) throw new Error("Loader can only be used once.");
                                this.stats.loading.start = self.performance.now(), this.context = e, this.config = t, this.callbacks = r, this.loadInternal()
                            }, t.loadInternal = function() {
                                var e = this,
                                    t = this.config,
                                    r = this.context;
                                if (t && r) {
                                    var n = this.loader = new self.XMLHttpRequest,
                                        i = this.stats;
                                    i.loading.first = 0, i.loaded = 0, i.aborted = !1;
                                    var a = this.xhrSetup;
                                    a ? Promise.resolve().then((function() {
                                        if (!e.stats.aborted) return a(n, r.url)
                                    })).catch((function(e) {
                                        return n.open("GET", r.url, !0), a(n, r.url)
                                    })).then((function() {
                                        e.stats.aborted || e.openAndSendXhr(n, r, t)
                                    })).catch((function(t) {
                                        e.callbacks.onError({
                                            code: n.status,
                                            text: t.message
                                        }, r, n, i)
                                    })) : this.openAndSendXhr(n, r, t)
                                }
                            }, t.openAndSendXhr = function(e, t, r) {
                                e.readyState || e.open("GET", t.url, !0);
                                var n = t.headers,
                                    i = r.loadPolicy,
                                    a = i.maxTimeToFirstByteMs,
                                    s = i.maxLoadTimeMs;
                                if (n)
                                    for (var o in n) e.setRequestHeader(o, n[o]);
                                t.rangeEnd && e.setRequestHeader("Range", "bytes=" + t.rangeStart + "-" + (t.rangeEnd - 1)), e.onreadystatechange = this.readystatechange.bind(this), e.onprogress = this.loadprogress.bind(this), e.responseType = t.responseType, self.clearTimeout(this.requestTimeout), r.timeout = a && k(a) ? a : s, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), r.timeout), e.send()
                            }, t.readystatechange = function() {
                                var e = this.context,
                                    t = this.loader,
                                    r = this.stats;
                                if (e && t) {
                                    var n = t.readyState,
                                        i = this.config;
                                    if (!r.aborted && n >= 2 && (0 === r.loading.first && (r.loading.first = Math.max(self.performance.now(), r.loading.start), i.timeout !== i.loadPolicy.maxLoadTimeMs && (self.clearTimeout(this.requestTimeout), i.timeout = i.loadPolicy.maxLoadTimeMs, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), i.loadPolicy.maxLoadTimeMs - (r.loading.first - r.loading.start)))), 4 === n)) {
                                        self.clearTimeout(this.requestTimeout), t.onreadystatechange = null, t.onprogress = null;
                                        var a = t.status,
                                            s = "text" !== t.responseType;
                                        if (a >= 200 && a < 300 && (s && t.response || null !== t.responseText)) {
                                            r.loading.end = Math.max(self.performance.now(), r.loading.first);
                                            var o = s ? t.response : t.responseText,
                                                l = "arraybuffer" === t.responseType ? o.byteLength : o.length;
                                            if (r.loaded = r.total = l, r.bwEstimate = 8e3 * r.total / (r.loading.end - r.loading.first), !this.callbacks) return;
                                            var u = this.callbacks.onProgress;
                                            if (u && u(r, e, o, t), !this.callbacks) return;
                                            var c = {
                                                url: t.responseURL,
                                                data: o,
                                                code: a
                                            };
                                            this.callbacks.onSuccess(c, r, e, t)
                                        } else {
                                            var d = i.loadPolicy.errorRetry;
                                            Hr(d, r.retry, !1, {
                                                url: e.url,
                                                data: void 0,
                                                code: a
                                            }) ? this.retry(d) : (F.error(a + " while loading " + e.url), this.callbacks.onError({
                                                code: a,
                                                text: t.statusText
                                            }, e, t, r))
                                        }
                                    }
                                }
                            }, t.loadtimeout = function() {
                                var e, t = null == (e = this.config) ? void 0 : e.loadPolicy.timeoutRetry;
                                if (Hr(t, this.stats.retry, !0)) this.retry(t);
                                else {
                                    var r;
                                    F.warn("timeout while loading " + (null == (r = this.context) ? void 0 : r.url));
                                    var n = this.callbacks;
                                    n && (this.abortInternal(), n.onTimeout(this.stats, this.context, this.loader))
                                }
                            }, t.retry = function(e) {
                                var t = this.context,
                                    r = this.stats;
                                this.retryDelay = Gr(e, r.retry), r.retry++, F.warn((status ? "HTTP Status " + status : "Timeout") + " while loading " + (null == t ? void 0 : t.url) + ", retrying " + r.retry + "/" + e.maxNumRetry + " in " + this.retryDelay + "ms"), this.abortInternal(), this.loader = null, self.clearTimeout(this.retryTimeout), this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay)
                            }, t.loadprogress = function(e) {
                                var t = this.stats;
                                t.loaded = e.loaded, e.lengthComputable && (t.total = e.total)
                            }, t.getCacheAge = function() {
                                var e = null;
                                if (this.loader && ol.test(this.loader.getAllResponseHeaders())) {
                                    var t = this.loader.getResponseHeader("age");
                                    e = t ? parseFloat(t) : null
                                }
                                return e
                            }, t.getResponseHeader = function(e) {
                                return this.loader && new RegExp("^" + e + ":\\s*[\\d.]+\\s*$", "im").test(this.loader.getAllResponseHeaders()) ? this.loader.getResponseHeader(e) : null
                            }, e
                        }();

                    function ul() {
                        if (self.fetch && self.AbortController && self.ReadableStream && self.Request) try {
                            return new self.ReadableStream({}), !0
                        } catch (e) {}
                        return !1
                    }
                    var cl = /(\d+)-(\d+)\/(\d+)/,
                        dl = function() {
                            function e(e) {
                                this.fetchSetup = void 0, this.requestTimeout = void 0, this.request = null, this.response = null, this.controller = void 0, this.context = null, this.config = null, this.callbacks = null, this.stats = void 0, this.loader = null, this.fetchSetup = e.fetchSetup || pl, this.controller = new self.AbortController, this.stats = new K
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.loader = this.callbacks = this.context = this.config = this.request = null, this.abortInternal(), this.response = null, this.fetchSetup = this.controller = this.stats = null
                            }, t.abortInternal = function() {
                                this.controller && !this.stats.loading.end && (this.stats.aborted = !0, this.controller.abort())
                            }, t.abort = function() {
                                var e;
                                this.abortInternal(), null != (e = this.callbacks) && e.onAbort && this.callbacks.onAbort(this.stats, this.context, this.response)
                            }, t.load = function(e, t, r) {
                                var n = this,
                                    i = this.stats;
                                if (i.loading.start) throw new Error("Loader can only be used once.");
                                i.loading.start = self.performance.now();
                                var a = hl(e, this.controller.signal),
                                    s = r.onProgress,
                                    o = "arraybuffer" === e.responseType,
                                    l = o ? "byteLength" : "length",
                                    u = t.loadPolicy,
                                    c = u.maxTimeToFirstByteMs,
                                    d = u.maxLoadTimeMs;
                                this.context = e, this.config = t, this.callbacks = r, this.request = this.fetchSetup(e, a), self.clearTimeout(this.requestTimeout), t.timeout = c && k(c) ? c : d, this.requestTimeout = self.setTimeout((function() {
                                    n.abortInternal(), r.onTimeout(i, e, n.response)
                                }), t.timeout), self.fetch(this.request).then((function(a) {
                                    n.response = n.loader = a;
                                    var l = Math.max(self.performance.now(), i.loading.start);
                                    if (self.clearTimeout(n.requestTimeout), t.timeout = d, n.requestTimeout = self.setTimeout((function() {
                                            n.abortInternal(), r.onTimeout(i, e, n.response)
                                        }), d - (l - i.loading.start)), !a.ok) {
                                        var u = a.status,
                                            c = a.statusText;
                                        throw new vl(c || "fetch, bad network response", u, a)
                                    }
                                    return i.loading.first = l, i.total = gl(a.headers) || i.total, s && k(t.highWaterMark) ? n.loadProgressively(a, i, e, t.highWaterMark, s) : o ? a.arrayBuffer() : "json" === e.responseType ? a.json() : a.text()
                                })).then((function(a) {
                                    var o = n.response;
                                    if (!o) throw new Error("loader destroyed");
                                    self.clearTimeout(n.requestTimeout), i.loading.end = Math.max(self.performance.now(), i.loading.first);
                                    var u = a[l];
                                    u && (i.loaded = i.total = u);
                                    var c = {
                                        url: o.url,
                                        data: a,
                                        code: o.status
                                    };
                                    s && !k(t.highWaterMark) && s(i, e, a, o), r.onSuccess(c, i, e, o)
                                })).catch((function(t) {
                                    if (self.clearTimeout(n.requestTimeout), !i.aborted) {
                                        var a = t && t.code || 0,
                                            s = t ? t.message : null;
                                        r.onError({
                                            code: a,
                                            text: s
                                        }, e, t ? t.details : null, i)
                                    }
                                }))
                            }, t.getCacheAge = function() {
                                var e = null;
                                if (this.response) {
                                    var t = this.response.headers.get("age");
                                    e = t ? parseFloat(t) : null
                                }
                                return e
                            }, t.getResponseHeader = function(e) {
                                return this.response ? this.response.headers.get(e) : null
                            }, t.loadProgressively = function(e, t, r, n, i) {
                                void 0 === n && (n = 0);
                                var a = new Qn,
                                    s = e.body.getReader();
                                return function o() {
                                    return s.read().then((function(s) {
                                        if (s.done) return a.dataLength && i(t, r, a.flush(), e), Promise.resolve(new ArrayBuffer(0));
                                        var l = s.value,
                                            u = l.length;
                                        return t.loaded += u, u < n || a.dataLength ? (a.push(l), a.dataLength >= n && i(t, r, a.flush(), e)) : i(t, r, l, e), o()
                                    })).catch((function() {
                                        return Promise.reject()
                                    }))
                                }()
                            }, e
                        }();

                    function hl(e, t) {
                        var r = {
                            method: "GET",
                            mode: "cors",
                            credentials: "same-origin",
                            signal: t,
                            headers: new self.Headers(u({}, e.headers))
                        };
                        return e.rangeEnd && r.headers.set("Range", "bytes=" + e.rangeStart + "-" + String(e.rangeEnd - 1)), r
                    }

                    function fl(e) {
                        var t = cl.exec(e);
                        if (t) return parseInt(t[2]) - parseInt(t[1]) + 1
                    }

                    function gl(e) {
                        var t = e.get("Content-Range");
                        if (t) {
                            var r = fl(t);
                            if (k(r)) return r
                        }
                        var n = e.get("Content-Length");
                        if (n) return parseInt(n)
                    }

                    function pl(e, t) {
                        return new self.Request(e.url, t)
                    }
                    var ml, vl = function(e) {
                            function t(t, r, n) {
                                var i;
                                return (i = e.call(this, t) || this).code = void 0, i.details = void 0, i.code = r, i.details = n, i
                            }
                            return c(t, e), t
                        }(m(Error)),
                        yl = /\s/,
                        Tl = {
                            newCue: function(e, t, r, n) {
                                for (var i, a, s, o, l, u = [], c = self.VTTCue || self.TextTrackCue, d = 0; d < n.rows.length; d++)
                                    if (s = !0, o = 0, l = "", !(i = n.rows[d]).isEmpty()) {
                                        for (var h, f = 0; f < i.chars.length; f++) yl.test(i.chars[f].uchar) && s ? o++ : (l += i.chars[f].uchar, s = !1);
                                        i.cueStartTime = t, t === r && (r += 1e-4), o >= 16 ? o-- : o++;
                                        var g = Ss(l.trim()),
                                            p = ws(t, r, g);
                                        null != e && null != (h = e.cues) && h.getCueById(p) || ((a = new c(t, r, g)).id = p, a.line = d + 1, a.align = "left", a.position = 10 + Math.min(80, 10 * Math.floor(8 * o / 32)), u.push(a))
                                    }
                                return e && u.length && (u.sort((function(e, t) {
                                    return "auto" === e.line || "auto" === t.line ? 0 : e.line > 8 && t.line > 8 ? t.line - e.line : e.line - t.line
                                })), u.forEach((function(t) {
                                    return tr(e, t)
                                }))), u
                            }
                        },
                        bl = n(n({
                            autoStartLoad: !0,
                            startPosition: -1,
                            defaultAudioCodec: void 0,
                            debug: !1,
                            capLevelOnFPSDrop: !1,
                            capLevelToPlayerSize: !1,
                            ignoreDevicePixelRatio: !1,
                            preferManagedMediaSource: !0,
                            initialLiveManifestSize: 1,
                            maxBufferLength: 30,
                            backBufferLength: 1 / 0,
                            frontBufferFlushThreshold: 1 / 0,
                            maxBufferSize: 6e7,
                            maxBufferHole: .1,
                            highBufferWatchdogPeriod: 2,
                            nudgeOffset: .1,
                            nudgeMaxRetry: 3,
                            maxFragLookUpTolerance: .25,
                            liveSyncDurationCount: 3,
                            liveMaxLatencyDurationCount: 1 / 0,
                            liveSyncDuration: void 0,
                            liveMaxLatencyDuration: void 0,
                            maxLiveSyncPlaybackRate: 1,
                            liveDurationInfinity: !1,
                            liveBackBufferLength: null,
                            maxMaxBufferLength: 600,
                            enableWorker: !0,
                            workerPath: null,
                            enableSoftwareAES: !0,
                            startLevel: void 0,
                            startFragPrefetch: !1,
                            fpsDroppedMonitoringPeriod: 5e3,
                            fpsDroppedMonitoringThreshold: .2,
                            appendErrorMaxRetry: 3,
                            loader: ll,
                            fLoader: void 0,
                            pLoader: void 0,
                            xhrSetup: void 0,
                            licenseXhrSetup: void 0,
                            licenseResponseCallback: void 0,
                            abrController: bn,
                            bufferController: ja,
                            capLevelController: Js,
                            errorController: Qr,
                            fpsController: Qs,
                            stretchShortVideoTrack: !1,
                            maxAudioFramesDrift: 1,
                            forceKeyFrameOnDiscontinuity: !0,
                            abrEwmaFastLive: 3,
                            abrEwmaSlowLive: 9,
                            abrEwmaFastVoD: 3,
                            abrEwmaSlowVoD: 9,
                            abrEwmaDefaultEstimate: 5e5,
                            abrEwmaDefaultEstimateMax: 5e6,
                            abrBandWidthFactor: .95,
                            abrBandWidthUpFactor: .7,
                            abrMaxWithRealBitrate: !1,
                            maxStarvationDelay: 4,
                            maxLoadingDelay: 4,
                            minAutoBitrate: 0,
                            emeEnabled: !1,
                            widevineLicenseUrl: void 0,
                            drmSystems: {},
                            drmSystemOptions: {},
                            requestMediaKeySystemAccessFunc: ce,
                            testBandwidth: !0,
                            progressive: !1,
                            lowLatencyMode: !0,
                            cmcd: void 0,
                            enableDateRangeMetadataCues: !0,
                            enableEmsgMetadataCues: !0,
                            enableID3MetadataCues: !0,
                            useMediaCapabilities: !0,
                            certLoadPolicy: {
                                default: {
                                    maxTimeToFirstByteMs: 8e3,
                                    maxLoadTimeMs: 2e4,
                                    timeoutRetry: null,
                                    errorRetry: null
                                }
                            },
                            keyLoadPolicy: {
                                default: {
                                    maxTimeToFirstByteMs: 8e3,
                                    maxLoadTimeMs: 2e4,
                                    timeoutRetry: {
                                        maxNumRetry: 1,
                                        retryDelayMs: 1e3,
                                        maxRetryDelayMs: 2e4,
                                        backoff: "linear"
                                    },
                                    errorRetry: {
                                        maxNumRetry: 8,
                                        retryDelayMs: 1e3,
                                        maxRetryDelayMs: 2e4,
                                        backoff: "linear"
                                    }
                                }
                            },
                            manifestLoadPolicy: {
                                default: {
                                    maxTimeToFirstByteMs: 1 / 0,
                                    maxLoadTimeMs: 2e4,
                                    timeoutRetry: {
                                        maxNumRetry: 2,
                                        retryDelayMs: 0,
                                        maxRetryDelayMs: 0
                                    },
                                    errorRetry: {
                                        maxNumRetry: 1,
                                        retryDelayMs: 1e3,
                                        maxRetryDelayMs: 8e3
                                    }
                                }
                            },
                            playlistLoadPolicy: {
                                default: {
                                    maxTimeToFirstByteMs: 1e4,
                                    maxLoadTimeMs: 2e4,
                                    timeoutRetry: {
                                        maxNumRetry: 2,
                                        retryDelayMs: 0,
                                        maxRetryDelayMs: 0
                                    },
                                    errorRetry: {
                                        maxNumRetry: 2,
                                        retryDelayMs: 1e3,
                                        maxRetryDelayMs: 8e3
                                    }
                                }
                            },
                            fragLoadPolicy: {
                                default: {
                                    maxTimeToFirstByteMs: 1e4,
                                    maxLoadTimeMs: 12e4,
                                    timeoutRetry: {
                                        maxNumRetry: 4,
                                        retryDelayMs: 0,
                                        maxRetryDelayMs: 0
                                    },
                                    errorRetry: {
                                        maxNumRetry: 6,
                                        retryDelayMs: 1e3,
                                        maxRetryDelayMs: 8e3
                                    }
                                }
                            },
                            steeringManifestLoadPolicy: {
                                default: {
                                    maxTimeToFirstByteMs: 1e4,
                                    maxLoadTimeMs: 2e4,
                                    timeoutRetry: {
                                        maxNumRetry: 2,
                                        retryDelayMs: 0,
                                        maxRetryDelayMs: 0
                                    },
                                    errorRetry: {
                                        maxNumRetry: 1,
                                        retryDelayMs: 1e3,
                                        maxRetryDelayMs: 8e3
                                    }
                                }
                            },
                            manifestLoadingTimeOut: 1e4,
                            manifestLoadingMaxRetry: 1,
                            manifestLoadingRetryDelay: 1e3,
                            manifestLoadingMaxRetryTimeout: 64e3,
                            levelLoadingTimeOut: 1e4,
                            levelLoadingMaxRetry: 4,
                            levelLoadingRetryDelay: 1e3,
                            levelLoadingMaxRetryTimeout: 64e3,
                            fragLoadingTimeOut: 2e4,
                            fragLoadingMaxRetry: 6,
                            fragLoadingRetryDelay: 1e3,
                            fragLoadingMaxRetryTimeout: 64e3
                        }, El()), {}, {
                            subtitleStreamController: Ba,
                            subtitleTrackController: Va,
                            timelineController: Ws,
                            audioStreamController: Fa,
                            audioTrackController: Na,
                            emeController: eo,
                            cmcdController: rl,
                            contentSteeringController: il
                        });

                    function El() {
                        return {
                            cueHandler: Tl,
                            enableWebVTT: !0,
                            enableIMSC1: !0,
                            enableCEA708Captions: !0,
                            captionsTextTrack1Label: "English",
                            captionsTextTrack1LanguageCode: "en",
                            captionsTextTrack2Label: "Spanish",
                            captionsTextTrack2LanguageCode: "es",
                            captionsTextTrack3Label: "Unknown CC",
                            captionsTextTrack3LanguageCode: "",
                            captionsTextTrack4Label: "Unknown CC",
                            captionsTextTrack4LanguageCode: "",
                            renderTextTracksNatively: !0
                        }
                    }

                    function Sl(e, t) {
                        if ((t.liveSyncDurationCount || t.liveMaxLatencyDurationCount) && (t.liveSyncDuration || t.liveMaxLatencyDuration)) throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
                        if (void 0 !== t.liveMaxLatencyDurationCount && (void 0 === t.liveSyncDurationCount || t.liveMaxLatencyDurationCount <= t.liveSyncDurationCount)) throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
                        if (void 0 !== t.liveMaxLatencyDuration && (void 0 === t.liveSyncDuration || t.liveMaxLatencyDuration <= t.liveSyncDuration)) throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
                        var r = Al(e),
                            i = ["TimeOut", "MaxRetry", "RetryDelay", "MaxRetryTimeout"];
                        return ["manifest", "level", "frag"].forEach((function(e) {
                            var n = ("level" === e ? "playlist" : e) + "LoadPolicy",
                                a = void 0 === t[n],
                                s = [];
                            i.forEach((function(i) {
                                var o = e + "Loading" + i,
                                    l = t[o];
                                if (void 0 !== l && a) {
                                    s.push(o);
                                    var u = r[n].default;
                                    switch (t[n] = {
                                        default: u
                                    }, i) {
                                        case "TimeOut":
                                            u.maxLoadTimeMs = l, u.maxTimeToFirstByteMs = l;
                                            break;
                                        case "MaxRetry":
                                            u.errorRetry.maxNumRetry = l, u.timeoutRetry.maxNumRetry = l;
                                            break;
                                        case "RetryDelay":
                                            u.errorRetry.retryDelayMs = l, u.timeoutRetry.retryDelayMs = l;
                                            break;
                                        case "MaxRetryTimeout":
                                            u.errorRetry.maxRetryDelayMs = l, u.timeoutRetry.maxRetryDelayMs = l
                                    }
                                }
                            })), s.length && F.warn('hls.js config: "' + s.join('", "') + '" setting(s) are deprecated, use "' + n + '": ' + JSON.stringify(t[n]))
                        })), n(n({}, r), t)
                    }

                    function Al(e) {
                        return e && "object" == typeof e ? Array.isArray(e) ? e.map(Al) : Object.keys(e).reduce((function(t, r) {
                            return t[r] = Al(e[r]), t
                        }), {}) : e
                    }

                    function kl(e) {
                        var t = e.loader;
                        t !== dl && t !== ll ? (F.log("[config]: Custom loader detected, cannot enable progressive streaming"), e.progressive = !1) : ul() && (e.loader = dl, e.progressive = !0, e.enableSoftwareAES = !0, F.log("[config]: Progressive streaming enabled, using FetchLoader"))
                    }
                    var Ll = function(e) {
                        function t(t, r) {
                            var n;
                            return (n = e.call(this, t, "[level-controller]") || this)._levels = [], n._firstLevel = -1, n._maxAutoLevel = -1, n._startLevel = void 0, n.currentLevel = null, n.currentLevelIndex = -1, n.manualLevelIndex = -1, n.steering = void 0, n.onParsedComplete = void 0, n.steering = r, n._registerListeners(), n
                        }
                        c(t, e);
                        var r = t.prototype;
                        return r._registerListeners = function() {
                            var e = this.hls;
                            e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.MANIFEST_LOADED, this.onManifestLoaded, this), e.on(I.LEVEL_LOADED, this.onLevelLoaded, this), e.on(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.on(I.FRAG_BUFFERED, this.onFragBuffered, this), e.on(I.ERROR, this.onError, this)
                        }, r._unregisterListeners = function() {
                            var e = this.hls;
                            e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.MANIFEST_LOADED, this.onManifestLoaded, this), e.off(I.LEVEL_LOADED, this.onLevelLoaded, this), e.off(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.off(I.FRAG_BUFFERED, this.onFragBuffered, this), e.off(I.ERROR, this.onError, this)
                        }, r.destroy = function() {
                            this._unregisterListeners(), this.steering = null, this.resetLevels(), e.prototype.destroy.call(this)
                        }, r.stopLoad = function() {
                            this._levels.forEach((function(e) {
                                e.loadError = 0, e.fragmentError = 0
                            })), e.prototype.stopLoad.call(this)
                        }, r.resetLevels = function() {
                            this._startLevel = void 0, this.manualLevelIndex = -1, this.currentLevelIndex = -1, this.currentLevel = null, this._levels = [], this._maxAutoLevel = -1
                        }, r.onManifestLoading = function(e, t) {
                            this.resetLevels()
                        }, r.onManifestLoaded = function(e, t) {
                            var r = this.hls.config.preferManagedMediaSource,
                                n = [],
                                i = {},
                                a = {},
                                s = !1,
                                o = !1,
                                l = !1;
                            t.levels.forEach((function(e) {
                                var t, u, c = e.attrs,
                                    d = e.audioCodec,
                                    h = e.videoCodec; - 1 !== (null == (t = d) ? void 0 : t.indexOf("mp4a.40.34")) && (ml || (ml = /chrome|firefox/i.test(navigator.userAgent)), ml && (e.audioCodec = d = void 0)), d && (e.audioCodec = d = _t(d, r)), 0 === (null == (u = h) ? void 0 : u.indexOf("avc1")) && (h = e.videoCodec = Pt(h));
                                var f = e.width,
                                    g = e.height,
                                    p = e.unknownCodecs;
                                if (s || (s = !(!f || !g)), o || (o = !!h), l || (l = !!d), !(null != p && p.length || d && !kt(d, "audio", r) || h && !kt(h, "video", r))) {
                                    var m = c.CODECS,
                                        v = c["FRAME-RATE"],
                                        y = c["HDCP-LEVEL"],
                                        T = c["PATHWAY-ID"],
                                        b = c.RESOLUTION,
                                        E = c["VIDEO-RANGE"],
                                        S = (T || ".") + "-" + e.bitrate + "-" + b + "-" + v + "-" + m + "-" + E + "-" + y;
                                    if (i[S])
                                        if (i[S].uri === e.url || e.attrs["PATHWAY-ID"]) i[S].addGroupId("audio", c.AUDIO), i[S].addGroupId("text", c.SUBTITLES);
                                        else {
                                            var A = a[S] += 1;
                                            e.attrs["PATHWAY-ID"] = new Array(A + 1).join(".");
                                            var k = new Ar(e);
                                            i[S] = k, n.push(k)
                                        }
                                    else {
                                        var L = new Ar(e);
                                        i[S] = L, a[S] = 1, n.push(L)
                                    }
                                }
                            })), this.filterAndSortMediaOptions(n, t, s, o, l)
                        }, r.filterAndSortMediaOptions = function(e, t, r, n, i) {
                            var a = this,
                                s = [],
                                o = [],
                                l = e;
                            if ((r || n) && i && (l = l.filter((function(e) {
                                    var t = e.videoCodec,
                                        r = e.videoRange,
                                        n = e.width,
                                        i = e.height;
                                    return (!!t || !(!n || !i)) && Tr(r)
                                }))), 0 !== l.length) {
                                if (t.audioTracks) {
                                    var u = this.hls.config.preferManagedMediaSource;
                                    Rl(s = t.audioTracks.filter((function(e) {
                                        return !e.audioCodec || kt(e.audioCodec, "audio", u)
                                    })))
                                }
                                t.subtitles && Rl(o = t.subtitles);
                                var c = l.slice(0);
                                l.sort((function(e, t) {
                                    if (e.attrs["HDCP-LEVEL"] !== t.attrs["HDCP-LEVEL"]) return (e.attrs["HDCP-LEVEL"] || "") > (t.attrs["HDCP-LEVEL"] || "") ? 1 : -1;
                                    if (r && e.height !== t.height) return e.height - t.height;
                                    if (e.frameRate !== t.frameRate) return e.frameRate - t.frameRate;
                                    if (e.videoRange !== t.videoRange) return yr.indexOf(e.videoRange) - yr.indexOf(t.videoRange);
                                    if (e.videoCodec !== t.videoCodec) {
                                        var n = It(e.videoCodec),
                                            i = It(t.videoCodec);
                                        if (n !== i) return i - n
                                    }
                                    if (e.uri === t.uri && e.codecSet !== t.codecSet) {
                                        var a = wt(e.codecSet),
                                            s = wt(t.codecSet);
                                        if (a !== s) return s - a
                                    }
                                    return e.averageBitrate !== t.averageBitrate ? e.averageBitrate - t.averageBitrate : 0
                                }));
                                var d = c[0];
                                if (this.steering && (l = this.steering.filterParsedLevels(l)).length !== c.length)
                                    for (var h = 0; h < c.length; h++)
                                        if (c[h].pathwayId === l[0].pathwayId) {
                                            d = c[h];
                                            break
                                        }
                                this._levels = l;
                                for (var f = 0; f < l.length; f++)
                                    if (l[f] === d) {
                                        var g;
                                        this._firstLevel = f;
                                        var p = d.bitrate,
                                            m = this.hls.bandwidthEstimate;
                                        if (this.log("manifest loaded, " + l.length + " level(s) found, first bitrate: " + p), void 0 === (null == (g = this.hls.userConfig) ? void 0 : g.abrEwmaDefaultEstimate)) {
                                            var v = Math.min(p, this.hls.config.abrEwmaDefaultEstimateMax);
                                            v > m && m === bl.abrEwmaDefaultEstimate && (this.hls.bandwidthEstimate = v)
                                        }
                                        break
                                    }
                                var y = i && !n,
                                    T = {
                                        levels: l,
                                        audioTracks: s,
                                        subtitleTracks: o,
                                        sessionData: t.sessionData,
                                        sessionKeys: t.sessionKeys,
                                        firstLevel: this._firstLevel,
                                        stats: t.stats,
                                        audio: i,
                                        video: n,
                                        altAudio: !y && s.some((function(e) {
                                            return !!e.url
                                        }))
                                    };
                                this.hls.trigger(I.MANIFEST_PARSED, T), (this.hls.config.autoStartLoad || this.hls.forceStartLoad) && this.hls.startLoad(this.hls.config.startPosition)
                            } else Promise.resolve().then((function() {
                                if (a.hls) {
                                    t.levels.length && a.warn("One or more CODECS in variant not supported: " + JSON.stringify(t.levels[0].attrs));
                                    var e = new Error("no level with compatible codecs found in manifest");
                                    a.hls.trigger(I.ERROR, {
                                        type: w.MEDIA_ERROR,
                                        details: D.MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                                        fatal: !0,
                                        url: t.url,
                                        error: e,
                                        reason: e.message
                                    })
                                }
                            }))
                        }, r.onError = function(e, t) {
                            !t.fatal && t.context && t.context.type === Xt.LEVEL && t.context.level === this.level && this.checkRetry(t)
                        }, r.onFragBuffered = function(e, t) {
                            var r = t.frag;
                            if (void 0 !== r && r.type === $t.MAIN) {
                                var n = r.elementaryStreams;
                                if (!Object.keys(n).some((function(e) {
                                        return !!n[e]
                                    }))) return;
                                var i = this._levels[r.level];
                                null != i && i.loadError && (this.log("Resetting level error count of " + i.loadError + " on frag buffered"), i.loadError = 0)
                            }
                        }, r.onLevelLoaded = function(e, t) {
                            var r, n, i = t.level,
                                a = t.details,
                                s = this._levels[i];
                            if (!s) return this.warn("Invalid level index " + i), void(null != (n = t.deliveryDirectives) && n.skip && (a.deltaUpdateFailed = !0));
                            i === this.currentLevelIndex ? (0 === s.fragmentError && (s.loadError = 0), this.playlistLoaded(i, t, s.details)) : null != (r = t.deliveryDirectives) && r.skip && (a.deltaUpdateFailed = !0)
                        }, r.loadPlaylist = function(t) {
                            e.prototype.loadPlaylist.call(this);
                            var r = this.currentLevelIndex,
                                n = this.currentLevel;
                            if (n && this.shouldLoadPlaylist(n)) {
                                var i = n.uri;
                                if (t) try {
                                    i = t.addDirectives(i)
                                } catch (e) {
                                    this.warn("Could not construct new URL with HLS Delivery Directives: " + e)
                                }
                                var a = n.attrs["PATHWAY-ID"];
                                this.log("Loading level index " + r + (void 0 !== (null == t ? void 0 : t.msn) ? " at sn " + t.msn + " part " + t.part : "") + " with" + (a ? " Pathway " + a : "") + " " + i), this.clearTimer(), this.hls.trigger(I.LEVEL_LOADING, {
                                    url: i,
                                    level: r,
                                    pathwayId: n.attrs["PATHWAY-ID"],
                                    id: 0,
                                    deliveryDirectives: t || null
                                })
                            }
                        }, r.removeLevel = function(e) {
                            var t, r = this,
                                n = this._levels.filter((function(t, n) {
                                    return n !== e || (r.steering && r.steering.removeLevel(t), t === r.currentLevel && (r.currentLevel = null, r.currentLevelIndex = -1, t.details && t.details.fragments.forEach((function(e) {
                                        return e.level = -1
                                    }))), !1)
                                }));
                            Nr(n), this._levels = n, this.currentLevelIndex > -1 && null != (t = this.currentLevel) && t.details && (this.currentLevelIndex = this.currentLevel.details.fragments[0].level), this.hls.trigger(I.LEVELS_UPDATED, {
                                levels: n
                            })
                        }, r.onLevelsUpdated = function(e, t) {
                            var r = t.levels;
                            this._levels = r
                        }, r.checkMaxAutoUpdated = function() {
                            var e = this.hls,
                                t = e.autoLevelCapping,
                                r = e.maxAutoLevel,
                                n = e.maxHdcpLevel;
                            this._maxAutoLevel !== r && (this._maxAutoLevel = r, this.hls.trigger(I.MAX_AUTO_LEVEL_UPDATED, {
                                autoLevelCapping: t,
                                levels: this.levels,
                                maxAutoLevel: r,
                                minAutoLevel: this.hls.minAutoLevel,
                                maxHdcpLevel: n
                            }))
                        }, o(t, [{
                            key: "levels",
                            get: function() {
                                return 0 === this._levels.length ? null : this._levels
                            }
                        }, {
                            key: "level",
                            get: function() {
                                return this.currentLevelIndex
                            },
                            set: function(e) {
                                var t = this._levels;
                                if (0 !== t.length) {
                                    if (e < 0 || e >= t.length) {
                                        var r = new Error("invalid level idx"),
                                            n = e < 0;
                                        if (this.hls.trigger(I.ERROR, {
                                                type: w.OTHER_ERROR,
                                                details: D.LEVEL_SWITCH_ERROR,
                                                level: e,
                                                fatal: n,
                                                error: r,
                                                reason: r.message
                                            }), n) return;
                                        e = Math.min(e, t.length - 1)
                                    }
                                    var i = this.currentLevelIndex,
                                        a = this.currentLevel,
                                        s = a ? a.attrs["PATHWAY-ID"] : void 0,
                                        o = t[e],
                                        l = o.attrs["PATHWAY-ID"];
                                    if (this.currentLevelIndex = e, this.currentLevel = o, i !== e || !o.details || !a || s !== l) {
                                        this.log("Switching to level " + e + " (" + (o.height ? o.height + "p " : "") + (o.videoRange ? o.videoRange + " " : "") + (o.codecSet ? o.codecSet + " " : "") + "@" + o.bitrate + ")" + (l ? " with Pathway " + l : "") + " from level " + i + (s ? " with Pathway " + s : ""));
                                        var u = {
                                            level: e,
                                            attrs: o.attrs,
                                            details: o.details,
                                            bitrate: o.bitrate,
                                            averageBitrate: o.averageBitrate,
                                            maxBitrate: o.maxBitrate,
                                            realBitrate: o.realBitrate,
                                            width: o.width,
                                            height: o.height,
                                            codecSet: o.codecSet,
                                            audioCodec: o.audioCodec,
                                            videoCodec: o.videoCodec,
                                            audioGroups: o.audioGroups,
                                            subtitleGroups: o.subtitleGroups,
                                            loaded: o.loaded,
                                            loadError: o.loadError,
                                            fragmentError: o.fragmentError,
                                            name: o.name,
                                            id: o.id,
                                            uri: o.uri,
                                            url: o.url,
                                            urlId: 0,
                                            audioGroupIds: o.audioGroupIds,
                                            textGroupIds: o.textGroupIds
                                        };
                                        this.hls.trigger(I.LEVEL_SWITCHING, u);
                                        var c = o.details;
                                        if (!c || c.live) {
                                            var d = this.switchParams(o.uri, null == a ? void 0 : a.details);
                                            this.loadPlaylist(d)
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "manualLevel",
                            get: function() {
                                return this.manualLevelIndex
                            },
                            set: function(e) {
                                this.manualLevelIndex = e, void 0 === this._startLevel && (this._startLevel = e), -1 !== e && (this.level = e)
                            }
                        }, {
                            key: "firstLevel",
                            get: function() {
                                return this._firstLevel
                            },
                            set: function(e) {
                                this._firstLevel = e
                            }
                        }, {
                            key: "startLevel",
                            get: function() {
                                if (void 0 === this._startLevel) {
                                    var e = this.hls.config.startLevel;
                                    return void 0 !== e ? e : this.hls.firstAutoLevel
                                }
                                return this._startLevel
                            },
                            set: function(e) {
                                this._startLevel = e
                            }
                        }, {
                            key: "nextLoadLevel",
                            get: function() {
                                return -1 !== this.manualLevelIndex ? this.manualLevelIndex : this.hls.nextAutoLevel
                            },
                            set: function(e) {
                                this.level = e, -1 === this.manualLevelIndex && (this.hls.nextAutoLevel = e)
                            }
                        }]), t
                    }(Zr);

                    function Rl(e) {
                        var t = {};
                        e.forEach((function(e) {
                            var r = e.groupId || "";
                            e.id = t[r] = t[r] || 0, t[r]++
                        }))
                    }
                    var Il = function() {
                        function e(e) {
                            this.config = void 0, this.keyUriToKeyInfo = {}, this.emeController = null, this.config = e
                        }
                        var t = e.prototype;
                        return t.abort = function(e) {
                            for (var t in this.keyUriToKeyInfo) {
                                var r = this.keyUriToKeyInfo[t].loader;
                                if (r) {
                                    var n;
                                    if (e && e !== (null == (n = r.context) ? void 0 : n.frag.type)) return;
                                    r.abort()
                                }
                            }
                        }, t.detach = function() {
                            for (var e in this.keyUriToKeyInfo) {
                                var t = this.keyUriToKeyInfo[e];
                                (t.mediaKeySessionContext || t.decryptdata.isCommonEncryption) && delete this.keyUriToKeyInfo[e]
                            }
                        }, t.destroy = function() {
                            for (var e in this.detach(), this.keyUriToKeyInfo) {
                                var t = this.keyUriToKeyInfo[e].loader;
                                t && t.destroy()
                            }
                            this.keyUriToKeyInfo = {}
                        }, t.createKeyLoadError = function(e, t, r, n, i) {
                            return void 0 === t && (t = D.KEY_LOAD_ERROR), new Hn({
                                type: w.NETWORK_ERROR,
                                details: t,
                                fatal: !1,
                                frag: e,
                                response: i,
                                error: r,
                                networkDetails: n
                            })
                        }, t.loadClear = function(e, t) {
                            var r = this;
                            if (this.emeController && this.config.emeEnabled)
                                for (var n = e.sn, i = e.cc, a = function() {
                                        var e = t[s];
                                        if (i <= e.cc && ("initSegment" === n || "initSegment" === e.sn || n < e.sn)) return r.emeController.selectKeySystemFormat(e).then((function(t) {
                                            e.setKeyFormat(t)
                                        })), 1
                                    }, s = 0; s < t.length && !a(); s++);
                        }, t.load = function(e) {
                            var t = this;
                            return !e.decryptdata && e.encrypted && this.emeController ? this.emeController.selectKeySystemFormat(e).then((function(r) {
                                return t.loadInternal(e, r)
                            })) : this.loadInternal(e)
                        }, t.loadInternal = function(e, t) {
                            var r, n;
                            t && e.setKeyFormat(t);
                            var i = e.decryptdata;
                            if (!i) {
                                var a = new Error(t ? "Expected frag.decryptdata to be defined after setting format " + t : "Missing decryption data on fragment in onKeyLoading");
                                return Promise.reject(this.createKeyLoadError(e, D.KEY_LOAD_ERROR, a))
                            }
                            var s = i.uri;
                            if (!s) return Promise.reject(this.createKeyLoadError(e, D.KEY_LOAD_ERROR, new Error('Invalid key URI: "' + s + '"')));
                            var o, l = this.keyUriToKeyInfo[s];
                            if (null != (r = l) && r.decryptdata.key) return i.key = l.decryptdata.key, Promise.resolve({
                                frag: e,
                                keyInfo: l
                            });
                            if (null != (n = l) && n.keyLoadPromise) switch (null == (o = l.mediaKeySessionContext) ? void 0 : o.keyStatus) {
                                case void 0:
                                case "status-pending":
                                case "usable":
                                case "usable-in-future":
                                    return l.keyLoadPromise.then((function(t) {
                                        return i.key = t.keyInfo.decryptdata.key, {
                                            frag: e,
                                            keyInfo: l
                                        }
                                    }))
                            }
                            switch (l = this.keyUriToKeyInfo[s] = {
                                decryptdata: i,
                                keyLoadPromise: null,
                                loader: null,
                                mediaKeySessionContext: null
                            }, i.method) {
                                case "ISO-23001-7":
                                case "SAMPLE-AES":
                                case "SAMPLE-AES-CENC":
                                case "SAMPLE-AES-CTR":
                                    return "identity" === i.keyFormat ? this.loadKeyHTTP(l, e) : this.loadKeyEME(l, e);
                                case "AES-128":
                                    return this.loadKeyHTTP(l, e);
                                default:
                                    return Promise.reject(this.createKeyLoadError(e, D.KEY_LOAD_ERROR, new Error('Key supplied with unsupported METHOD: "' + i.method + '"')))
                            }
                        }, t.loadKeyEME = function(e, t) {
                            var r = {
                                frag: t,
                                keyInfo: e
                            };
                            if (this.emeController && this.config.emeEnabled) {
                                var n = this.emeController.loadKey(r);
                                if (n) return (e.keyLoadPromise = n.then((function(t) {
                                    return e.mediaKeySessionContext = t, r
                                }))).catch((function(t) {
                                    throw e.keyLoadPromise = null, t
                                }))
                            }
                            return Promise.resolve(r)
                        }, t.loadKeyHTTP = function(e, t) {
                            var r = this,
                                i = this.config,
                                a = new(0, i.loader)(i);
                            return t.keyLoader = e.loader = a, e.keyLoadPromise = new Promise((function(s, o) {
                                var l = {
                                        keyInfo: e,
                                        frag: t,
                                        responseType: "arraybuffer",
                                        url: e.decryptdata.uri
                                    },
                                    u = i.keyLoadPolicy.default,
                                    c = {
                                        loadPolicy: u,
                                        timeout: u.maxLoadTimeMs,
                                        maxRetry: 0,
                                        retryDelay: 0,
                                        maxRetryDelay: 0
                                    },
                                    d = {
                                        onSuccess: function(e, t, n, i) {
                                            var a = n.frag,
                                                l = n.keyInfo,
                                                u = n.url;
                                            if (!a.decryptdata || l !== r.keyUriToKeyInfo[u]) return o(r.createKeyLoadError(a, D.KEY_LOAD_ERROR, new Error("after key load, decryptdata unset or changed"), i));
                                            l.decryptdata.key = a.decryptdata.key = new Uint8Array(e.data), a.keyLoader = null, l.loader = null, s({
                                                frag: a,
                                                keyInfo: l
                                            })
                                        },
                                        onError: function(e, i, a, s) {
                                            r.resetLoader(i), o(r.createKeyLoadError(t, D.KEY_LOAD_ERROR, new Error("HTTP Error " + e.code + " loading key " + e.text), a, n({
                                                url: l.url,
                                                data: void 0
                                            }, e)))
                                        },
                                        onTimeout: function(e, n, i) {
                                            r.resetLoader(n), o(r.createKeyLoadError(t, D.KEY_LOAD_TIMEOUT, new Error("key loading timed out"), i))
                                        },
                                        onAbort: function(e, n, i) {
                                            r.resetLoader(n), o(r.createKeyLoadError(t, D.INTERNAL_ABORTED, new Error("key loading aborted"), i))
                                        }
                                    };
                                a.load(l, c, d)
                            }))
                        }, t.resetLoader = function(e) {
                            var t = e.frag,
                                r = e.keyInfo,
                                n = e.url,
                                i = r.loader;
                            t.keyLoader === i && (t.keyLoader = null, r.loader = null), delete this.keyUriToKeyInfo[n], i && i.destroy()
                        }, e
                    }();

                    function wl() {
                        return self.SourceBuffer || self.WebKitSourceBuffer
                    }

                    function Dl() {
                        if (!Et()) return !1;
                        var e = wl();
                        return !e || e.prototype && "function" == typeof e.prototype.appendBuffer && "function" == typeof e.prototype.remove
                    }

                    function Cl() {
                        if (!Dl()) return !1;
                        var e = Et();
                        return "function" == typeof(null == e ? void 0 : e.isTypeSupported) && (["avc1.42E01E,mp4a.40.2", "av01.0.01M.08", "vp09.00.50.08"].some((function(t) {
                            return e.isTypeSupported(Rt(t, "video"))
                        })) || ["mp4a.40.2", "fLaC"].some((function(t) {
                            return e.isTypeSupported(Rt(t, "audio"))
                        })))
                    }

                    function xl() {
                        var e, t = wl();
                        return "function" == typeof(null == t || null == (e = t.prototype) ? void 0 : e.changeType)
                    }
                    var _l = 250,
                        Ol = 2,
                        Pl = .1,
                        Ml = .05,
                        Fl = function() {
                            function e(e, t, r, n) {
                                this.config = void 0, this.media = null, this.fragmentTracker = void 0, this.hls = void 0, this.nudgeRetry = 0, this.stallReported = !1, this.stalled = null, this.moved = !1, this.seeking = !1, this.config = e, this.media = t, this.fragmentTracker = r, this.hls = n
                            }
                            var t = e.prototype;
                            return t.destroy = function() {
                                this.media = null, this.hls = this.fragmentTracker = null
                            }, t.poll = function(e, t) {
                                var r = this.config,
                                    n = this.media,
                                    i = this.stalled;
                                if (null !== n) {
                                    var a = n.currentTime,
                                        s = n.seeking,
                                        o = this.seeking && !s,
                                        l = !this.seeking && s;
                                    if (this.seeking = s, a === e)
                                        if (l || o) this.stalled = null;
                                        else if (n.paused && !s || n.ended || 0 === n.playbackRate || !In.getBuffered(n).length) this.nudgeRetry = 0;
                                    else {
                                        var u = In.bufferInfo(n, a, 0),
                                            c = u.nextStart || 0;
                                        if (s) {
                                            var d = u.len > Ol,
                                                h = !c || t && t.start <= a || c - a > Ol && !this.fragmentTracker.getPartialFragment(a);
                                            if (d || h) return;
                                            this.moved = !1
                                        }
                                        if (!this.moved && null !== this.stalled) {
                                            var f;
                                            if (!(u.len > 0 || c)) return;
                                            var g = Math.max(c, u.start || 0) - a,
                                                p = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null,
                                                m = (null == p || null == (f = p.details) ? void 0 : f.live) ? 2 * p.details.targetduration : Ol,
                                                v = this.fragmentTracker.getPartialFragment(a);
                                            if (g > 0 && (g <= m || v)) return void(n.paused || this._trySkipBufferHole(v))
                                        }
                                        var y = self.performance.now();
                                        if (null !== i) {
                                            var T = y - i;
                                            if (s || !(T >= _l) || (this._reportStall(u), this.media)) {
                                                var b = In.bufferInfo(n, a, r.maxBufferHole);
                                                this._tryFixBufferStall(b, T)
                                            }
                                        } else this.stalled = y
                                    } else if (this.moved = !0, s || (this.nudgeRetry = 0), null !== i) {
                                        if (this.stallReported) {
                                            var E = self.performance.now() - i;
                                            F.warn("playback not stuck anymore @" + a + ", after " + Math.round(E) + "ms"), this.stallReported = !1
                                        }
                                        this.stalled = null
                                    }
                                }
                            }, t._tryFixBufferStall = function(e, t) {
                                var r = this.config,
                                    n = this.fragmentTracker,
                                    i = this.media;
                                if (null !== i) {
                                    var a = i.currentTime,
                                        s = n.getPartialFragment(a);
                                    if (s && (this._trySkipBufferHole(s) || !this.media)) return;
                                    (e.len > r.maxBufferHole || e.nextStart && e.nextStart - a < r.maxBufferHole) && t > 1e3 * r.highBufferWatchdogPeriod && (F.warn("Trying to nudge playhead over buffer-hole"), this.stalled = null, this._tryNudgeBuffer())
                                }
                            }, t._reportStall = function(e) {
                                var t = this.hls,
                                    r = this.media;
                                if (!this.stallReported && r) {
                                    this.stallReported = !0;
                                    var n = new Error("Playback stalling at @" + r.currentTime + " due to low buffer (" + JSON.stringify(e) + ")");
                                    F.warn(n.message), t.trigger(I.ERROR, {
                                        type: w.MEDIA_ERROR,
                                        details: D.BUFFER_STALLED_ERROR,
                                        fatal: !1,
                                        error: n,
                                        buffer: e.len
                                    })
                                }
                            }, t._trySkipBufferHole = function(e) {
                                var t = this.config,
                                    r = this.hls,
                                    n = this.media;
                                if (null === n) return 0;
                                var i = n.currentTime,
                                    a = In.bufferInfo(n, i, 0),
                                    s = i < a.start ? a.start : a.nextStart;
                                if (s) {
                                    var o = a.len <= t.maxBufferHole,
                                        l = a.len > 0 && a.len < 1 && n.readyState < 3,
                                        u = s - i;
                                    if (u > 0 && (o || l)) {
                                        if (u > t.maxBufferHole) {
                                            var c = this.fragmentTracker,
                                                d = !1;
                                            if (0 === i) {
                                                var h = c.getAppendedFrag(0, $t.MAIN);
                                                h && s < h.end && (d = !0)
                                            }
                                            if (!d) {
                                                var f = e || c.getAppendedFrag(i, $t.MAIN);
                                                if (f) {
                                                    for (var g = !1, p = f.end; p < s;) {
                                                        var m = c.getPartialFragment(p);
                                                        if (!m) {
                                                            g = !0;
                                                            break
                                                        }
                                                        p += m.duration
                                                    }
                                                    if (g) return 0
                                                }
                                            }
                                        }
                                        var v = Math.max(s + Ml, i + Pl);
                                        if (F.warn("skipping hole, adjusting currentTime from " + i + " to " + v), this.moved = !0, this.stalled = null, n.currentTime = v, e && !e.gap) {
                                            var y = new Error("fragment loaded with buffer holes, seeking from " + i + " to " + v);
                                            r.trigger(I.ERROR, {
                                                type: w.MEDIA_ERROR,
                                                details: D.BUFFER_SEEK_OVER_HOLE,
                                                fatal: !1,
                                                error: y,
                                                reason: y.message,
                                                frag: e
                                            })
                                        }
                                        return v
                                    }
                                }
                                return 0
                            }, t._tryNudgeBuffer = function() {
                                var e = this.config,
                                    t = this.hls,
                                    r = this.media,
                                    n = this.nudgeRetry;
                                if (null !== r) {
                                    var i = r.currentTime;
                                    if (this.nudgeRetry++, n < e.nudgeMaxRetry) {
                                        var a = i + (n + 1) * e.nudgeOffset,
                                            s = new Error("Nudging 'currentTime' from " + i + " to " + a);
                                        F.warn(s.message), r.currentTime = a, t.trigger(I.ERROR, {
                                            type: w.MEDIA_ERROR,
                                            details: D.BUFFER_NUDGE_ON_STALL,
                                            error: s,
                                            fatal: !1
                                        })
                                    } else {
                                        var o = new Error("Playhead still not moving while enough data buffered @" + i + " after " + e.nudgeMaxRetry + " nudges");
                                        F.error(o.message), t.trigger(I.ERROR, {
                                            type: w.MEDIA_ERROR,
                                            details: D.BUFFER_STALLED_ERROR,
                                            error: o,
                                            fatal: !0
                                        })
                                    }
                                }
                            }, e
                        }(),
                        Nl = 100,
                        Ul = function(e) {
                            function t(t, r, n) {
                                var i;
                                return (i = e.call(this, t, r, n, "[stream-controller]", $t.MAIN) || this).audioCodecSwap = !1, i.gapController = null, i.level = -1, i._forceStartLoad = !1, i.altAudio = !1, i.audioOnly = !1, i.fragPlaying = null, i.onvplaying = null, i.onvseeked = null, i.fragLastKbps = 0, i.couldBacktrack = !1, i.backtrackFragment = null, i.audioCodecSwitch = !1, i.videoBuffer = null, i._registerListeners(), i
                            }
                            c(t, e);
                            var r = t.prototype;
                            return r._registerListeners = function() {
                                var e = this.hls;
                                e.on(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.on(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.on(I.MANIFEST_LOADING, this.onManifestLoading, this), e.on(I.MANIFEST_PARSED, this.onManifestParsed, this), e.on(I.LEVEL_LOADING, this.onLevelLoading, this), e.on(I.LEVEL_LOADED, this.onLevelLoaded, this), e.on(I.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), e.on(I.ERROR, this.onError, this), e.on(I.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), e.on(I.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), e.on(I.BUFFER_CREATED, this.onBufferCreated, this), e.on(I.BUFFER_FLUSHED, this.onBufferFlushed, this), e.on(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.on(I.FRAG_BUFFERED, this.onFragBuffered, this)
                            }, r._unregisterListeners = function() {
                                var e = this.hls;
                                e.off(I.MEDIA_ATTACHED, this.onMediaAttached, this), e.off(I.MEDIA_DETACHING, this.onMediaDetaching, this), e.off(I.MANIFEST_LOADING, this.onManifestLoading, this), e.off(I.MANIFEST_PARSED, this.onManifestParsed, this), e.off(I.LEVEL_LOADED, this.onLevelLoaded, this), e.off(I.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), e.off(I.ERROR, this.onError, this), e.off(I.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), e.off(I.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), e.off(I.BUFFER_CREATED, this.onBufferCreated, this), e.off(I.BUFFER_FLUSHED, this.onBufferFlushed, this), e.off(I.LEVELS_UPDATED, this.onLevelsUpdated, this), e.off(I.FRAG_BUFFERED, this.onFragBuffered, this)
                            }, r.onHandlerDestroying = function() {
                                this._unregisterListeners(), e.prototype.onHandlerDestroying.call(this)
                            }, r.startLoad = function(e) {
                                if (this.levels) {
                                    var t = this.lastCurrentTime,
                                        r = this.hls;
                                    if (this.stopLoad(), this.setInterval(Nl), this.level = -1, !this.startFragRequested) {
                                        var n = r.startLevel; - 1 === n && (r.config.testBandwidth && this.levels.length > 1 ? (n = 0, this.bitrateTest = !0) : n = r.firstAutoLevel), r.nextLoadLevel = n, this.level = r.loadLevel, this.loadedmetadata = !1
                                    }
                                    t > 0 && -1 === e && (this.log("Override startPosition with lastCurrentTime @" + t.toFixed(3)), e = t), this.state = $n.IDLE, this.nextLoadPosition = this.startPosition = this.lastCurrentTime = e, this.tick()
                                } else this._forceStartLoad = !0, this.state = $n.STOPPED
                            }, r.stopLoad = function() {
                                this._forceStartLoad = !1, e.prototype.stopLoad.call(this)
                            }, r.doTick = function() {
                                switch (this.state) {
                                    case $n.WAITING_LEVEL:
                                        var e = this.levels,
                                            t = this.level,
                                            r = null == e ? void 0 : e[t],
                                            n = null == r ? void 0 : r.details;
                                        if (n && (!n.live || this.levelLastLoaded === r)) {
                                            if (this.waitForCdnTuneIn(n)) break;
                                            this.state = $n.IDLE;
                                            break
                                        }
                                        if (this.hls.nextLoadLevel !== this.level) {
                                            this.state = $n.IDLE;
                                            break
                                        }
                                        break;
                                    case $n.FRAG_LOADING_WAITING_RETRY:
                                        var i, a = self.performance.now(),
                                            s = this.retryDate;
                                        if (!s || a >= s || null != (i = this.media) && i.seeking) {
                                            var o = this.levels,
                                                l = this.level,
                                                u = null == o ? void 0 : o[l];
                                            this.resetStartWhenNotLoaded(u || null), this.state = $n.IDLE
                                        }
                                }
                                this.state === $n.IDLE && this.doTickIdle(), this.onTickEnd()
                            }, r.onTickEnd = function() {
                                e.prototype.onTickEnd.call(this), this.checkBuffer(), this.checkFragmentChanged()
                            }, r.doTickIdle = function() {
                                var e = this.hls,
                                    t = this.levelLastLoaded,
                                    r = this.levels,
                                    n = this.media,
                                    i = e.config,
                                    a = e.nextLoadLevel;
                                if (null !== t && (n || !this.startFragRequested && i.startFragPrefetch) && (!this.altAudio || !this.audioOnly) && null != r && r[a]) {
                                    var s = r[a],
                                        o = this.getMainFwdBufferInfo();
                                    if (null !== o) {
                                        var l = this.getLevelDetails();
                                        if (l && this._streamEnded(o, l)) {
                                            var u = {};
                                            return this.altAudio && (u.type = "video"), this.hls.trigger(I.BUFFER_EOS, u), void(this.state = $n.ENDED)
                                        }
                                        e.loadLevel !== a && -1 === e.manualLevel && this.log("Adapting to level " + a + " from level " + this.level), this.level = e.nextLoadLevel = a;
                                        var c = s.details;
                                        if (!c || this.state === $n.WAITING_LEVEL || c.live && this.levelLastLoaded !== s) return this.level = a, void(this.state = $n.WAITING_LEVEL);
                                        var d = o.len,
                                            h = this.getMaxBufferLength(s.maxBitrate);
                                        if (!(d >= h)) {
                                            this.backtrackFragment && this.backtrackFragment.start > o.end && (this.backtrackFragment = null);
                                            var f = this.backtrackFragment ? this.backtrackFragment.start : o.end,
                                                g = this.getNextFragment(f, c);
                                            if (this.couldBacktrack && !this.fragPrevious && g && "initSegment" !== g.sn && this.fragmentTracker.getState(g) !== Sn.OK) {
                                                var p, m = (null != (p = this.backtrackFragment) ? p : g).sn - c.startSN,
                                                    v = c.fragments[m - 1];
                                                v && g.cc === v.cc && (g = v, this.fragmentTracker.removeFragment(v))
                                            } else this.backtrackFragment && o.len && (this.backtrackFragment = null);
                                            if (g && this.isLoopLoading(g, f)) {
                                                if (!g.gap) {
                                                    var y = this.audioOnly && !this.altAudio ? j.AUDIO : j.VIDEO,
                                                        T = (y === j.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
                                                    T && this.afterBufferFlushed(T, y, $t.MAIN)
                                                }
                                                g = this.getNextFragmentLoopLoading(g, c, o, $t.MAIN, h)
                                            }
                                            g && (!g.initSegment || g.initSegment.data || this.bitrateTest || (g = g.initSegment), this.loadFragment(g, s, f))
                                        }
                                    }
                                }
                            }, r.loadFragment = function(t, r, n) {
                                var i = this.fragmentTracker.getState(t);
                                this.fragCurrent = t, i === Sn.NOT_LOADED || i === Sn.PARTIAL ? "initSegment" === t.sn ? this._loadInitSegment(t, r) : this.bitrateTest ? (this.log("Fragment " + t.sn + " of level " + t.level + " is being downloaded to test bitrate and will not be buffered"), this._loadBitrateTestFrag(t, r)) : (this.startFragRequested = !0, e.prototype.loadFragment.call(this, t, r, n)) : this.clearTrackerIfNeeded(t)
                            }, r.getBufferedFrag = function(e) {
                                return this.fragmentTracker.getBufferedFrag(e, $t.MAIN)
                            }, r.followingBufferedFrag = function(e) {
                                return e ? this.getBufferedFrag(e.end + .5) : null
                            }, r.immediateLevelSwitch = function() {
                                this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY)
                            }, r.nextLevelSwitch = function() {
                                var e = this.levels,
                                    t = this.media;
                                if (null != t && t.readyState) {
                                    var r, n = this.getAppendedFrag(t.currentTime);
                                    n && n.start > 1 && this.flushMainBuffer(0, n.start - 1);
                                    var i = this.getLevelDetails();
                                    if (null != i && i.live) {
                                        var a = this.getMainFwdBufferInfo();
                                        if (!a || a.len < 2 * i.targetduration) return
                                    }
                                    if (!t.paused && e) {
                                        var s = e[this.hls.nextLoadLevel],
                                            o = this.fragLastKbps;
                                        r = o && this.fragCurrent ? this.fragCurrent.duration * s.maxBitrate / (1e3 * o) + 1 : 0
                                    } else r = 0;
                                    var l = this.getBufferedFrag(t.currentTime + r);
                                    if (l) {
                                        var u = this.followingBufferedFrag(l);
                                        if (u) {
                                            this.abortCurrentFrag();
                                            var c = u.maxStartPTS ? u.maxStartPTS : u.start,
                                                d = u.duration,
                                                h = Math.max(l.end, c + Math.min(Math.max(d - this.config.maxFragLookUpTolerance, d * (this.couldBacktrack ? .5 : .125)), d * (this.couldBacktrack ? .75 : .25)));
                                            this.flushMainBuffer(h, Number.POSITIVE_INFINITY)
                                        }
                                    }
                                }
                            }, r.abortCurrentFrag = function() {
                                var e = this.fragCurrent;
                                switch (this.fragCurrent = null, this.backtrackFragment = null, e && (e.abortRequests(), this.fragmentTracker.removeFragment(e)), this.state) {
                                    case $n.KEY_LOADING:
                                    case $n.FRAG_LOADING:
                                    case $n.FRAG_LOADING_WAITING_RETRY:
                                    case $n.PARSING:
                                    case $n.PARSED:
                                        this.state = $n.IDLE
                                }
                                this.nextLoadPosition = this.getLoadPosition()
                            }, r.flushMainBuffer = function(t, r) {
                                e.prototype.flushMainBuffer.call(this, t, r, this.altAudio ? "video" : null)
                            }, r.onMediaAttached = function(t, r) {
                                e.prototype.onMediaAttached.call(this, t, r);
                                var n = r.media;
                                this.onvplaying = this.onMediaPlaying.bind(this), this.onvseeked = this.onMediaSeeked.bind(this), n.addEventListener("playing", this.onvplaying), n.addEventListener("seeked", this.onvseeked), this.gapController = new Fl(this.config, n, this.fragmentTracker, this.hls)
                            }, r.onMediaDetaching = function() {
                                var t = this.media;
                                t && this.onvplaying && this.onvseeked && (t.removeEventListener("playing", this.onvplaying), t.removeEventListener("seeked", this.onvseeked), this.onvplaying = this.onvseeked = null, this.videoBuffer = null), this.fragPlaying = null, this.gapController && (this.gapController.destroy(), this.gapController = null), e.prototype.onMediaDetaching.call(this)
                            }, r.onMediaPlaying = function() {
                                this.tick()
                            }, r.onMediaSeeked = function() {
                                var e = this.media,
                                    t = e ? e.currentTime : null;
                                k(t) && this.log("Media seeked to " + t.toFixed(3));
                                var r = this.getMainFwdBufferInfo();
                                null !== r && 0 !== r.len ? this.tick() : this.warn('Main forward buffer length on "seeked" event ' + (r ? r.len : "empty") + ")")
                            }, r.onManifestLoading = function() {
                                this.log("Trigger BUFFER_RESET"), this.hls.trigger(I.BUFFER_RESET, void 0), this.fragmentTracker.removeAllFragments(), this.couldBacktrack = !1, this.startPosition = this.lastCurrentTime = this.fragLastKbps = 0, this.levels = this.fragPlaying = this.backtrackFragment = this.levelLastLoaded = null, this.altAudio = this.audioOnly = this.startFragRequested = !1
                            }, r.onManifestParsed = function(e, t) {
                                var r = !1,
                                    n = !1;
                                t.levels.forEach((function(e) {
                                    var t = e.audioCodec;
                                    t && (r = r || -1 !== t.indexOf("mp4a.40.2"), n = n || -1 !== t.indexOf("mp4a.40.5"))
                                })), this.audioCodecSwitch = r && n && !xl(), this.audioCodecSwitch && this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"), this.levels = t.levels, this.startFragRequested = !1
                            }, r.onLevelLoading = function(e, t) {
                                var r = this.levels;
                                if (r && this.state === $n.IDLE) {
                                    var n = r[t.level];
                                    (!n.details || n.details.live && this.levelLastLoaded !== n || this.waitForCdnTuneIn(n.details)) && (this.state = $n.WAITING_LEVEL)
                                }
                            }, r.onLevelLoaded = function(e, t) {
                                var r, n = this.levels,
                                    i = t.level,
                                    a = t.details,
                                    s = a.totalduration;
                                if (n) {
                                    this.log("Level " + i + " loaded [" + a.startSN + "," + a.endSN + "]" + (a.lastPartSn ? "[part-" + a.lastPartSn + "-" + a.lastPartIndex + "]" : "") + ", cc [" + a.startCC + ", " + a.endCC + "] duration:" + s);
                                    var o = n[i],
                                        l = this.fragCurrent;
                                    !l || this.state !== $n.FRAG_LOADING && this.state !== $n.FRAG_LOADING_WAITING_RETRY || l.level !== t.level && l.loader && this.abortCurrentFrag();
                                    var u = 0;
                                    if (a.live || null != (r = o.details) && r.live) {
                                        var c;
                                        if (this.checkLiveUpdate(a), a.deltaUpdateFailed) return;
                                        u = this.alignPlaylists(a, o.details, null == (c = this.levelLastLoaded) ? void 0 : c.details)
                                    }
                                    if (o.details = a, this.levelLastLoaded = o, this.hls.trigger(I.LEVEL_UPDATED, {
                                            details: a,
                                            level: i
                                        }), this.state === $n.WAITING_LEVEL) {
                                        if (this.waitForCdnTuneIn(a)) return;
                                        this.state = $n.IDLE
                                    }
                                    this.startFragRequested ? a.live && this.synchronizeToLiveEdge(a) : this.setStartPosition(a, u), this.tick()
                                } else this.warn("Levels were reset while loading level " + i)
                            }, r._handleFragmentLoadProgress = function(e) {
                                var t, r = e.frag,
                                    n = e.part,
                                    i = e.payload,
                                    a = this.levels;
                                if (a) {
                                    var s = a[r.level],
                                        o = s.details;
                                    if (!o) return this.warn("Dropping fragment " + r.sn + " of level " + r.level + " after level details were reset"), void this.fragmentTracker.removeFragment(r);
                                    var l = s.videoCodec,
                                        u = o.PTSKnown || !o.live,
                                        c = null == (t = r.initSegment) ? void 0 : t.data,
                                        d = this._getAudioCodec(s),
                                        h = this.transmuxer = this.transmuxer || new xa(this.hls, $t.MAIN, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)),
                                        f = n ? n.index : -1,
                                        g = -1 !== f,
                                        p = new wn(r.level, r.sn, r.stats.chunkCount, i.byteLength, f, g),
                                        m = this.initPTS[r.cc];
                                    h.push(i, c, d, l, r, n, o.totalduration, u, p, m)
                                } else this.warn("Levels were reset while fragment load was in progress. Fragment " + r.sn + " of level " + r.level + " will not be buffered")
                            }, r.onAudioTrackSwitching = function(e, t) {
                                var r = this.altAudio;
                                if (!t.url) {
                                    if (this.mediaBuffer !== this.media) {
                                        this.log("Switching on main audio, use media.buffered to schedule main fragment loading"), this.mediaBuffer = this.media;
                                        var n = this.fragCurrent;
                                        n && (this.log("Switching to main audio track, cancel main fragment load"), n.abortRequests(), this.fragmentTracker.removeFragment(n)), this.resetTransmuxer(), this.resetLoadingState()
                                    } else this.audioOnly && this.resetTransmuxer();
                                    var i = this.hls;
                                    r && (i.trigger(I.BUFFER_FLUSHING, {
                                        startOffset: 0,
                                        endOffset: Number.POSITIVE_INFINITY,
                                        type: null
                                    }), this.fragmentTracker.removeAllFragments()), i.trigger(I.AUDIO_TRACK_SWITCHED, t)
                                }
                            }, r.onAudioTrackSwitched = function(e, t) {
                                var r = t.id,
                                    n = !!this.hls.audioTracks[r].url;
                                if (n) {
                                    var i = this.videoBuffer;
                                    i && this.mediaBuffer !== i && (this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading"), this.mediaBuffer = i)
                                }
                                this.altAudio = n, this.tick()
                            }, r.onBufferCreated = function(e, t) {
                                var r, n, i = t.tracks,
                                    a = !1;
                                for (var s in i) {
                                    var o = i[s];
                                    if ("main" === o.id) {
                                        if (n = s, r = o, "video" === s) {
                                            var l = i[s];
                                            l && (this.videoBuffer = l.buffer)
                                        }
                                    } else a = !0
                                }
                                a && r ? (this.log("Alternate track found, use " + n + ".buffered to schedule main fragment loading"), this.mediaBuffer = r.buffer) : this.mediaBuffer = this.media
                            }, r.onFragBuffered = function(e, t) {
                                var r = t.frag,
                                    n = t.part;
                                if (!r || r.type === $t.MAIN) {
                                    if (this.fragContextChanged(r)) return this.warn("Fragment " + r.sn + (n ? " p: " + n.index : "") + " of level " + r.level + " finished buffering, but was aborted. state: " + this.state), void(this.state === $n.PARSED && (this.state = $n.IDLE));
                                    var i = n ? n.stats : r.stats;
                                    this.fragLastKbps = Math.round(8 * i.total / (i.buffering.end - i.loading.first)), "initSegment" !== r.sn && (this.fragPrevious = r), this.fragBufferedComplete(r, n)
                                }
                            }, r.onError = function(e, t) {
                                var r;
                                if (t.fatal) this.state = $n.ERROR;
                                else switch (t.details) {
                                    case D.FRAG_GAP:
                                    case D.FRAG_PARSING_ERROR:
                                    case D.FRAG_DECRYPT_ERROR:
                                    case D.FRAG_LOAD_ERROR:
                                    case D.FRAG_LOAD_TIMEOUT:
                                    case D.KEY_LOAD_ERROR:
                                    case D.KEY_LOAD_TIMEOUT:
                                        this.onFragmentOrKeyLoadError($t.MAIN, t);
                                        break;
                                    case D.LEVEL_LOAD_ERROR:
                                    case D.LEVEL_LOAD_TIMEOUT:
                                    case D.LEVEL_PARSING_ERROR:
                                        t.levelRetry || this.state !== $n.WAITING_LEVEL || (null == (r = t.context) ? void 0 : r.type) !== Xt.LEVEL || (this.state = $n.IDLE);
                                        break;
                                    case D.BUFFER_APPEND_ERROR:
                                    case D.BUFFER_FULL_ERROR:
                                        if (!t.parent || "main" !== t.parent) return;
                                        if (t.details === D.BUFFER_APPEND_ERROR) return void this.resetLoadingState();
                                        this.reduceLengthAndFlushBuffer(t) && this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                                        break;
                                    case D.INTERNAL_EXCEPTION:
                                        this.recoverWorkerError(t)
                                }
                            }, r.checkBuffer = function() {
                                var e = this.media,
                                    t = this.gapController;
                                if (e && t && e.readyState) {
                                    if (this.loadedmetadata || !In.getBuffered(e).length) {
                                        var r = this.state !== $n.IDLE ? this.fragCurrent : null;
                                        t.poll(this.lastCurrentTime, r)
                                    }
                                    this.lastCurrentTime = e.currentTime
                                }
                            }, r.onFragLoadEmergencyAborted = function() {
                                this.state = $n.IDLE, this.loadedmetadata || (this.startFragRequested = !1, this.nextLoadPosition = this.startPosition), this.tickImmediate()
                            }, r.onBufferFlushed = function(e, t) {
                                var r = t.type;
                                if (r !== j.AUDIO || this.audioOnly && !this.altAudio) {
                                    var n = (r === j.VIDEO ? this.videoBuffer : this.mediaBuffer) || this.media;
                                    this.afterBufferFlushed(n, r, $t.MAIN), this.tick()
                                }
                            }, r.onLevelsUpdated = function(e, t) {
                                this.level > -1 && this.fragCurrent && (this.level = this.fragCurrent.level), this.levels = t.levels
                            }, r.swapAudioCodec = function() {
                                this.audioCodecSwap = !this.audioCodecSwap
                            }, r.seekToStartPos = function() {
                                var e = this.media;
                                if (e) {
                                    var t = e.currentTime,
                                        r = this.startPosition;
                                    if (r >= 0 && t < r) {
                                        if (e.seeking) return void this.log("could not seek to " + r + ", already seeking at " + t);
                                        var n = In.getBuffered(e),
                                            i = (n.length ? n.start(0) : 0) - r;
                                        i > 0 && (i < this.config.maxBufferHole || i < this.config.maxFragLookUpTolerance) && (this.log("adjusting start position by " + i + " to match buffer start"), r += i, this.startPosition = r), this.log("seek to target start position " + r + " from current time " + t), e.currentTime = r
                                    }
                                }
                            }, r._getAudioCodec = function(e) {
                                var t = this.config.defaultAudioCodec || e.audioCodec;
                                return this.audioCodecSwap && t && (this.log("Swapping audio codec"), t = -1 !== t.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), t
                            }, r._loadBitrateTestFrag = function(e, t) {
                                var r = this;
                                e.bitrateTest = !0, this._doFragLoad(e, t).then((function(n) {
                                    var i = r.hls;
                                    if (n && !r.fragContextChanged(e)) {
                                        t.fragmentError = 0, r.state = $n.IDLE, r.startFragRequested = !1, r.bitrateTest = !1;
                                        var a = e.stats;
                                        a.parsing.start = a.parsing.end = a.buffering.start = a.buffering.end = self.performance.now(), i.trigger(I.FRAG_LOADED, n), e.bitrateTest = !1
                                    }
                                }))
                            }, r._handleTransmuxComplete = function(e) {
                                var t, r = "main",
                                    n = this.hls,
                                    i = e.remuxResult,
                                    a = e.chunkMeta,
                                    s = this.getCurrentContext(a);
                                if (s) {
                                    var o = s.frag,
                                        l = s.part,
                                        u = s.level,
                                        c = i.video,
                                        d = i.text,
                                        h = i.id3,
                                        f = i.initSegment,
                                        g = u.details,
                                        p = this.altAudio ? void 0 : i.audio;
                                    if (this.fragContextChanged(o)) this.fragmentTracker.removeFragment(o);
                                    else {
                                        if (this.state = $n.PARSING, f) {
                                            if (null != f && f.tracks) {
                                                var m = o.initSegment || o;
                                                this._bufferInitSegment(u, f.tracks, m, a), n.trigger(I.FRAG_PARSING_INIT_SEGMENT, {
                                                    frag: m,
                                                    id: r,
                                                    tracks: f.tracks
                                                })
                                            }
                                            var v = f.initPTS,
                                                y = f.timescale;
                                            k(v) && (this.initPTS[o.cc] = {
                                                baseTime: v,
                                                timescale: y
                                            }, n.trigger(I.INIT_PTS_FOUND, {
                                                frag: o,
                                                id: r,
                                                initPTS: v,
                                                timescale: y
                                            }))
                                        }
                                        if (c && g && "initSegment" !== o.sn) {
                                            var T = g.fragments[o.sn - 1 - g.startSN],
                                                b = o.sn === g.startSN,
                                                E = !T || o.cc > T.cc;
                                            if (!1 !== i.independent) {
                                                var S = c.startPTS,
                                                    A = c.endPTS,
                                                    L = c.startDTS,
                                                    R = c.endDTS;
                                                if (l) l.elementaryStreams[c.type] = {
                                                    startPTS: S,
                                                    endPTS: A,
                                                    startDTS: L,
                                                    endDTS: R
                                                };
                                                else if (c.firstKeyFrame && c.independent && 1 === a.id && !E && (this.couldBacktrack = !0), c.dropped && c.independent) {
                                                    var w = this.getMainFwdBufferInfo(),
                                                        D = (w ? w.end : this.getLoadPosition()) + this.config.maxBufferHole,
                                                        C = c.firstKeyFramePTS ? c.firstKeyFramePTS : S;
                                                    if (!b && D < C - this.config.maxBufferHole && !E) return void this.backtrack(o);
                                                    E && (o.gap = !0), o.setElementaryStreamInfo(c.type, o.start, A, o.start, R, !0)
                                                } else b && S > Ol && (o.gap = !0);
                                                o.setElementaryStreamInfo(c.type, S, A, L, R), this.backtrackFragment && (this.backtrackFragment = o), this.bufferFragmentData(c, o, l, a, b || E)
                                            } else {
                                                if (!b && !E) return void this.backtrack(o);
                                                o.gap = !0
                                            }
                                        }
                                        if (p) {
                                            var x = p.startPTS,
                                                _ = p.endPTS,
                                                O = p.startDTS,
                                                P = p.endDTS;
                                            l && (l.elementaryStreams[j.AUDIO] = {
                                                startPTS: x,
                                                endPTS: _,
                                                startDTS: O,
                                                endDTS: P
                                            }), o.setElementaryStreamInfo(j.AUDIO, x, _, O, P), this.bufferFragmentData(p, o, l, a)
                                        }
                                        if (g && null != h && null != (t = h.samples) && t.length) {
                                            var M = {
                                                id: r,
                                                frag: o,
                                                details: g,
                                                samples: h.samples
                                            };
                                            n.trigger(I.FRAG_PARSING_METADATA, M)
                                        }
                                        if (g && d) {
                                            var F = {
                                                id: r,
                                                frag: o,
                                                details: g,
                                                samples: d.samples
                                            };
                                            n.trigger(I.FRAG_PARSING_USERDATA, F)
                                        }
                                    }
                                } else this.resetWhenMissingContext(a)
                            }, r._bufferInitSegment = function(e, t, r, n) {
                                var i = this;
                                if (this.state === $n.PARSING) {
                                    this.audioOnly = !!t.audio && !t.video, this.altAudio && !this.audioOnly && delete t.audio;
                                    var a = t.audio,
                                        s = t.video,
                                        o = t.audiovideo;
                                    if (a) {
                                        var l = e.audioCodec,
                                            u = navigator.userAgent.toLowerCase();
                                        this.audioCodecSwitch && (l && (l = -1 !== l.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), 1 !== a.metadata.channelCount && -1 === u.indexOf("firefox") && (l = "mp4a.40.5")), l && -1 !== l.indexOf("mp4a.40.5") && -1 !== u.indexOf("android") && "audio/mpeg" !== a.container && (l = "mp4a.40.2", this.log("Android: force audio codec to " + l)), e.audioCodec && e.audioCodec !== l && this.log('Swapping manifest audio codec "' + e.audioCodec + '" for "' + l + '"'), a.levelCodec = l, a.id = "main", this.log("Init audio buffer, container:" + a.container + ", codecs[selected/level/parsed]=[" + (l || "") + "/" + (e.audioCodec || "") + "/" + a.codec + "]")
                                    }
                                    s && (s.levelCodec = e.videoCodec, s.id = "main", this.log("Init video buffer, container:" + s.container + ", codecs[level/parsed]=[" + (e.videoCodec || "") + "/" + s.codec + "]")), o && this.log("Init audiovideo buffer, container:" + o.container + ", codecs[level/parsed]=[" + e.codecs + "/" + o.codec + "]"), this.hls.trigger(I.BUFFER_CODECS, t), Object.keys(t).forEach((function(e) {
                                        var a = t[e].initSegment;
                                        null != a && a.byteLength && i.hls.trigger(I.BUFFER_APPENDING, {
                                            type: e,
                                            data: a,
                                            frag: r,
                                            part: null,
                                            chunkMeta: n,
                                            parent: r.type
                                        })
                                    })), this.tickImmediate()
                                }
                            }, r.getMainFwdBufferInfo = function() {
                                return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, $t.MAIN)
                            }, r.backtrack = function(e) {
                                this.couldBacktrack = !0, this.backtrackFragment = e, this.resetTransmuxer(), this.flushBufferGap(e), this.fragmentTracker.removeFragment(e), this.fragPrevious = null, this.nextLoadPosition = e.start, this.state = $n.IDLE
                            }, r.checkFragmentChanged = function() {
                                var e = this.media,
                                    t = null;
                                if (e && e.readyState > 1 && !1 === e.seeking) {
                                    var r = e.currentTime;
                                    if (In.isBuffered(e, r) ? t = this.getAppendedFrag(r) : In.isBuffered(e, r + .1) && (t = this.getAppendedFrag(r + .1)), t) {
                                        this.backtrackFragment = null;
                                        var n = this.fragPlaying,
                                            i = t.level;
                                        n && t.sn === n.sn && n.level === i || (this.fragPlaying = t, this.hls.trigger(I.FRAG_CHANGED, {
                                            frag: t
                                        }), n && n.level === i || this.hls.trigger(I.LEVEL_SWITCHED, {
                                            level: i
                                        }))
                                    }
                                }
                            }, o(t, [{
                                key: "nextLevel",
                                get: function() {
                                    var e = this.nextBufferedFrag;
                                    return e ? e.level : -1
                                }
                            }, {
                                key: "currentFrag",
                                get: function() {
                                    var e = this.media;
                                    return e ? this.fragPlaying || this.getAppendedFrag(e.currentTime) : null
                                }
                            }, {
                                key: "currentProgramDateTime",
                                get: function() {
                                    var e = this.media;
                                    if (e) {
                                        var t = e.currentTime,
                                            r = this.currentFrag;
                                        if (r && k(t) && k(r.programDateTime)) {
                                            var n = r.programDateTime + 1e3 * (t - r.start);
                                            return new Date(n)
                                        }
                                    }
                                    return null
                                }
                            }, {
                                key: "currentLevel",
                                get: function() {
                                    var e = this.currentFrag;
                                    return e ? e.level : -1
                                }
                            }, {
                                key: "nextBufferedFrag",
                                get: function() {
                                    var e = this.currentFrag;
                                    return e ? this.followingBufferedFrag(e) : null
                                }
                            }, {
                                key: "forceStartLoad",
                                get: function() {
                                    return this._forceStartLoad
                                }
                            }]), t
                        }(Jn),
                        Bl = function() {
                            function e(t) {
                                void 0 === t && (t = {}), this.config = void 0, this.userConfig = void 0, this.coreComponents = void 0, this.networkControllers = void 0, this.started = !1, this._emitter = new Sa, this._autoLevelCapping = -1, this._maxHdcpLevel = null, this.abrController = void 0, this.bufferController = void 0, this.capLevelController = void 0, this.latencyController = void 0, this.levelController = void 0, this.streamController = void 0, this.audioTrackController = void 0, this.subtitleTrackController = void 0, this.emeController = void 0, this.cmcdController = void 0, this._media = null, this.url = null, this.triggeringException = void 0, M(t.debug || !1, "Hls instance");
                                var r = this.config = Sl(e.DefaultConfig, t);
                                this.userConfig = t, r.progressive && kl(r);
                                var n = r.abrController,
                                    i = r.bufferController,
                                    a = r.capLevelController,
                                    s = r.errorController,
                                    o = r.fpsController,
                                    l = new s(this),
                                    u = this.abrController = new n(this),
                                    c = this.bufferController = new i(this),
                                    d = this.capLevelController = new a(this),
                                    h = new o(this),
                                    f = new Zt(this),
                                    g = new gr(this),
                                    p = r.contentSteeringController,
                                    m = p ? new p(this) : null,
                                    v = this.levelController = new Ll(this, m),
                                    y = new An(this),
                                    T = new Il(this.config),
                                    b = this.streamController = new Ul(this, y, T);
                                d.setStreamController(b), h.setStreamController(b);
                                var E = [f, v, b];
                                m && E.splice(1, 0, m), this.networkControllers = E;
                                var S = [u, c, d, h, g, y];
                                this.audioTrackController = this.createController(r.audioTrackController, E);
                                var A = r.audioStreamController;
                                A && E.push(new A(this, y, T)), this.subtitleTrackController = this.createController(r.subtitleTrackController, E);
                                var k = r.subtitleStreamController;
                                k && E.push(new k(this, y, T)), this.createController(r.timelineController, S), T.emeController = this.emeController = this.createController(r.emeController, S), this.cmcdController = this.createController(r.cmcdController, S), this.latencyController = this.createController(pr, S), this.coreComponents = S, E.push(l);
                                var L = l.onErrorOut;
                                "function" == typeof L && this.on(I.ERROR, L, l)
                            }
                            e.isMSESupported = function() {
                                return Dl()
                            }, e.isSupported = function() {
                                return Cl()
                            }, e.getMediaSource = function() {
                                return Et()
                            };
                            var t = e.prototype;
                            return t.createController = function(e, t) {
                                if (e) {
                                    var r = new e(this);
                                    return t && t.push(r), r
                                }
                                return null
                            }, t.on = function(e, t, r) {
                                void 0 === r && (r = this), this._emitter.on(e, t, r)
                            }, t.once = function(e, t, r) {
                                void 0 === r && (r = this), this._emitter.once(e, t, r)
                            }, t.removeAllListeners = function(e) {
                                this._emitter.removeAllListeners(e)
                            }, t.off = function(e, t, r, n) {
                                void 0 === r && (r = this), this._emitter.off(e, t, r, n)
                            }, t.listeners = function(e) {
                                return this._emitter.listeners(e)
                            }, t.emit = function(e, t, r) {
                                return this._emitter.emit(e, t, r)
                            }, t.trigger = function(e, t) {
                                if (this.config.debug) return this.emit(e, e, t);
                                try {
                                    return this.emit(e, e, t)
                                } catch (t) {
                                    if (F.error("An internal error happened while handling event " + e + '. Error message: "' + t.message + '". Here is a stacktrace:', t), !this.triggeringException) {
                                        this.triggeringException = !0;
                                        var r = e === I.ERROR;
                                        this.trigger(I.ERROR, {
                                            type: w.OTHER_ERROR,
                                            details: D.INTERNAL_EXCEPTION,
                                            fatal: r,
                                            event: e,
                                            error: t
                                        }), this.triggeringException = !1
                                    }
                                }
                                return !1
                            }, t.listenerCount = function(e) {
                                return this._emitter.listenerCount(e)
                            }, t.destroy = function() {
                                F.log("destroy"), this.trigger(I.DESTROYING, void 0), this.detachMedia(), this.removeAllListeners(), this._autoLevelCapping = -1, this.url = null, this.networkControllers.forEach((function(e) {
                                    return e.destroy()
                                })), this.networkControllers.length = 0, this.coreComponents.forEach((function(e) {
                                    return e.destroy()
                                })), this.coreComponents.length = 0;
                                var e = this.config;
                                e.xhrSetup = e.fetchSetup = void 0, this.userConfig = null
                            }, t.attachMedia = function(e) {
                                F.log("attachMedia"), this._media = e, this.trigger(I.MEDIA_ATTACHING, {
                                    media: e
                                })
                            }, t.detachMedia = function() {
                                F.log("detachMedia"), this.trigger(I.MEDIA_DETACHING, void 0), this._media = null
                            }, t.loadSource = function(e) {
                                this.stopLoad();
                                var t = this.media,
                                    r = this.url,
                                    n = this.url = A.buildAbsoluteURL(self.location.href, e, {
                                        alwaysNormalize: !0
                                    });
                                this._autoLevelCapping = -1, this._maxHdcpLevel = null, F.log("loadSource:" + n), t && r && (r !== n || this.bufferController.hasSourceTypes()) && (this.detachMedia(), this.attachMedia(t)), this.trigger(I.MANIFEST_LOADING, {
                                    url: e
                                })
                            }, t.startLoad = function(e) {
                                void 0 === e && (e = -1), F.log("startLoad(" + e + ")"), this.started = !0, this.networkControllers.forEach((function(t) {
                                    t.startLoad(e)
                                }))
                            }, t.stopLoad = function() {
                                F.log("stopLoad"), this.started = !1, this.networkControllers.forEach((function(e) {
                                    e.stopLoad()
                                }))
                            }, t.resumeBuffering = function() {
                                this.started && this.networkControllers.forEach((function(e) {
                                    "fragmentLoader" in e && e.startLoad(-1)
                                }))
                            }, t.pauseBuffering = function() {
                                this.networkControllers.forEach((function(e) {
                                    "fragmentLoader" in e && e.stopLoad()
                                }))
                            }, t.swapAudioCodec = function() {
                                F.log("swapAudioCodec"), this.streamController.swapAudioCodec()
                            }, t.recoverMediaError = function() {
                                F.log("recoverMediaError");
                                var e = this._media;
                                this.detachMedia(), e && this.attachMedia(e)
                            }, t.removeLevel = function(e) {
                                this.levelController.removeLevel(e)
                            }, t.setAudioOption = function(e) {
                                var t;
                                return null == (t = this.audioTrackController) ? void 0 : t.setAudioOption(e)
                            }, t.setSubtitleOption = function(e) {
                                var t;
                                return null == (t = this.subtitleTrackController) || t.setSubtitleOption(e), null
                            }, o(e, [{
                                key: "levels",
                                get: function() {
                                    var e = this.levelController.levels;
                                    return e || []
                                }
                            }, {
                                key: "currentLevel",
                                get: function() {
                                    return this.streamController.currentLevel
                                },
                                set: function(e) {
                                    F.log("set currentLevel:" + e), this.levelController.manualLevel = e, this.streamController.immediateLevelSwitch()
                                }
                            }, {
                                key: "nextLevel",
                                get: function() {
                                    return this.streamController.nextLevel
                                },
                                set: function(e) {
                                    F.log("set nextLevel:" + e), this.levelController.manualLevel = e, this.streamController.nextLevelSwitch()
                                }
                            }, {
                                key: "loadLevel",
                                get: function() {
                                    return this.levelController.level
                                },
                                set: function(e) {
                                    F.log("set loadLevel:" + e), this.levelController.manualLevel = e
                                }
                            }, {
                                key: "nextLoadLevel",
                                get: function() {
                                    return this.levelController.nextLoadLevel
                                },
                                set: function(e) {
                                    this.levelController.nextLoadLevel = e
                                }
                            }, {
                                key: "firstLevel",
                                get: function() {
                                    return Math.max(this.levelController.firstLevel, this.minAutoLevel)
                                },
                                set: function(e) {
                                    F.log("set firstLevel:" + e), this.levelController.firstLevel = e
                                }
                            }, {
                                key: "startLevel",
                                get: function() {
                                    var e = this.levelController.startLevel;
                                    return -1 === e && this.abrController.forcedAutoLevel > -1 ? this.abrController.forcedAutoLevel : e
                                },
                                set: function(e) {
                                    F.log("set startLevel:" + e), -1 !== e && (e = Math.max(e, this.minAutoLevel)), this.levelController.startLevel = e
                                }
                            }, {
                                key: "capLevelToPlayerSize",
                                get: function() {
                                    return this.config.capLevelToPlayerSize
                                },
                                set: function(e) {
                                    var t = !!e;
                                    t !== this.config.capLevelToPlayerSize && (t ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(), this.autoLevelCapping = -1, this.streamController.nextLevelSwitch()), this.config.capLevelToPlayerSize = t)
                                }
                            }, {
                                key: "autoLevelCapping",
                                get: function() {
                                    return this._autoLevelCapping
                                },
                                set: function(e) {
                                    this._autoLevelCapping !== e && (F.log("set autoLevelCapping:" + e), this._autoLevelCapping = e, this.levelController.checkMaxAutoUpdated())
                                }
                            }, {
                                key: "bandwidthEstimate",
                                get: function() {
                                    var e = this.abrController.bwEstimator;
                                    return e ? e.getEstimate() : NaN
                                },
                                set: function(e) {
                                    this.abrController.resetEstimator(e)
                                }
                            }, {
                                key: "ttfbEstimate",
                                get: function() {
                                    var e = this.abrController.bwEstimator;
                                    return e ? e.getEstimateTTFB() : NaN
                                }
                            }, {
                                key: "maxHdcpLevel",
                                get: function() {
                                    return this._maxHdcpLevel
                                },
                                set: function(e) {
                                    vr(e) && this._maxHdcpLevel !== e && (this._maxHdcpLevel = e, this.levelController.checkMaxAutoUpdated())
                                }
                            }, {
                                key: "autoLevelEnabled",
                                get: function() {
                                    return -1 === this.levelController.manualLevel
                                }
                            }, {
                                key: "manualLevel",
                                get: function() {
                                    return this.levelController.manualLevel
                                }
                            }, {
                                key: "minAutoLevel",
                                get: function() {
                                    var e = this.levels,
                                        t = this.config.minAutoBitrate;
                                    if (!e) return 0;
                                    for (var r = e.length, n = 0; n < r; n++)
                                        if (e[n].maxBitrate >= t) return n;
                                    return 0
                                }
                            }, {
                                key: "maxAutoLevel",
                                get: function() {
                                    var e, t = this.levels,
                                        r = this.autoLevelCapping,
                                        n = this.maxHdcpLevel;
                                    if (e = -1 === r && null != t && t.length ? t.length - 1 : r, n)
                                        for (var i = e; i--;) {
                                            var a = t[i].attrs["HDCP-LEVEL"];
                                            if (a && a <= n) return i
                                        }
                                    return e
                                }
                            }, {
                                key: "firstAutoLevel",
                                get: function() {
                                    return this.abrController.firstAutoLevel
                                }
                            }, {
                                key: "nextAutoLevel",
                                get: function() {
                                    return this.abrController.nextAutoLevel
                                },
                                set: function(e) {
                                    this.abrController.nextAutoLevel = e
                                }
                            }, {
                                key: "playingDate",
                                get: function() {
                                    return this.streamController.currentProgramDateTime
                                }
                            }, {
                                key: "mainForwardBufferInfo",
                                get: function() {
                                    return this.streamController.getMainFwdBufferInfo()
                                }
                            }, {
                                key: "allAudioTracks",
                                get: function() {
                                    var e = this.audioTrackController;
                                    return e ? e.allAudioTracks : []
                                }
                            }, {
                                key: "audioTracks",
                                get: function() {
                                    var e = this.audioTrackController;
                                    return e ? e.audioTracks : []
                                }
                            }, {
                                key: "audioTrack",
                                get: function() {
                                    var e = this.audioTrackController;
                                    return e ? e.audioTrack : -1
                                },
                                set: function(e) {
                                    var t = this.audioTrackController;
                                    t && (t.audioTrack = e)
                                }
                            }, {
                                key: "allSubtitleTracks",
                                get: function() {
                                    var e = this.subtitleTrackController;
                                    return e ? e.allSubtitleTracks : []
                                }
                            }, {
                                key: "subtitleTracks",
                                get: function() {
                                    var e = this.subtitleTrackController;
                                    return e ? e.subtitleTracks : []
                                }
                            }, {
                                key: "subtitleTrack",
                                get: function() {
                                    var e = this.subtitleTrackController;
                                    return e ? e.subtitleTrack : -1
                                },
                                set: function(e) {
                                    var t = this.subtitleTrackController;
                                    t && (t.subtitleTrack = e)
                                }
                            }, {
                                key: "media",
                                get: function() {
                                    return this._media
                                }
                            }, {
                                key: "subtitleDisplay",
                                get: function() {
                                    var e = this.subtitleTrackController;
                                    return !!e && e.subtitleDisplay
                                },
                                set: function(e) {
                                    var t = this.subtitleTrackController;
                                    t && (t.subtitleDisplay = e)
                                }
                            }, {
                                key: "lowLatencyMode",
                                get: function() {
                                    return this.config.lowLatencyMode
                                },
                                set: function(e) {
                                    this.config.lowLatencyMode = e
                                }
                            }, {
                                key: "liveSyncPosition",
                                get: function() {
                                    return this.latencyController.liveSyncPosition
                                }
                            }, {
                                key: "latency",
                                get: function() {
                                    return this.latencyController.latency
                                }
                            }, {
                                key: "maxLatency",
                                get: function() {
                                    return this.latencyController.maxLatency
                                }
                            }, {
                                key: "targetLatency",
                                get: function() {
                                    return this.latencyController.targetLatency
                                }
                            }, {
                                key: "drift",
                                get: function() {
                                    return this.latencyController.drift
                                }
                            }, {
                                key: "forceStartLoad",
                                get: function() {
                                    return this.streamController.forceStartLoad
                                }
                            }], [{
                                key: "version",
                                get: function() {
                                    return "1.5.5-0.canary.9893"
                                }
                            }, {
                                key: "Events",
                                get: function() {
                                    return I
                                }
                            }, {
                                key: "ErrorTypes",
                                get: function() {
                                    return w
                                }
                            }, {
                                key: "ErrorDetails",
                                get: function() {
                                    return D
                                }
                            }, {
                                key: "DefaultConfig",
                                get: function() {
                                    return e.defaultConfig ? e.defaultConfig : bl
                                },
                                set: function(t) {
                                    e.defaultConfig = t
                                }
                            }]), e
                        }();
                    return Bl.defaultConfig = void 0, Bl
                }()
            }(!1)
        },
        2381: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(4044);

            function o(e) {
                var t = (e = e || {}).containerElement;
                if (!(t instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var r = document.createElement("iframe");
                r.style.width = "100%", r.style.height = "100%", r.style.border = 0, r.style.backgroundColor = "black", r.allowFullscreen = !1, r.allow = "autoplay", t.appendChild(r);
                var o = new n,
                    l = !1,
                    u = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        buffered: !1,
                        volume: !1,
                        muted: !1,
                        playbackSpeed: !1
                    };

                function c(e) {
                    if (e.source === r.contentWindow) {
                        var t = e.data || e.message;
                        if (t && "string" == typeof t.event) {
                            var n = t.event,
                                i = Array.isArray(t.args) ? t.args : [];
                            o.emit.apply(o, [n].concat(i))
                        }
                    }
                }

                function d(e) {
                    r.contentWindow.postMessage(e, "*")
                }

                function h(e, t) {
                    u[e] && o.emit("propChanged", e, t)
                }

                function f(e, n) {
                    switch (e) {
                        case "load":
                            return f("unload"), n && n.stream && "string" == typeof n.stream.playerFrameUrl ? (window.addEventListener("message", c, !1), r.onload = function() {
                                d({
                                    type: "command",
                                    commandName: e,
                                    commandArgs: n
                                })
                            }, r.src = n.stream.playerFrameUrl) : (i = Object.assign({}, s.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: n ? n.stream : null
                            }), o.emit("error", i), i.critical && f("unload")), !0;
                        case "unload":
                            return window.removeEventListener("message", c), r.onload = null, r.removeAttribute("src"), h("stream", null), h("loaded", null), h("paused", null), h("time", null), h("duration", null), h("buffering", null), h("buffered", null), h("volume", null), h("muted", null), h("playbackSpeed", null), !0;
                        case "destroy":
                            return f("unload"), l = !0, o.removeAllListeners(), t.removeChild(r), !0
                    }
                    var i
                }
                this.on = function(e, t) {
                    if (l) throw new Error("Video is destroyed");
                    o.on(e, t)
                }, this.dispatch = function(e) {
                    if (l) throw new Error("Video is destroyed");
                    if (e) switch ((e = a(i(e))).type) {
                        case "observeProp":
                            return t = e.propName, u.hasOwnProperty(t) && (u[t] = !0), void d(e);
                        case "setProp":
                            return void d(e);
                        case "command":
                            return void(f(e.commandName, e.commandArgs) || d(e))
                    }
                    var t;
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            o.canPlayStream = function(e) {
                return Promise.resolve(e && "string" == typeof e.playerFrameUrl)
            }, o.manifest = {
                name: "IFrameVideo",
                external: !0,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "buffered", "audioTracks", "selectedAudioTrackId", "subtitlesTracks", "selectedSubtitlesTrackId", "subtitlesOffset", "subtitlesSize", "subtitlesTextColor", "subtitlesBackgroundColor", "subtitlesOutlineColor", "volume", "muted", "playbackSpeed", "extraSubtitlesTracks", "selectedExtraSubtitlesTrackId", "extraSubtitlesDelay", "extraSubtitlesSize", "extraSubtitlesOffset", "extraSubtitlesTextColor", "extraSubtitlesBackgroundColor", "extraSubtitlesOutlineColor"],
                commands: ["load", "unload", "destroy", "addExtraSubtitlesTracks"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded", "audioTrackLoaded", "extraSubtitlesTrackLoaded", "implementationChanged"]
            }, e.exports = o
        },
        2383: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(2198),
                o = r(815),
                l = r(4044);

            function u() {
                var e = null,
                    t = new n,
                    r = !1;
                this.on = function(e, n) {
                    if (r) throw new Error("Video is destroyed");
                    t.on(e, n)
                }, this.dispatch = function(n, u) {
                    if (r) throw new Error("Video is destroyed");
                    if (!n) throw new Error("Invalid action dispatched: " + JSON.stringify(n));
                    if (u = u || {}, "command" === (n = a(i(n))).type && "load" === n.commandName && n.commandArgs) {
                        n.commandArgs.platform && o.set(n.commandArgs.platform);
                        var c = s(n.commandArgs, u);
                        if (null !== e && e.constructor !== c && (e.dispatch({
                                type: "command",
                                commandName: "destroy"
                            }), e = null), null === e) {
                            if (null === c) return void t.emit("error", Object.assign({}, l.UNSUPPORTED_STREAM, {
                                error: new Error("No video implementation was selected"),
                                critical: !0,
                                stream: n.commandArgs.stream
                            }));
                            (e = new c(u)).on("ended", (function() {
                                t.emit("ended")
                            })), e.on("error", (function(e) {
                                t.emit("error", e)
                            })), e.on("propValue", (function(e, r) {
                                t.emit("propValue", e, r)
                            })), e.on("propChanged", (function(e, r) {
                                t.emit("propChanged", e, r)
                            })), e.on("subtitlesTrackLoaded", (function(e) {
                                t.emit("subtitlesTrackLoaded", e)
                            })), e.on("audioTrackLoaded", (function(e) {
                                t.emit("audioTrackLoaded", e)
                            })), e.on("extraSubtitlesTrackLoaded", (function(e) {
                                t.emit("extraSubtitlesTrackLoaded", e)
                            })), e.on("extraSubtitlesTrackAdded", (function(e) {
                                t.emit("extraSubtitlesTrackAdded", e)
                            })), c.manifest.external ? e.on("implementationChanged", (function(e) {
                                t.emit("implementationChanged", e)
                            })) : t.emit("implementationChanged", c.manifest)
                        }
                    }
                    if (null !== e) try {
                        e.dispatch(n)
                    } catch (t) {
                        console.error(e.constructor.manifest.name, t)
                    }
                    "command" === n.type && "destroy" === n.commandName && (e = null)
                }, this.destroy = function() {
                    r = !0, null !== e && (e.dispatch({
                        type: "command",
                        commandName: "destroy"
                    }), e = null), t.removeAllListeners()
                }
            }
            u.ERROR = l, e.exports = u
        },
        2410: e => {
            e.exports = function(e, t) {
                if (t < e[0] || e[e.length - 1] < t) return -1;
                for (var r = 0, n = e.length - 1, i = -1; r <= n;) {
                    var a = Math.floor((r + n) / 2);
                    e[a] > t ? n = a - 1 : (e[a] < t || (i = a), r = a + 1)
                }
                return -1 !== i ? i : n
            }
        },
        2752: (e, t, r) => {
            var n = r(9049);
            e.exports = n
        },
        2880: (e, t, r) => {
            "use strict";
            var n = r(2798),
                i = r(4340),
                a = r(2786),
                s = r(6415),
                o = r(4479);
            n({
                target: "Iterator",
                proto: !0,
                real: !0
            }, {
                some: function(e) {
                    s(this), a(e);
                    var t = o(this),
                        r = 0;
                    return i(t, (function(t, n) {
                        if (e(t, r++)) return n()
                    }), {
                        IS_RECORD: !0,
                        INTERRUPTED: !0
                    }).stopped
                }
            })
        },
        3673: (e, t, r) => {
            var n = r(8868),
                i = r(3909),
                a = r(9932);

            function s(e, t, r, i) {
                var a = new URL(t),
                    s = new URLSearchParams;
                return s.set("d", a.origin), Object.entries(r).forEach((function(e) {
                    s.append("h", e[0] + ":" + e[1])
                })), Object.entries(i).forEach((function(e) {
                    s.append("r", e[0] + ":" + e[1])
                })), n.resolve(e, "/proxy/" + s.toString() + a.pathname) + a.search
            }
            e.exports = function(e, t, r, n) {
                return new Promise((function(o, l) {
                    if ("string" != typeof t.url) "string" != typeof t.infoHash ? l(new Error("Stream cannot be converted")) : a(e, t.infoHash, t.fileIdx, t.announce, r).then((function(e) {
                        o({
                            url: e.url,
                            infoHash: e.infoHash,
                            fileIdx: e.fileIdx
                        })
                    })).catch((function(e) {
                        l(e)
                    }));
                    else if (0 === t.url.indexOf("magnet:")) {
                        var u;
                        try {
                            if (!(u = i.decode(t.url)) || "string" != typeof u.infoHash) throw new Error("Failed to decode magnet url")
                        } catch (e) {
                            return void l(e)
                        }
                        var c = Array.isArray(u.announce) ? u.announce.map((function(e) {
                            return "tracker:" + e
                        })) : [];
                        a(e, u.infoHash, null, c, r).then((function(e) {
                            o({
                                url: e.url,
                                infoHash: e.infoHash,
                                fileIdx: e.fileIdx
                            })
                        })).catch((function(e) {
                            l(e)
                        }))
                    } else {
                        var d = n && n.proxyStreamsEnabled,
                            h = t.behaviorHints && t.behaviorHints.proxyHeaders;
                        if (d || h) {
                            var f = h && h.request ? h.request : {},
                                g = h && h.response ? h.response : {};
                            o({
                                url: s(e, t.url, f, g)
                            })
                        } else o({
                            url: t.url
                        })
                    }
                }))
            }
        },
        3762: (e, t, r) => {
            var n = r(5852),
                i = r(8868),
                a = r(7444),
                s = r(5126),
                o = r(8816),
                l = r(7384),
                u = r(3673),
                c = r(4989),
                d = r(4724),
                h = r(1266),
                f = r(4044);
            e.exports = function(e) {
                function t(r) {
                    var h = new e(r = r || {});
                    h.on("error", (function(e) {
                        T.emit("error", e), e.critical && R("unload")
                    })), h.on("propValue", S.bind(null, "propValue")), h.on("propChanged", S.bind(null, "propChanged")), e.manifest.events.filter((function(e) {
                        return !["error", "propValue", "propChanged"].includes(e)
                    })).forEach((function(e) {
                        h.on(e, function(e) {
                            return function() {
                                T.emit.apply(T, [e].concat(Array.from(arguments)))
                            }
                        }(e))
                    }));
                    var g = this,
                        p = null,
                        m = !1,
                        v = [],
                        y = null,
                        T = new n,
                        b = !1,
                        E = {
                            stream: !1,
                            videoParams: !1
                        };

                    function S(e, t, r) {
                        T.emit(e, t, L(t, r))
                    }

                    function A(e) {
                        E[e] && T.emit("propChanged", e, L(e, null))
                    }

                    function k(e) {
                        T.emit("error", e), e.critical && (R("unload"), h.dispatch({
                            type: "command",
                            commandName: "unload"
                        }))
                    }

                    function L(e, t) {
                        switch (e) {
                            case "stream":
                                return null !== p ? p.stream : null;
                            case "videoParams":
                                return y;
                            default:
                                return t
                        }
                    }

                    function R(r, n) {
                        switch (r) {
                            case "load":
                                return n && n.stream && "string" == typeof n.streamingServerURL ? (R("unload"), h.dispatch({
                                    type: "command",
                                    commandName: "unload"
                                }), p = n, A("stream"), u(n.streamingServerURL, n.stream, n.seriesInfo, n.streamingServerSettings).then((function(e) {
                                    var r = e.url,
                                        s = e.infoHash,
                                        o = e.fileIdx,
                                        u = Array.isArray(n.formats) ? n.formats : l.formats,
                                        c = Array.isArray(n.videoCodecs) ? n.videoCodecs : l.videoCodecs,
                                        d = Array.isArray(n.audioCodecs) ? n.audioCodecs : l.audioCodecs,
                                        h = null !== n.maxAudioChannels && isFinite(n.maxAudioChannels) ? n.maxAudioChannels : l.maxAudioChannels,
                                        f = Object.assign({}, n, {
                                            formats: u,
                                            videoCodecs: c,
                                            audioCodecs: d,
                                            maxAudioChannels: h
                                        });
                                    return (n.forceTranscoding ? Promise.resolve(!1) : t.canPlayStream({
                                        url: r
                                    }, f)).catch((function(e) {
                                        return console.warn("Media probe error", e), !1
                                    })).then((function(e) {
                                        if (e) return {
                                            mediaURL: r,
                                            infoHash: s,
                                            fileIdx: o,
                                            stream: {
                                                url: r
                                            }
                                        };
                                        var t = a(),
                                            l = new URLSearchParams([
                                                ["mediaURL", r]
                                            ]);
                                        return n.forceTranscoding && l.set("forceTranscoding", "1"), c.forEach((function(e) {
                                            l.append("videoCodecs", e)
                                        })), d.forEach((function(e) {
                                            l.append("audioCodecs", e)
                                        })), l.set("maxAudioChannels", h), {
                                            mediaURL: r,
                                            infoHash: s,
                                            fileIdx: o,
                                            stream: {
                                                url: i.resolve(n.streamingServerURL, "/hlsv2/" + t + "/master.m3u8?" + l.toString()),
                                                subtitles: Array.isArray(n.stream.subtitles) ? n.stream.subtitles.map((function(e) {
                                                    return Object.assign({}, e, {
                                                        url: "string" == typeof e.url ? i.resolve(n.streamingServerURL, "/subtitles.vtt?" + new URLSearchParams([
                                                            ["from", e.url]
                                                        ]).toString()) : e.url
                                                    })
                                                })) : [],
                                                behaviorHints: {
                                                    headers: {
                                                        "content-type": "application/vnd.apple.mpegurl"
                                                    }
                                                }
                                            }
                                        }
                                    }))
                                })).then((function(t) {
                                    n === p && (h.dispatch({
                                        type: "command",
                                        commandName: "load",
                                        commandArgs: Object.assign({}, n, {
                                            stream: t.stream
                                        })
                                    }), m = !0, function() {
                                        for (; v.length > 0;) {
                                            var e = v.shift();
                                            g.dispatch.call(g, e)
                                        }
                                    }(), d(h, e.manifest.props).then((function() {
                                        return c(n.streamingServerURL, t.mediaURL, t.infoHash, t.fileIdx, n.stream.behaviorHints)
                                    })).then((function(e) {
                                        n === p && (y = e, A("videoParams"))
                                    })).catch((function(e) {
                                        n === p && (console.error(e), y = {
                                            hash: null,
                                            size: null,
                                            filename: null
                                        }, A("videoParams"))
                                    })))
                                })).catch((function(e) {
                                    n === p && k(Object.assign({}, f.WITH_STREAMING_SERVER.CONVERT_FAILED, {
                                        error: e,
                                        critical: !0,
                                        stream: n.stream,
                                        streamingServerURL: n.streamingServerURL
                                    }))
                                }))) : k(Object.assign({}, f.UNSUPPORTED_STREAM, {
                                    critical: !0,
                                    stream: n ? n.stream : null,
                                    streamingServerURL: n && "string" == typeof n.streamingServerURL ? n.streamingServerURL : null
                                })), !0;
                            case "addExtraSubtitlesTracks":
                                return p && n && Array.isArray(n.tracks) && (m ? h.dispatch({
                                    type: "command",
                                    commandName: "addExtraSubtitlesTracks",
                                    commandArgs: Object.assign({}, n, {
                                        tracks: n.tracks.map((function(e) {
                                            return Object.assign({}, e, {
                                                fallbackUrl: e.url,
                                                url: "string" == typeof e.url ? i.resolve(p.streamingServerURL, "/subtitles.vtt?" + new URLSearchParams([
                                                    ["from", e.url]
                                                ]).toString()) : e.url
                                            })
                                        }))
                                    })
                                }) : v.push({
                                    type: "command",
                                    commandName: "addExtraSubtitlesTracks",
                                    commandArgs: n
                                })), !0;
                            case "unload":
                                return p = null, m = !1, v = [], y = null, A("stream"), A("videoParams"), !1;
                            case "destroy":
                                return R("unload"), b = !0, h.dispatch({
                                    type: "command",
                                    commandName: "destroy"
                                }), T.removeAllListeners(), !0;
                            default:
                                return !m && (v.push({
                                    type: "command",
                                    commandName: r,
                                    commandArgs: n
                                }), !0)
                        }
                    }
                    this.on = function(e, t) {
                        if (b) throw new Error("Video is destroyed");
                        T.on(e, t)
                    }, this.dispatch = function(e) {
                        if (b) throw new Error("Video is destroyed");
                        if (e) switch ((e = o(s(e))).type) {
                            case "observeProp":
                                if (function(e) {
                                        switch (e) {
                                            case "stream":
                                            case "videoParams":
                                                return T.emit("propValue", e, L(e, null)), E[e] = !0, !0;
                                            default:
                                                return !1
                                        }
                                    }(e.propName)) return;
                                break;
                            case "command":
                                if (R(e.commandName, e.commandArgs)) return
                        }
                        h.dispatch(e)
                    }
                }
                return t.canPlayStream = function(t, r) {
                    return h().then((function(n) {
                        if (!n) return e.canPlayStream(t);
                        var a = new URLSearchParams([
                            ["mediaURL", t.url]
                        ]);
                        return fetch(i.resolve(r.streamingServerURL, "/hlsv2/probe?" + a.toString())).then((function(e) {
                            return e.json()
                        })).then((function(e) {
                            var t = r.formats.some((function(t) {
                                    return -1 !== e.format.name.indexOf(t)
                                })),
                                n = e.streams.every((function(e) {
                                    return "audio" === e.track ? e.channels <= r.maxAudioChannels && -1 !== r.audioCodecs.indexOf(e.codec) : "video" !== e.track || -1 !== r.videoCodecs.indexOf(e.codec)
                                }));
                            return t && n
                        })).catch((function() {
                            return e.canPlayStream(t)
                        }))
                    }))
                }, t.manifest = {
                    name: e.manifest.name + "WithStreamingServer",
                    external: e.manifest.external,
                    props: e.manifest.props.concat(["stream", "videoParams"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    })),
                    commands: e.manifest.commands.concat(["load", "unload", "destroy", "addExtraSubtitlesTracks"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    })),
                    events: e.manifest.events.concat(["propValue", "propChanged", "error"]).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    }))
                }, t
            }
        },
        3909: (e, t, r) => {
            e.exports = a, e.exports.decode = a, e.exports.encode = function(e) {
                e = Object.assign({}, e);
                let t = new Set;
                e.xt && "string" == typeof e.xt && t.add(e.xt);
                e.xt && Array.isArray(e.xt) && (t = new Set(e.xt));
                e.infoHashBuffer && t.add(`urn:btih:${e.infoHashBuffer.toString("hex")}`);
                e.infoHash && t.add(`urn:btih:${e.infoHash}`);
                e.infoHashV2Buffer && t.add(e.xt = `urn:btmh:1220${e.infoHashV2Buffer.toString("hex")}`);
                e.infoHashV2 && t.add(`urn:btmh:1220${e.infoHashV2}`);
                const r = Array.from(t);
                1 === r.length && (e.xt = r[0]);
                r.length > 1 && (e.xt = r);
                e.publicKeyBuffer && (e.xs = `urn:btpk:${e.publicKeyBuffer.toString("hex")}`);
                e.publicKey && (e.xs = `urn:btpk:${e.publicKey}`);
                e.name && (e.dn = e.name);
                e.keywords && (e.kt = e.keywords);
                e.announce && (e.tr = e.announce);
                e.urlList && (e.ws = e.urlList, delete e.as);
                e.peerAddresses && (e["x.pe"] = e.peerAddresses);
                let n = "magnet:?";
                return Object.keys(e).filter((e => 2 === e.length || "x.pe" === e)).forEach(((t, r) => {
                    const a = Array.isArray(e[t]) ? e[t] : [e[t]];
                    a.forEach(((e, i) => {
                        (r > 0 || i > 0) && ("kt" !== t && "so" !== t || 0 === i) && (n += "&"), "dn" === t && (e = encodeURIComponent(e).replace(/%20/g, "+")), "tr" !== t && "as" !== t && "ws" !== t || (e = encodeURIComponent(e)), "xs" !== t || e.startsWith("urn:btpk:") || (e = encodeURIComponent(e)), "kt" === t && (e = encodeURIComponent(e)), "so" !== t && (n += "kt" === t && i > 0 ? `+${e}` : `${t}=${e}`)
                    })), "so" === t && (n += `${t}=${i.compose(a)}`)
                })), n
            };
            const n = r(942),
                i = r(1042);

            function a(e) {
                const t = {},
                    r = e.split("magnet:?")[1];
                let a;
                if ((r && r.length >= 0 ? r.split("&") : []).forEach((e => {
                        const r = e.split("=");
                        if (2 !== r.length) return;
                        const n = r[0];
                        let a = r[1];
                        "dn" === n && (a = decodeURIComponent(a).replace(/\+/g, " ")), "tr" !== n && "xs" !== n && "as" !== n && "ws" !== n || (a = decodeURIComponent(a)), "kt" === n && (a = decodeURIComponent(a).split("+")), "ix" === n && (a = Number(a)), "so" === n && (a = i.parse(decodeURIComponent(a).split(","))), t[n] ? (Array.isArray(t[n]) || (t[n] = [t[n]]), t[n].push(a)) : t[n] = a
                    })), t.xt) {
                    (Array.isArray(t.xt) ? t.xt : [t.xt]).forEach((e => {
                        if (a = e.match(/^urn:btih:(.{40})/)) t.infoHash = a[1].toLowerCase();
                        else if (a = e.match(/^urn:btih:(.{32})/)) {
                            const e = n.decode(a[1]);
                            t.infoHash = Buffer.from(e, "binary").toString("hex")
                        } else(a = e.match(/^urn:btmh:1220(.{64})/)) && (t.infoHashV2 = a[1].toLowerCase())
                    }))
                }
                if (t.xs) {
                    (Array.isArray(t.xs) ? t.xs : [t.xs]).forEach((e => {
                        (a = e.match(/^urn:btpk:(.{64})/)) && (t.publicKey = a[1].toLowerCase())
                    }))
                }
                return t.infoHash && (t.infoHashBuffer = Buffer.from(t.infoHash, "hex")), t.infoHashV2 && (t.infoHashV2Buffer = Buffer.from(t.infoHashV2, "hex")), t.publicKey && (t.publicKeyBuffer = Buffer.from(t.publicKey, "hex")), t.dn && (t.name = t.dn), t.kt && (t.keywords = t.kt), t.announce = [], ("string" == typeof t.tr || Array.isArray(t.tr)) && (t.announce = t.announce.concat(t.tr)), t.urlList = [], ("string" == typeof t.as || Array.isArray(t.as)) && (t.urlList = t.urlList.concat(t.as)), ("string" == typeof t.ws || Array.isArray(t.ws)) && (t.urlList = t.urlList.concat(t.ws)), t.peerAddresses = [], ("string" == typeof t["x.pe"] || Array.isArray(t["x.pe"])) && (t.peerAddresses = t.peerAddresses.concat(t["x.pe"])), t.announce = Array.from(new Set(t.announce)), t.urlList = Array.from(new Set(t.urlList)), t.peerAddresses = Array.from(new Set(t.peerAddresses)), t
            }
        },
        3924: e => {
            e.exports = function(e) {
                return e && "string" == typeof e.url ? e.behaviorHints && e.behaviorHints.proxyHeaders && e.behaviorHints.proxyHeaders.response && "string" == typeof e.behaviorHints.proxyHeaders.response["content-type"] ? Promise.resolve(e.behaviorHints.proxyHeaders.response["content-type"]) : fetch(e.url, {
                    method: "HEAD"
                }).then((function(e) {
                    if (e.ok) return e.headers.get("content-type");
                    throw new Error(e.status + " (" + e.statusText + ")")
                })) : Promise.reject(new Error("Invalid stream parameter!"))
            }
        },
        3926: (e, t, r) => {
            "use strict";
            r(2880)
        },
        4044: e => {
            e.exports = {
                CHROMECAST_SENDER_VIDEO: {
                    INVALID_MESSAGE_RECEIVED: {
                        code: 100,
                        message: "Invalid message received"
                    },
                    MESSAGE_SEND_FAILED: {
                        code: 101,
                        message: "Failed to send message"
                    }
                },
                YOUTUBE_VIDEO: {
                    API_LOAD_FAILED: {
                        code: 90,
                        message: "YouTube player iframe API failed to load"
                    },
                    INVALID_PARAMETER: {
                        code: 91,
                        message: "The request contains an invalid parameter value"
                    },
                    HTML5_VIDEO: {
                        code: 92,
                        message: "The requested content cannot be played in an HTML5 player"
                    },
                    VIDEO_NOT_FOUND: {
                        code: 93,
                        message: "The video requested was not found"
                    },
                    VIDEO_NOT_EMBEDDABLE: {
                        code: 94,
                        message: "The owner of the requested video does not allow it to be played in embedded players"
                    }
                },
                HTML_VIDEO: {
                    MEDIA_ERR_ABORTED: {
                        code: 80,
                        message: "Fetching process aborted"
                    },
                    MEDIA_ERR_NETWORK: {
                        code: 81,
                        message: "Error occurred when downloading"
                    },
                    MEDIA_ERR_DECODE: {
                        code: 82,
                        message: "Error occurred when decoding"
                    },
                    MEDIA_ERR_SRC_NOT_SUPPORTED: {
                        code: 83,
                        message: "Video is not supported"
                    }
                },
                WITH_HTML_SUBTITLES: {
                    LOAD_FAILED: {
                        code: 70,
                        message: "Failed to load external subtitles"
                    }
                },
                WITH_STREAMING_SERVER: {
                    CONVERT_FAILED: {
                        code: 60,
                        message: "Your device does not support the stream"
                    }
                },
                UNKNOWN_ERROR: {
                    code: 1,
                    message: "Unknown error"
                },
                UNSUPPORTED_STREAM: {
                    code: 2,
                    message: "Stream is not supported"
                },
                STREAM_FAILED_TO_LOAD: {
                    code: 3,
                    message: "Stream failed to load"
                }
            }
        },
        4329: (e, t, r) => {
            "use strict";
            t.decode = t.parse = r(875), t.encode = t.stringify = r(5223)
        },
        4406: (e, t, r) => {
            var n = r(9413);
            e.exports = n
        },
        4412: e => {
            e.exports = function(e, t) {
                fetch("http://127.0.0.1:11470/tracks/" + encodeURIComponent(e)).then((function(e) {
                    return e.json()
                })).then((function(e) {
                    var r = e.filter((function(e) {
                            return "audio" === (e || {}).type
                        })),
                        n = e.filter((function(e) {
                            return "text" === (e || {}).type
                        }));
                    t({
                        audio: r,
                        subs: n
                    })
                })).catch((function(e) {
                    console.error(e), t(!1)
                }))
            }
        },
        4546: (e, t, r) => {
            const n = r(4877),
                i = {};
            for (const e of Object.keys(n)) i[n[e]] = e;
            const a = {
                rgb: {
                    channels: 3,
                    labels: "rgb"
                },
                hsl: {
                    channels: 3,
                    labels: "hsl"
                },
                hsv: {
                    channels: 3,
                    labels: "hsv"
                },
                hwb: {
                    channels: 3,
                    labels: "hwb"
                },
                cmyk: {
                    channels: 4,
                    labels: "cmyk"
                },
                xyz: {
                    channels: 3,
                    labels: "xyz"
                },
                lab: {
                    channels: 3,
                    labels: "lab"
                },
                lch: {
                    channels: 3,
                    labels: "lch"
                },
                hex: {
                    channels: 1,
                    labels: ["hex"]
                },
                keyword: {
                    channels: 1,
                    labels: ["keyword"]
                },
                ansi16: {
                    channels: 1,
                    labels: ["ansi16"]
                },
                ansi256: {
                    channels: 1,
                    labels: ["ansi256"]
                },
                hcg: {
                    channels: 3,
                    labels: ["h", "c", "g"]
                },
                apple: {
                    channels: 3,
                    labels: ["r16", "g16", "b16"]
                },
                gray: {
                    channels: 1,
                    labels: ["gray"]
                }
            };
            e.exports = a;
            for (const e of Object.keys(a)) {
                if (!("channels" in a[e])) throw new Error("missing channels property: " + e);
                if (!("labels" in a[e])) throw new Error("missing channel labels property: " + e);
                if (a[e].labels.length !== a[e].channels) throw new Error("channel and label counts mismatch: " + e);
                const {
                    channels: t,
                    labels: r
                } = a[e];
                delete a[e].channels, delete a[e].labels, Object.defineProperty(a[e], "channels", {
                    value: t
                }), Object.defineProperty(a[e], "labels", {
                    value: r
                })
            }
            a.rgb.hsl = function(e) {
                const t = e[0] / 255,
                    r = e[1] / 255,
                    n = e[2] / 255,
                    i = Math.min(t, r, n),
                    a = Math.max(t, r, n),
                    s = a - i;
                let o, l;
                a === i ? o = 0 : t === a ? o = (r - n) / s : r === a ? o = 2 + (n - t) / s : n === a && (o = 4 + (t - r) / s), o = Math.min(60 * o, 360), o < 0 && (o += 360);
                const u = (i + a) / 2;
                return l = a === i ? 0 : u <= .5 ? s / (a + i) : s / (2 - a - i), [o, 100 * l, 100 * u]
            }, a.rgb.hsv = function(e) {
                let t, r, n, i, a;
                const s = e[0] / 255,
                    o = e[1] / 255,
                    l = e[2] / 255,
                    u = Math.max(s, o, l),
                    c = u - Math.min(s, o, l),
                    d = function(e) {
                        return (u - e) / 6 / c + .5
                    };
                return 0 === c ? (i = 0, a = 0) : (a = c / u, t = d(s), r = d(o), n = d(l), s === u ? i = n - r : o === u ? i = 1 / 3 + t - n : l === u && (i = 2 / 3 + r - t), i < 0 ? i += 1 : i > 1 && (i -= 1)), [360 * i, 100 * a, 100 * u]
            }, a.rgb.hwb = function(e) {
                const t = e[0],
                    r = e[1];
                let n = e[2];
                const i = a.rgb.hsl(e)[0],
                    s = 1 / 255 * Math.min(t, Math.min(r, n));
                return n = 1 - 1 / 255 * Math.max(t, Math.max(r, n)), [i, 100 * s, 100 * n]
            }, a.rgb.cmyk = function(e) {
                const t = e[0] / 255,
                    r = e[1] / 255,
                    n = e[2] / 255,
                    i = Math.min(1 - t, 1 - r, 1 - n);
                return [100 * ((1 - t - i) / (1 - i) || 0), 100 * ((1 - r - i) / (1 - i) || 0), 100 * ((1 - n - i) / (1 - i) || 0), 100 * i]
            }, a.rgb.keyword = function(e) {
                const t = i[e];
                if (t) return t;
                let r, a = 1 / 0;
                for (const t of Object.keys(n)) {
                    const i = n[t],
                        l = (o = i, ((s = e)[0] - o[0]) ** 2 + (s[1] - o[1]) ** 2 + (s[2] - o[2]) ** 2);
                    l < a && (a = l, r = t)
                }
                var s, o;
                return r
            }, a.keyword.rgb = function(e) {
                return n[e]
            }, a.rgb.xyz = function(e) {
                let t = e[0] / 255,
                    r = e[1] / 255,
                    n = e[2] / 255;
                t = t > .04045 ? ((t + .055) / 1.055) ** 2.4 : t / 12.92, r = r > .04045 ? ((r + .055) / 1.055) ** 2.4 : r / 12.92, n = n > .04045 ? ((n + .055) / 1.055) ** 2.4 : n / 12.92;
                return [100 * (.4124 * t + .3576 * r + .1805 * n), 100 * (.2126 * t + .7152 * r + .0722 * n), 100 * (.0193 * t + .1192 * r + .9505 * n)]
            }, a.rgb.lab = function(e) {
                const t = a.rgb.xyz(e);
                let r = t[0],
                    n = t[1],
                    i = t[2];
                r /= 95.047, n /= 100, i /= 108.883, r = r > .008856 ? r ** (1 / 3) : 7.787 * r + 16 / 116, n = n > .008856 ? n ** (1 / 3) : 7.787 * n + 16 / 116, i = i > .008856 ? i ** (1 / 3) : 7.787 * i + 16 / 116;
                return [116 * n - 16, 500 * (r - n), 200 * (n - i)]
            }, a.hsl.rgb = function(e) {
                const t = e[0] / 360,
                    r = e[1] / 100,
                    n = e[2] / 100;
                let i, a, s;
                if (0 === r) return s = 255 * n, [s, s, s];
                i = n < .5 ? n * (1 + r) : n + r - n * r;
                const o = 2 * n - i,
                    l = [0, 0, 0];
                for (let e = 0; e < 3; e++) a = t + 1 / 3 * -(e - 1), a < 0 && a++, a > 1 && a--, s = 6 * a < 1 ? o + 6 * (i - o) * a : 2 * a < 1 ? i : 3 * a < 2 ? o + (i - o) * (2 / 3 - a) * 6 : o, l[e] = 255 * s;
                return l
            }, a.hsl.hsv = function(e) {
                const t = e[0];
                let r = e[1] / 100,
                    n = e[2] / 100,
                    i = r;
                const a = Math.max(n, .01);
                n *= 2, r *= n <= 1 ? n : 2 - n, i *= a <= 1 ? a : 2 - a;
                return [t, 100 * (0 === n ? 2 * i / (a + i) : 2 * r / (n + r)), 100 * ((n + r) / 2)]
            }, a.hsv.rgb = function(e) {
                const t = e[0] / 60,
                    r = e[1] / 100;
                let n = e[2] / 100;
                const i = Math.floor(t) % 6,
                    a = t - Math.floor(t),
                    s = 255 * n * (1 - r),
                    o = 255 * n * (1 - r * a),
                    l = 255 * n * (1 - r * (1 - a));
                switch (n *= 255, i) {
                    case 0:
                        return [n, l, s];
                    case 1:
                        return [o, n, s];
                    case 2:
                        return [s, n, l];
                    case 3:
                        return [s, o, n];
                    case 4:
                        return [l, s, n];
                    case 5:
                        return [n, s, o]
                }
            }, a.hsv.hsl = function(e) {
                const t = e[0],
                    r = e[1] / 100,
                    n = e[2] / 100,
                    i = Math.max(n, .01);
                let a, s;
                s = (2 - r) * n;
                const o = (2 - r) * i;
                return a = r * i, a /= o <= 1 ? o : 2 - o, a = a || 0, s /= 2, [t, 100 * a, 100 * s]
            }, a.hwb.rgb = function(e) {
                const t = e[0] / 360;
                let r = e[1] / 100,
                    n = e[2] / 100;
                const i = r + n;
                let a;
                i > 1 && (r /= i, n /= i);
                const s = Math.floor(6 * t),
                    o = 1 - n;
                a = 6 * t - s, 1 & s && (a = 1 - a);
                const l = r + a * (o - r);
                let u, c, d;
                switch (s) {
                    default:
                        case 6:
                        case 0:
                        u = o,
                    c = l,
                    d = r;
                    break;
                    case 1:
                            u = l,
                        c = o,
                        d = r;
                        break;
                    case 2:
                            u = r,
                        c = o,
                        d = l;
                        break;
                    case 3:
                            u = r,
                        c = l,
                        d = o;
                        break;
                    case 4:
                            u = l,
                        c = r,
                        d = o;
                        break;
                    case 5:
                            u = o,
                        c = r,
                        d = l
                }
                return [255 * u, 255 * c, 255 * d]
            }, a.cmyk.rgb = function(e) {
                const t = e[0] / 100,
                    r = e[1] / 100,
                    n = e[2] / 100,
                    i = e[3] / 100;
                return [255 * (1 - Math.min(1, t * (1 - i) + i)), 255 * (1 - Math.min(1, r * (1 - i) + i)), 255 * (1 - Math.min(1, n * (1 - i) + i))]
            }, a.xyz.rgb = function(e) {
                const t = e[0] / 100,
                    r = e[1] / 100,
                    n = e[2] / 100;
                let i, a, s;
                return i = 3.2406 * t + -1.5372 * r + -.4986 * n, a = -.9689 * t + 1.8758 * r + .0415 * n, s = .0557 * t + -.204 * r + 1.057 * n, i = i > .0031308 ? 1.055 * i ** (1 / 2.4) - .055 : 12.92 * i, a = a > .0031308 ? 1.055 * a ** (1 / 2.4) - .055 : 12.92 * a, s = s > .0031308 ? 1.055 * s ** (1 / 2.4) - .055 : 12.92 * s, i = Math.min(Math.max(0, i), 1), a = Math.min(Math.max(0, a), 1), s = Math.min(Math.max(0, s), 1), [255 * i, 255 * a, 255 * s]
            }, a.xyz.lab = function(e) {
                let t = e[0],
                    r = e[1],
                    n = e[2];
                t /= 95.047, r /= 100, n /= 108.883, t = t > .008856 ? t ** (1 / 3) : 7.787 * t + 16 / 116, r = r > .008856 ? r ** (1 / 3) : 7.787 * r + 16 / 116, n = n > .008856 ? n ** (1 / 3) : 7.787 * n + 16 / 116;
                return [116 * r - 16, 500 * (t - r), 200 * (r - n)]
            }, a.lab.xyz = function(e) {
                let t, r, n;
                r = (e[0] + 16) / 116, t = e[1] / 500 + r, n = r - e[2] / 200;
                const i = r ** 3,
                    a = t ** 3,
                    s = n ** 3;
                return r = i > .008856 ? i : (r - 16 / 116) / 7.787, t = a > .008856 ? a : (t - 16 / 116) / 7.787, n = s > .008856 ? s : (n - 16 / 116) / 7.787, t *= 95.047, r *= 100, n *= 108.883, [t, r, n]
            }, a.lab.lch = function(e) {
                const t = e[0],
                    r = e[1],
                    n = e[2];
                let i;
                i = 360 * Math.atan2(n, r) / 2 / Math.PI, i < 0 && (i += 360);
                return [t, Math.sqrt(r * r + n * n), i]
            }, a.lch.lab = function(e) {
                const t = e[0],
                    r = e[1],
                    n = e[2] / 360 * 2 * Math.PI;
                return [t, r * Math.cos(n), r * Math.sin(n)]
            }, a.rgb.ansi16 = function(e, t = null) {
                const [r, n, i] = e;
                let s = null === t ? a.rgb.hsv(e)[2] : t;
                if (s = Math.round(s / 50), 0 === s) return 30;
                let o = 30 + (Math.round(i / 255) << 2 | Math.round(n / 255) << 1 | Math.round(r / 255));
                return 2 === s && (o += 60), o
            }, a.hsv.ansi16 = function(e) {
                return a.rgb.ansi16(a.hsv.rgb(e), e[2])
            }, a.rgb.ansi256 = function(e) {
                const t = e[0],
                    r = e[1],
                    n = e[2];
                if (t === r && r === n) return t < 8 ? 16 : t > 248 ? 231 : Math.round((t - 8) / 247 * 24) + 232;
                return 16 + 36 * Math.round(t / 255 * 5) + 6 * Math.round(r / 255 * 5) + Math.round(n / 255 * 5)
            }, a.ansi16.rgb = function(e) {
                let t = e % 10;
                if (0 === t || 7 === t) return e > 50 && (t += 3.5), t = t / 10.5 * 255, [t, t, t];
                const r = .5 * (1 + ~~(e > 50));
                return [(1 & t) * r * 255, (t >> 1 & 1) * r * 255, (t >> 2 & 1) * r * 255]
            }, a.ansi256.rgb = function(e) {
                if (e >= 232) {
                    const t = 10 * (e - 232) + 8;
                    return [t, t, t]
                }
                let t;
                e -= 16;
                return [Math.floor(e / 36) / 5 * 255, Math.floor((t = e % 36) / 6) / 5 * 255, t % 6 / 5 * 255]
            }, a.rgb.hex = function(e) {
                const t = (((255 & Math.round(e[0])) << 16) + ((255 & Math.round(e[1])) << 8) + (255 & Math.round(e[2]))).toString(16).toUpperCase();
                return "000000".substring(t.length) + t
            }, a.hex.rgb = function(e) {
                const t = e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
                if (!t) return [0, 0, 0];
                let r = t[0];
                3 === t[0].length && (r = r.split("").map((e => e + e)).join(""));
                const n = parseInt(r, 16);
                return [n >> 16 & 255, n >> 8 & 255, 255 & n]
            }, a.rgb.hcg = function(e) {
                const t = e[0] / 255,
                    r = e[1] / 255,
                    n = e[2] / 255,
                    i = Math.max(Math.max(t, r), n),
                    a = Math.min(Math.min(t, r), n),
                    s = i - a;
                let o, l;
                return o = s < 1 ? a / (1 - s) : 0, l = s <= 0 ? 0 : i === t ? (r - n) / s % 6 : i === r ? 2 + (n - t) / s : 4 + (t - r) / s, l /= 6, l %= 1, [360 * l, 100 * s, 100 * o]
            }, a.hsl.hcg = function(e) {
                const t = e[1] / 100,
                    r = e[2] / 100,
                    n = r < .5 ? 2 * t * r : 2 * t * (1 - r);
                let i = 0;
                return n < 1 && (i = (r - .5 * n) / (1 - n)), [e[0], 100 * n, 100 * i]
            }, a.hsv.hcg = function(e) {
                const t = e[1] / 100,
                    r = e[2] / 100,
                    n = t * r;
                let i = 0;
                return n < 1 && (i = (r - n) / (1 - n)), [e[0], 100 * n, 100 * i]
            }, a.hcg.rgb = function(e) {
                const t = e[0] / 360,
                    r = e[1] / 100,
                    n = e[2] / 100;
                if (0 === r) return [255 * n, 255 * n, 255 * n];
                const i = [0, 0, 0],
                    a = t % 1 * 6,
                    s = a % 1,
                    o = 1 - s;
                let l = 0;
                switch (Math.floor(a)) {
                    case 0:
                        i[0] = 1, i[1] = s, i[2] = 0;
                        break;
                    case 1:
                        i[0] = o, i[1] = 1, i[2] = 0;
                        break;
                    case 2:
                        i[0] = 0, i[1] = 1, i[2] = s;
                        break;
                    case 3:
                        i[0] = 0, i[1] = o, i[2] = 1;
                        break;
                    case 4:
                        i[0] = s, i[1] = 0, i[2] = 1;
                        break;
                    default:
                        i[0] = 1, i[1] = 0, i[2] = o
                }
                return l = (1 - r) * n, [255 * (r * i[0] + l), 255 * (r * i[1] + l), 255 * (r * i[2] + l)]
            }, a.hcg.hsv = function(e) {
                const t = e[1] / 100,
                    r = t + e[2] / 100 * (1 - t);
                let n = 0;
                return r > 0 && (n = t / r), [e[0], 100 * n, 100 * r]
            }, a.hcg.hsl = function(e) {
                const t = e[1] / 100,
                    r = e[2] / 100 * (1 - t) + .5 * t;
                let n = 0;
                return r > 0 && r < .5 ? n = t / (2 * r) : r >= .5 && r < 1 && (n = t / (2 * (1 - r))), [e[0], 100 * n, 100 * r]
            }, a.hcg.hwb = function(e) {
                const t = e[1] / 100,
                    r = t + e[2] / 100 * (1 - t);
                return [e[0], 100 * (r - t), 100 * (1 - r)]
            }, a.hwb.hcg = function(e) {
                const t = e[1] / 100,
                    r = 1 - e[2] / 100,
                    n = r - t;
                let i = 0;
                return n < 1 && (i = (r - n) / (1 - n)), [e[0], 100 * n, 100 * i]
            }, a.apple.rgb = function(e) {
                return [e[0] / 65535 * 255, e[1] / 65535 * 255, e[2] / 65535 * 255]
            }, a.rgb.apple = function(e) {
                return [e[0] / 255 * 65535, e[1] / 255 * 65535, e[2] / 255 * 65535]
            }, a.gray.rgb = function(e) {
                return [e[0] / 100 * 255, e[0] / 100 * 255, e[0] / 100 * 255]
            }, a.gray.hsl = function(e) {
                return [0, 0, e[0]]
            }, a.gray.hsv = a.gray.hsl, a.gray.hwb = function(e) {
                return [0, 100, e[0]]
            }, a.gray.cmyk = function(e) {
                return [0, 0, 0, e[0]]
            }, a.gray.lab = function(e) {
                return [e[0], 0, 0]
            }, a.gray.hex = function(e) {
                const t = 255 & Math.round(e[0] / 100 * 255),
                    r = ((t << 16) + (t << 8) + t).toString(16).toUpperCase();
                return "000000".substring(r.length) + r
            }, a.rgb.gray = function(e) {
                return [(e[0] + e[1] + e[2]) / 3 / 255 * 100]
            }
        },
        4601: (e, t, r) => {
            var n = r(1417),
                i = r(2410);
            e.exports = {
                render: function(e, t) {
                    var r = [],
                        a = i(e.times, t);
                    if (-1 !== a)
                        for (var s = e[e.times[a]], o = 0; o < s.length; o++) {
                            var l = n.WebVTT.convertCueToDOMTree(window, s[o].text);
                            r.push(l)
                        }
                    return r
                }
            }
        },
        4603: (e, t, r) => {
            var n = r(1809);
            e.exports = n
        },
        4724: e => {
            e.exports = function(e, t) {
                return t.includes("loaded") ? new Promise((function(t, r) {
                    var n = null;
                    e.on("propChanged", (function(e, i) {
                        "loaded" === e && null !== i && null === n && (n = i, !0 === i ? t(!0) : !1 === i && r(Error("Player failed to load, will not retrieve video params")))
                    })), e.dispatch({
                        type: "observeProp",
                        propName: "loaded"
                    })
                })) : Promise.resolve(!0)
            }
        },
        4877: e => {
            "use strict";
            e.exports = {
                aliceblue: [240, 248, 255],
                antiquewhite: [250, 235, 215],
                aqua: [0, 255, 255],
                aquamarine: [127, 255, 212],
                azure: [240, 255, 255],
                beige: [245, 245, 220],
                bisque: [255, 228, 196],
                black: [0, 0, 0],
                blanchedalmond: [255, 235, 205],
                blue: [0, 0, 255],
                blueviolet: [138, 43, 226],
                brown: [165, 42, 42],
                burlywood: [222, 184, 135],
                cadetblue: [95, 158, 160],
                chartreuse: [127, 255, 0],
                chocolate: [210, 105, 30],
                coral: [255, 127, 80],
                cornflowerblue: [100, 149, 237],
                cornsilk: [255, 248, 220],
                crimson: [220, 20, 60],
                cyan: [0, 255, 255],
                darkblue: [0, 0, 139],
                darkcyan: [0, 139, 139],
                darkgoldenrod: [184, 134, 11],
                darkgray: [169, 169, 169],
                darkgreen: [0, 100, 0],
                darkgrey: [169, 169, 169],
                darkkhaki: [189, 183, 107],
                darkmagenta: [139, 0, 139],
                darkolivegreen: [85, 107, 47],
                darkorange: [255, 140, 0],
                darkorchid: [153, 50, 204],
                darkred: [139, 0, 0],
                darksalmon: [233, 150, 122],
                darkseagreen: [143, 188, 143],
                darkslateblue: [72, 61, 139],
                darkslategray: [47, 79, 79],
                darkslategrey: [47, 79, 79],
                darkturquoise: [0, 206, 209],
                darkviolet: [148, 0, 211],
                deeppink: [255, 20, 147],
                deepskyblue: [0, 191, 255],
                dimgray: [105, 105, 105],
                dimgrey: [105, 105, 105],
                dodgerblue: [30, 144, 255],
                firebrick: [178, 34, 34],
                floralwhite: [255, 250, 240],
                forestgreen: [34, 139, 34],
                fuchsia: [255, 0, 255],
                gainsboro: [220, 220, 220],
                ghostwhite: [248, 248, 255],
                gold: [255, 215, 0],
                goldenrod: [218, 165, 32],
                gray: [128, 128, 128],
                green: [0, 128, 0],
                greenyellow: [173, 255, 47],
                grey: [128, 128, 128],
                honeydew: [240, 255, 240],
                hotpink: [255, 105, 180],
                indianred: [205, 92, 92],
                indigo: [75, 0, 130],
                ivory: [255, 255, 240],
                khaki: [240, 230, 140],
                lavender: [230, 230, 250],
                lavenderblush: [255, 240, 245],
                lawngreen: [124, 252, 0],
                lemonchiffon: [255, 250, 205],
                lightblue: [173, 216, 230],
                lightcoral: [240, 128, 128],
                lightcyan: [224, 255, 255],
                lightgoldenrodyellow: [250, 250, 210],
                lightgray: [211, 211, 211],
                lightgreen: [144, 238, 144],
                lightgrey: [211, 211, 211],
                lightpink: [255, 182, 193],
                lightsalmon: [255, 160, 122],
                lightseagreen: [32, 178, 170],
                lightskyblue: [135, 206, 250],
                lightslategray: [119, 136, 153],
                lightslategrey: [119, 136, 153],
                lightsteelblue: [176, 196, 222],
                lightyellow: [255, 255, 224],
                lime: [0, 255, 0],
                limegreen: [50, 205, 50],
                linen: [250, 240, 230],
                magenta: [255, 0, 255],
                maroon: [128, 0, 0],
                mediumaquamarine: [102, 205, 170],
                mediumblue: [0, 0, 205],
                mediumorchid: [186, 85, 211],
                mediumpurple: [147, 112, 219],
                mediumseagreen: [60, 179, 113],
                mediumslateblue: [123, 104, 238],
                mediumspringgreen: [0, 250, 154],
                mediumturquoise: [72, 209, 204],
                mediumvioletred: [199, 21, 133],
                midnightblue: [25, 25, 112],
                mintcream: [245, 255, 250],
                mistyrose: [255, 228, 225],
                moccasin: [255, 228, 181],
                navajowhite: [255, 222, 173],
                navy: [0, 0, 128],
                oldlace: [253, 245, 230],
                olive: [128, 128, 0],
                olivedrab: [107, 142, 35],
                orange: [255, 165, 0],
                orangered: [255, 69, 0],
                orchid: [218, 112, 214],
                palegoldenrod: [238, 232, 170],
                palegreen: [152, 251, 152],
                paleturquoise: [175, 238, 238],
                palevioletred: [219, 112, 147],
                papayawhip: [255, 239, 213],
                peachpuff: [255, 218, 185],
                peru: [205, 133, 63],
                pink: [255, 192, 203],
                plum: [221, 160, 221],
                powderblue: [176, 224, 230],
                purple: [128, 0, 128],
                rebeccapurple: [102, 51, 153],
                red: [255, 0, 0],
                rosybrown: [188, 143, 143],
                royalblue: [65, 105, 225],
                saddlebrown: [139, 69, 19],
                salmon: [250, 128, 114],
                sandybrown: [244, 164, 96],
                seagreen: [46, 139, 87],
                seashell: [255, 245, 238],
                sienna: [160, 82, 45],
                silver: [192, 192, 192],
                skyblue: [135, 206, 235],
                slateblue: [106, 90, 205],
                slategray: [112, 128, 144],
                slategrey: [112, 128, 144],
                snow: [255, 250, 250],
                springgreen: [0, 255, 127],
                steelblue: [70, 130, 180],
                tan: [210, 180, 140],
                teal: [0, 128, 128],
                thistle: [216, 191, 216],
                tomato: [255, 99, 71],
                turquoise: [64, 224, 208],
                violet: [238, 130, 238],
                wheat: [245, 222, 179],
                white: [255, 255, 255],
                whitesmoke: [245, 245, 245],
                yellow: [255, 255, 0],
                yellowgreen: [154, 205, 50]
            }
        },
        4989: (e, t, r) => {
            var n = r(8868);

            function i(e, t, r) {
                var i = r && "string" == typeof r.videoHash ? r.videoHash : null,
                    a = r && isFinite(r.videoSize) ? r.videoSize : null;
                if ("string" == typeof i && null !== a && isFinite(a)) return Promise.resolve({
                    hash: i,
                    size: a
                });
                var s = new URLSearchParams([
                    ["videoUrl", t]
                ]);
                return fetch(n.resolve(e, "/opensubHash?" + s.toString())).then((function(e) {
                    if (e.ok) return e.json();
                    throw new Error(e.status + " (" + e.statusText + ")")
                })).then((function(e) {
                    if (e.error) throw new Error(e.error);
                    return {
                        hash: "string" == typeof i ? i : e.result && "string" == typeof e.result.hash ? e.result.hash : null,
                        size: null !== a && isFinite(a) ? a : e.result && (e.result.size, 1) ? e.result.size : null
                    }
                }))
            }

            function a(e, t, r, i, a) {
                return a && "string" == typeof a.filename ? Promise.resolve(a.filename) : r ? fetch(n.resolve(e, "/" + encodeURIComponent(r) + "/" + encodeURIComponent(i) + "/stats.json")).then((function(e) {
                    if (e.ok) return e.json();
                    throw new Error(e.status + " (" + e.statusText + ")")
                })).then((function(e) {
                    if (!e || "string" != typeof e.streamName) throw new Error("Could not retrieve filename from torrent");
                    return e.streamName
                })) : Promise.resolve(decodeURIComponent(t.split("/").pop()))
            }
            e.exports = function(e, t, r, n, s) {
                return Promise.allSettled([i(e, t, s), a(e, t, r, n, s)]).then((function(e) {
                    var t = {
                        hash: null,
                        size: null,
                        filename: null
                    };
                    return "fulfilled" === e[0].status ? (t.hash = e[0].value.hash, t.size = e[0].value.size) : e[0].reason && console.error(e[0].reason), "fulfilled" === e[1].status ? t.filename = e[1].value : e[1].reason && console.error(e[1].reason), t
                }))
            }
        },
        4993: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(8742),
                o = r(4044),
                l = r(4412),
                u = r(7787),
                c = /^\{(\\an[1-8])+\}/i;

            function d(e) {
                var t = !0,
                    r = 1,
                    d = null,
                    h = null,
                    f = (e = e || {}).containerElement;
                if (!(f instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var g, p = u(e.transport),
                    m = !1,
                    v = 100,
                    y = 0,
                    T = "rgb(255, 255, 255)",
                    b = "rgba(0, 0, 0, 0)",
                    E = "rgb(34, 34, 34)",
                    S = 1,
                    A = document.createElement("object");
                A.type = "application/avplayer", A.style.width = "100%", A.style.height = "100%", A.style.backgroundColor = "black";
                var k = !1;
                async function L() {
                    if (g) {
                        var e = await N("time"),
                            t = g.duration - (e - g.now);
                        t > 0 && R(t, g.text)
                    }
                }
                async function R(e, t) {
                    if (!k) {
                        var n = await N("time"),
                            i = t.replace(c, "");
                        for (g = {
                                duration: e,
                                text: i,
                                now: n
                            }, I && (clearTimeout(I), I = !1); w.hasChildNodes();) w.removeChild(w.lastChild);
                        w.style.bottom = y + "%", w.style.opacity = S;
                        var a = document.createElement("span");
                        a.innerHTML = i, a.style.display = "inline-block", a.style.padding = "0.2em", a.style.fontSize = Math.floor(v / 25) + "vmin", a.style.color = T, a.style.backgroundColor = b, a.style.textShadow = "1px 1px 0.1em " + E, w.appendChild(a), w.appendChild(document.createElement("br")), e && (I = setTimeout((function() {
                            for (; w.hasChildNodes();) w.removeChild(w.lastChild)
                        }), parseInt(e * r)))
                    }
                }
                var I = !1;
                p.setListener({
                    onbufferingstart: function() {
                        t = !0, B("buffering")
                    },
                    onbufferingprogress: function() {
                        t = !0, B("buffering")
                    },
                    onbufferingcomplete: function() {
                        t = !1, B("buffering")
                    },
                    oncurrentplaytime: function() {
                        B("time")
                    },
                    onsubtitlechange: function(e, t) {
                        R(e, t)
                    },
                    onstreamcompleted: function() {
                        D.emit("ended")
                    }
                }), f.appendChild(A);
                var w = document.createElement("div");
                w.style.position = "absolute", w.style.right = "0", w.style.bottom = "0", w.style.left = "0", w.style.zIndex = "1", w.style.textAlign = "center", f.style.position = "relative", f.style.zIndex = "0", f.appendChild(w);
                var D = new n,
                    C = !1,
                    x = null,
                    _ = 0,
                    O = null,
                    P = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        subtitlesTracks: !1,
                        selectedSubtitlesTrackId: !1,
                        subtitlesOffset: !1,
                        subtitlesSize: !1,
                        subtitlesTextColor: !1,
                        subtitlesBackgroundColor: !1,
                        subtitlesOutlineColor: !1,
                        subtitlesOpacity: !1,
                        audioTracks: !1,
                        selectedAudioTrackId: !1,
                        playbackSpeed: !1
                    },
                    M = !1,
                    F = {
                        audio: [],
                        subs: []
                    };
                async function N(e) {
                    switch (e) {
                        case "stream":
                            return x;
                        case "loaded":
                            return O;
                        case "paused":
                            if (null === x) return null;
                            var n = !("PAUSED" !== await p.getState());
                            return !n && m && (p.setSelectTrack("AUDIO", parseInt(m.replace("EMBEDDED_", ""))), m = !1), n;
                        case "time":
                            var i = await p.getCurrentTime();
                            return null !== x && null !== i && isFinite(i) ? Math.floor(i) : null;
                        case "duration":
                            var a = await p.getDuration();
                            return null !== x && null !== a && isFinite(a) ? Math.floor(a) : null;
                        case "buffering":
                            return null === x ? null : t;
                        case "subtitlesTracks":
                            if (null === x) return [];
                            for (var s = await p.getTotalTrackInfo(), o = [], l = 0; l < s.length; l++)
                                if ("TEXT" === s[l].type) {
                                    var u = s[l],
                                        c = "EMBEDDED_" + String(u.index);
                                    d || o.length || (d = c);
                                    var f = {};
                                    try {
                                        f = JSON.parse(u.extra_info)
                                    } catch (e) {}
                                    var g = "string" == typeof f.track_lang && f.track_lang.length > 0 ? f.track_lang.trim() : null,
                                        A = null;
                                    if (((F || {}).subs || []).length)(D = F.subs.find((function(e) {
                                        return (e || {}).id - 1 === u.index
                                    }))) && (g = D.lang || "eng", A = D.label || null);
                                    o.push({
                                        id: c,
                                        lang: g,
                                        label: A,
                                        origin: "EMBEDDED",
                                        embedded: !0,
                                        mode: k || c !== d ? "disabled" : "showing"
                                    })
                                }
                            return o;
                        case "selectedSubtitlesTrackId":
                            if (null === x || k) return null;
                            var L = await p.getCurrentStreamInfo();
                            for (l = 0; l < L.length; l++)
                                if ("TEXT" === L[l].type) {
                                    M = L[l].index;
                                    break
                                }
                            return M ? "EMBEDDED_" + String(M) : null;
                        case "subtitlesOffset":
                            return C ? null : y;
                        case "subtitlesSize":
                            return C ? null : v;
                        case "subtitlesTextColor":
                            return C ? null : T;
                        case "subtitlesBackgroundColor":
                            return C ? null : b;
                        case "subtitlesOutlineColor":
                            return C ? null : E;
                        case "subtitlesOpacity":
                            return C ? null : S;
                        case "audioTracks":
                            if (null === x) return [];
                            s = await p.getTotalTrackInfo();
                            var R = [];
                            for (l = 0; l < s.length; l++)
                                if ("AUDIO" === s[l].type) {
                                    var I = s[l],
                                        w = "EMBEDDED_" + String(I.index);
                                    h || R.length || (h = w);
                                    f = {};
                                    try {
                                        f = JSON.parse(I.extra_info)
                                    } catch (e) {}
                                    var D, _ = "string" == typeof f.language && f.language.length > 0 ? f.language : null,
                                        P = null;
                                    if (((F || {}).audio || []).length)(D = F.audio.find((function(e) {
                                        return (e || {}).id - 1 === I.index
                                    }))) && (_ = D.lang || "eng", P = D.label || null);
                                    R.push({
                                        id: w,
                                        lang: _,
                                        label: P,
                                        origin: "EMBEDDED",
                                        embedded: !0,
                                        mode: w === h ? "showing" : "disabled"
                                    })
                                }
                            return R;
                        case "selectedAudioTrackId":
                            if (null === x) return null;
                            if (m) return m;
                            L = await p.getCurrentStreamInfo();
                            var M = !1;
                            for (l = 0; l < L.length; l++)
                                if ("AUDIO" === L[l].type) {
                                    M = L[l].index;
                                    break
                                }
                            return !1 !== M ? "EMBEDDED_" + String(M) : null;
                        case "playbackSpeed":
                            return C || null === r || !isFinite(r) ? null : r;
                        default:
                            return null
                    }
                }

                function U(e) {
                    D.emit("error", e), e.critical && G("unload")
                }
                async function B(e) {
                    if (P[e]) {
                        var t = await N(e);
                        D.emit("propChanged", e, t)
                    }
                }

                function G(e, t) {
                    switch (e) {
                        case "load":
                            if (t && t.stream && "string" == typeof t.stream.url) {
                                if ((x = t.stream) !== t.stream) return;
                                B("buffering");
                                var r = !1,
                                    n = navigator.userAgent.match(/Tizen (\d+\.\d+)/i);
                                n && n[1] && (r = parseFloat(n[1])), (!r || r >= 6) && (M || null === x || (M = !0, l(x.url, (function(e) {
                                    e && (F = e), ((F || {}).subs || []).length && B("subtitlesTracks"), ((F || {}).audio || []).length && B("audioTracks")
                                })))), p.open(x.url), p.setDisplayRect(0, 0, window.innerWidth, window.innerHeight), p.setDisplayMethod("PLAYER_DISPLAY_MODE_LETTER_BOX"), p.seekTo(null !== t.time && isFinite(t.time) ? parseInt(t.time, 10) : 0), p.prepareAsync((function() {
                                    B("duration"), p.play(), O = !0, B("loaded"), B("stream"), B("paused"), B("time"), B("duration"), B("subtitlesTracks"), B("selectedSubtitlesTrackId"), B("audioTracks"), B("selectedAudioTrackId")
                                }), (function(e) {
                                    if (_ < 5) {
                                        _++;
                                        try {
                                            p.stop()
                                        } catch (e) {}
                                        G("load", t)
                                    } else U(Object.assign({}, o.STREAM_FAILED_TO_LOAD, {
                                        critical: !0,
                                        stream: t ? t.stream : null,
                                        error: e
                                    }))
                                }))
                            } else U(Object.assign({}, o.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: t ? t.stream : null
                            }));
                            break;
                        case "unload":
                            x = null, p.stop(), O = !1, B("loaded"), B("stream"), B("paused"), B("time"), B("duration"), B("buffering"), B("subtitlesTracks"), B("selectedSubtitlesTrackId"), B("audioTracks"), B("selectedAudioTrackId");
                            break;
                        case "destroy":
                            G("unload"), C = !0, p.stop(), B("subtitlesOffset"), B("subtitlesSize"), B("subtitlesTextColor"), B("subtitlesBackgroundColor"), B("subtitlesOutlineColor"), B("subtitlesOpacity"), B("playbackSpeed"), D.removeAllListeners(), f.removeChild(A)
                    }
                }
                this.on = function(e, t) {
                    if (C) throw new Error("Video is destroyed");
                    D.on(e, t)
                }, this.dispatch = function(e) {
                    if (C) throw new Error("Video is destroyed");
                    if (e) switch ((e = a(i(e))).type) {
                        case "observeProp":
                            return void async function(e) {
                                if (P.hasOwnProperty(e)) {
                                    var t = await N(e);
                                    D.emit("propValue", e, t), P[e] = !0
                                }
                            }(e.propName);
                        case "setProp":
                            return void async function(e, t) {
                                switch (e) {
                                    case "paused":
                                        if (null !== x) {
                                            var n = !!t;
                                            n ? p.pause() : p.play(), n ? I && clearTimeout(I) : L()
                                        }
                                        B("paused");
                                        var i = await N("paused");
                                        setTimeout((async function() {
                                            await N("paused") !== i && B("paused")
                                        }), 1e3);
                                        break;
                                    case "time":
                                        null !== x && null !== t && isFinite(t) && (p.seekTo(parseInt(t, 10)), R(1, ""), B("time"));
                                        break;
                                    case "selectedSubtitlesTrackId":
                                        if (null !== x)
                                            if (0 === (d || "").indexOf("EMBEDDED_")) {
                                                if (-1 === (t || "").indexOf("EMBEDDED_")) return R(1, ""), k = !0, void B("selectedSubtitlesTrackId");
                                                k = !1, d = t;
                                                var a = (await N("subtitlesTracks")).find((function(e) {
                                                    return e.id === t
                                                }));
                                                p.setSelectTrack("TEXT", parseInt(d.replace("EMBEDDED_", ""))), a && (D.emit("subtitlesTrackLoaded", a), B("selectedSubtitlesTrackId"))
                                            } else t || (R(1, ""), k = !0, B("selectedSubtitlesTrackId"));
                                        break;
                                    case "subtitlesOffset":
                                        null !== t && isFinite(t) && (y = Math.max(0, Math.min(100, parseInt(t, 10))), L(), B("subtitlesOffset"));
                                        break;
                                    case "subtitlesSize":
                                        null !== t && isFinite(t) && (v = Math.max(0, parseInt(t, 10)), L(), B("subtitlesSize"));
                                        break;
                                    case "subtitlesTextColor":
                                        if ("string" == typeof t) {
                                            try {
                                                T = s(t).rgb().string()
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            L(), B("subtitlesTextColor")
                                        }
                                        break;
                                    case "subtitlesBackgroundColor":
                                        if ("string" == typeof t) {
                                            try {
                                                b = s(t).rgb().string()
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            L(), B("subtitlesBackgroundColor")
                                        }
                                        break;
                                    case "subtitlesOutlineColor":
                                        if ("string" == typeof t) {
                                            try {
                                                E = s(t).rgb().string()
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            L(), B("subtitlesOutlineColor")
                                        }
                                        break;
                                    case "subtitlesOpacity":
                                        if ("number" == typeof t) {
                                            try {
                                                S = Math.min(Math.max(t / 100, 0), 1)
                                            } catch (e) {
                                                console.error("Tizen player with HTML Subtitles", e)
                                            }
                                            L(), B("subtitlesOpacity")
                                        }
                                        break;
                                    case "selectedAudioTrackId":
                                        if (null !== x) {
                                            h = t;
                                            var o = (await N("audioTracks")).find((function(e) {
                                                return e.id === t
                                            }));
                                            await N("paused") ? (m = t, B("selectedAudioTrackId")) : p.setSelectTrack("AUDIO", parseInt(h.replace("EMBEDDED_", ""))), o && (D.emit("audioTrackLoaded", o), B("selectedAudioTrackId"))
                                        }
                                        break;
                                    case "playbackSpeed":
                                        if (null !== t && isFinite(t)) {
                                            r = parseFloat(t);
                                            try {
                                                p.setSpeed(r)
                                            } catch (e) {}
                                            B("playbackSpeed")
                                        }
                                }
                            }(e.propName, e.propValue);
                        case "command":
                            return void G(e.commandName, e.commandArgs)
                    }
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            d.canPlayStream = function() {
                return Promise.resolve(!0)
            }, d.manifest = {
                name: "TizenVideo",
                external: !1,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "audioTracks", "selectedAudioTrackId", "subtitlesTracks", "selectedSubtitlesTrackId", "subtitlesOffset", "subtitlesSize", "subtitlesTextColor", "subtitlesBackgroundColor", "subtitlesOutlineColor", "subtitlesOpacity", "playbackSpeed"],
                commands: ["load", "unload", "destroy"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded", "audioTrackLoaded"]
            }, e.exports = d
        },
        5126: (e, t, r) => {
            e = r.nmd(e);
            var n = "__lodash_hash_undefined__",
                i = 9007199254740991,
                a = "[object Arguments]",
                s = "[object Boolean]",
                o = "[object Date]",
                l = "[object Function]",
                u = "[object GeneratorFunction]",
                c = "[object Map]",
                d = "[object Number]",
                h = "[object Object]",
                f = "[object Promise]",
                g = "[object RegExp]",
                p = "[object Set]",
                m = "[object String]",
                v = "[object Symbol]",
                y = "[object WeakMap]",
                T = "[object ArrayBuffer]",
                b = "[object DataView]",
                E = "[object Float32Array]",
                S = "[object Float64Array]",
                A = "[object Int8Array]",
                k = "[object Int16Array]",
                L = "[object Int32Array]",
                R = "[object Uint8Array]",
                I = "[object Uint8ClampedArray]",
                w = "[object Uint16Array]",
                D = "[object Uint32Array]",
                C = /\w*$/,
                x = /^\[object .+?Constructor\]$/,
                _ = /^(?:0|[1-9]\d*)$/,
                O = {};
            O[a] = O["[object Array]"] = O[T] = O[b] = O[s] = O[o] = O[E] = O[S] = O[A] = O[k] = O[L] = O[c] = O[d] = O[h] = O[g] = O[p] = O[m] = O[v] = O[R] = O[I] = O[w] = O[D] = !0, O["[object Error]"] = O[l] = O[y] = !1;
            var P = "object" == typeof r.g && r.g && r.g.Object === Object && r.g,
                M = "object" == typeof self && self && self.Object === Object && self,
                F = P || M || Function("return this")(),
                N = t && !t.nodeType && t,
                U = N && e && !e.nodeType && e,
                B = U && U.exports === N;

            function G(e, t) {
                return e.set(t[0], t[1]), e
            }

            function V(e, t) {
                return e.add(t), e
            }

            function H(e, t, r, n) {
                var i = -1,
                    a = e ? e.length : 0;
                for (n && a && (r = e[++i]); ++i < a;) r = t(r, e[i], i, e);
                return r
            }

            function K(e) {
                var t = !1;
                if (null != e && "function" != typeof e.toString) try {
                    t = !!(e + "")
                } catch (e) {}
                return t
            }

            function j(e) {
                var t = -1,
                    r = Array(e.size);
                return e.forEach((function(e, n) {
                    r[++t] = [n, e]
                })), r
            }

            function Y(e, t) {
                return function(r) {
                    return e(t(r))
                }
            }

            function W(e) {
                var t = -1,
                    r = Array(e.size);
                return e.forEach((function(e) {
                    r[++t] = e
                })), r
            }
            var q, z = Array.prototype,
                X = Function.prototype,
                $ = Object.prototype,
                J = F["__core-js_shared__"],
                Q = (q = /[^.]+$/.exec(J && J.keys && J.keys.IE_PROTO || "")) ? "Symbol(src)_1." + q : "",
                Z = X.toString,
                ee = $.hasOwnProperty,
                te = $.toString,
                re = RegExp("^" + Z.call(ee).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
                ne = B ? F.Buffer : void 0,
                ie = F.Symbol,
                ae = F.Uint8Array,
                se = Y(Object.getPrototypeOf, Object),
                oe = Object.create,
                le = $.propertyIsEnumerable,
                ue = z.splice,
                ce = Object.getOwnPropertySymbols,
                de = ne ? ne.isBuffer : void 0,
                he = Y(Object.keys, Object),
                fe = Ue(F, "DataView"),
                ge = Ue(F, "Map"),
                pe = Ue(F, "Promise"),
                me = Ue(F, "Set"),
                ve = Ue(F, "WeakMap"),
                ye = Ue(Object, "create"),
                Te = Ke(fe),
                be = Ke(ge),
                Ee = Ke(pe),
                Se = Ke(me),
                Ae = Ke(ve),
                ke = ie ? ie.prototype : void 0,
                Le = ke ? ke.valueOf : void 0;

            function Re(e) {
                var t = -1,
                    r = e ? e.length : 0;
                for (this.clear(); ++t < r;) {
                    var n = e[t];
                    this.set(n[0], n[1])
                }
            }

            function Ie(e) {
                var t = -1,
                    r = e ? e.length : 0;
                for (this.clear(); ++t < r;) {
                    var n = e[t];
                    this.set(n[0], n[1])
                }
            }

            function we(e) {
                var t = -1,
                    r = e ? e.length : 0;
                for (this.clear(); ++t < r;) {
                    var n = e[t];
                    this.set(n[0], n[1])
                }
            }

            function De(e) {
                this.__data__ = new Ie(e)
            }

            function Ce(e, t) {
                var r = Ye(e) || function(e) {
                        return function(e) {
                            return function(e) {
                                return !!e && "object" == typeof e
                            }(e) && We(e)
                        }(e) && ee.call(e, "callee") && (!le.call(e, "callee") || te.call(e) == a)
                    }(e) ? function(e, t) {
                        for (var r = -1, n = Array(e); ++r < e;) n[r] = t(r);
                        return n
                    }(e.length, String) : [],
                    n = r.length,
                    i = !!n;
                for (var s in e) !t && !ee.call(e, s) || i && ("length" == s || Ve(s, n)) || r.push(s);
                return r
            }

            function xe(e, t, r) {
                var n = e[t];
                ee.call(e, t) && je(n, r) && (void 0 !== r || t in e) || (e[t] = r)
            }

            function _e(e, t) {
                for (var r = e.length; r--;)
                    if (je(e[r][0], t)) return r;
                return -1
            }

            function Oe(e, t, r, n, i, f, y) {
                var x;
                if (n && (x = f ? n(e, i, f, y) : n(e)), void 0 !== x) return x;
                if (!Xe(e)) return e;
                var _ = Ye(e);
                if (_) {
                    if (x = function(e) {
                            var t = e.length,
                                r = e.constructor(t);
                            t && "string" == typeof e[0] && ee.call(e, "index") && (r.index = e.index, r.input = e.input);
                            return r
                        }(e), !t) return function(e, t) {
                        var r = -1,
                            n = e.length;
                        t || (t = Array(n));
                        for (; ++r < n;) t[r] = e[r];
                        return t
                    }(e, x)
                } else {
                    var P = Ge(e),
                        M = P == l || P == u;
                    if (qe(e)) return function(e, t) {
                        if (t) return e.slice();
                        var r = new e.constructor(e.length);
                        return e.copy(r), r
                    }(e, t);
                    if (P == h || P == a || M && !f) {
                        if (K(e)) return f ? e : {};
                        if (x = function(e) {
                                return "function" != typeof e.constructor || He(e) ? {} : (t = se(e), Xe(t) ? oe(t) : {});
                                var t
                            }(M ? {} : e), !t) return function(e, t) {
                            return Fe(e, Be(e), t)
                        }(e, function(e, t) {
                            return e && Fe(t, $e(t), e)
                        }(x, e))
                    } else {
                        if (!O[P]) return f ? e : {};
                        x = function(e, t, r, n) {
                            var i = e.constructor;
                            switch (t) {
                                case T:
                                    return Me(e);
                                case s:
                                case o:
                                    return new i(+e);
                                case b:
                                    return function(e, t) {
                                        var r = t ? Me(e.buffer) : e.buffer;
                                        return new e.constructor(r, e.byteOffset, e.byteLength)
                                    }(e, n);
                                case E:
                                case S:
                                case A:
                                case k:
                                case L:
                                case R:
                                case I:
                                case w:
                                case D:
                                    return function(e, t) {
                                        var r = t ? Me(e.buffer) : e.buffer;
                                        return new e.constructor(r, e.byteOffset, e.length)
                                    }(e, n);
                                case c:
                                    return function(e, t, r) {
                                        var n = t ? r(j(e), !0) : j(e);
                                        return H(n, G, new e.constructor)
                                    }(e, n, r);
                                case d:
                                case m:
                                    return new i(e);
                                case g:
                                    return function(e) {
                                        var t = new e.constructor(e.source, C.exec(e));
                                        return t.lastIndex = e.lastIndex, t
                                    }(e);
                                case p:
                                    return function(e, t, r) {
                                        var n = t ? r(W(e), !0) : W(e);
                                        return H(n, V, new e.constructor)
                                    }(e, n, r);
                                case v:
                                    return a = e, Le ? Object(Le.call(a)) : {}
                            }
                            var a
                        }(e, P, Oe, t)
                    }
                }
                y || (y = new De);
                var F = y.get(e);
                if (F) return F;
                if (y.set(e, x), !_) var N = r ? function(e) {
                    return function(e, t, r) {
                        var n = t(e);
                        return Ye(e) ? n : function(e, t) {
                            for (var r = -1, n = t.length, i = e.length; ++r < n;) e[i + r] = t[r];
                            return e
                        }(n, r(e))
                    }(e, $e, Be)
                }(e) : $e(e);
                return function(e, t) {
                    for (var r = -1, n = e ? e.length : 0; ++r < n && !1 !== t(e[r], r, e););
                }(N || e, (function(i, a) {
                    N && (i = e[a = i]), xe(x, a, Oe(i, t, r, n, a, e, y))
                })), x
            }

            function Pe(e) {
                return !(!Xe(e) || (t = e, Q && Q in t)) && (ze(e) || K(e) ? re : x).test(Ke(e));
                var t
            }

            function Me(e) {
                var t = new e.constructor(e.byteLength);
                return new ae(t).set(new ae(e)), t
            }

            function Fe(e, t, r, n) {
                r || (r = {});
                for (var i = -1, a = t.length; ++i < a;) {
                    var s = t[i],
                        o = n ? n(r[s], e[s], s, r, e) : void 0;
                    xe(r, s, void 0 === o ? e[s] : o)
                }
                return r
            }

            function Ne(e, t) {
                var r, n, i = e.__data__;
                return ("string" == (n = typeof(r = t)) || "number" == n || "symbol" == n || "boolean" == n ? "__proto__" !== r : null === r) ? i["string" == typeof t ? "string" : "hash"] : i.map
            }

            function Ue(e, t) {
                var r = function(e, t) {
                    return null == e ? void 0 : e[t]
                }(e, t);
                return Pe(r) ? r : void 0
            }
            Re.prototype.clear = function() {
                this.__data__ = ye ? ye(null) : {}
            }, Re.prototype.delete = function(e) {
                return this.has(e) && delete this.__data__[e]
            }, Re.prototype.get = function(e) {
                var t = this.__data__;
                if (ye) {
                    var r = t[e];
                    return r === n ? void 0 : r
                }
                return ee.call(t, e) ? t[e] : void 0
            }, Re.prototype.has = function(e) {
                var t = this.__data__;
                return ye ? void 0 !== t[e] : ee.call(t, e)
            }, Re.prototype.set = function(e, t) {
                return this.__data__[e] = ye && void 0 === t ? n : t, this
            }, Ie.prototype.clear = function() {
                this.__data__ = []
            }, Ie.prototype.delete = function(e) {
                var t = this.__data__,
                    r = _e(t, e);
                return !(r < 0) && (r == t.length - 1 ? t.pop() : ue.call(t, r, 1), !0)
            }, Ie.prototype.get = function(e) {
                var t = this.__data__,
                    r = _e(t, e);
                return r < 0 ? void 0 : t[r][1]
            }, Ie.prototype.has = function(e) {
                return _e(this.__data__, e) > -1
            }, Ie.prototype.set = function(e, t) {
                var r = this.__data__,
                    n = _e(r, e);
                return n < 0 ? r.push([e, t]) : r[n][1] = t, this
            }, we.prototype.clear = function() {
                this.__data__ = {
                    hash: new Re,
                    map: new(ge || Ie),
                    string: new Re
                }
            }, we.prototype.delete = function(e) {
                return Ne(this, e).delete(e)
            }, we.prototype.get = function(e) {
                return Ne(this, e).get(e)
            }, we.prototype.has = function(e) {
                return Ne(this, e).has(e)
            }, we.prototype.set = function(e, t) {
                return Ne(this, e).set(e, t), this
            }, De.prototype.clear = function() {
                this.__data__ = new Ie
            }, De.prototype.delete = function(e) {
                return this.__data__.delete(e)
            }, De.prototype.get = function(e) {
                return this.__data__.get(e)
            }, De.prototype.has = function(e) {
                return this.__data__.has(e)
            }, De.prototype.set = function(e, t) {
                var r = this.__data__;
                if (r instanceof Ie) {
                    var n = r.__data__;
                    if (!ge || n.length < 199) return n.push([e, t]), this;
                    r = this.__data__ = new we(n)
                }
                return r.set(e, t), this
            };
            var Be = ce ? Y(ce, Object) : function() {
                    return []
                },
                Ge = function(e) {
                    return te.call(e)
                };

            function Ve(e, t) {
                return !!(t = null == t ? i : t) && ("number" == typeof e || _.test(e)) && e > -1 && e % 1 == 0 && e < t
            }

            function He(e) {
                var t = e && e.constructor;
                return e === ("function" == typeof t && t.prototype || $)
            }

            function Ke(e) {
                if (null != e) {
                    try {
                        return Z.call(e)
                    } catch (e) {}
                    try {
                        return e + ""
                    } catch (e) {}
                }
                return ""
            }

            function je(e, t) {
                return e === t || e != e && t != t
            }(fe && Ge(new fe(new ArrayBuffer(1))) != b || ge && Ge(new ge) != c || pe && Ge(pe.resolve()) != f || me && Ge(new me) != p || ve && Ge(new ve) != y) && (Ge = function(e) {
                var t = te.call(e),
                    r = t == h ? e.constructor : void 0,
                    n = r ? Ke(r) : void 0;
                if (n) switch (n) {
                    case Te:
                        return b;
                    case be:
                        return c;
                    case Ee:
                        return f;
                    case Se:
                        return p;
                    case Ae:
                        return y
                }
                return t
            });
            var Ye = Array.isArray;

            function We(e) {
                return null != e && function(e) {
                    return "number" == typeof e && e > -1 && e % 1 == 0 && e <= i
                }(e.length) && !ze(e)
            }
            var qe = de || function() {
                return !1
            };

            function ze(e) {
                var t = Xe(e) ? te.call(e) : "";
                return t == l || t == u
            }

            function Xe(e) {
                var t = typeof e;
                return !!e && ("object" == t || "function" == t)
            }

            function $e(e) {
                return We(e) ? Ce(e) : function(e) {
                    if (!He(e)) return he(e);
                    var t = [];
                    for (var r in Object(e)) ee.call(e, r) && "constructor" != r && t.push(r);
                    return t
                }(e)
            }
            e.exports = function(e) {
                return Oe(e, !0, !0)
            }
        },
        5223: e => {
            "use strict";
            var t = function(e) {
                switch (typeof e) {
                    case "string":
                        return e;
                    case "boolean":
                        return e ? "true" : "false";
                    case "number":
                        return isFinite(e) ? e : "";
                    default:
                        return ""
                }
            };
            e.exports = function(e, r, n, i) {
                return r = r || "&", n = n || "=", null === e && (e = void 0), "object" == typeof e ? Object.keys(e).map((function(i) {
                    var a = encodeURIComponent(t(i)) + n;
                    return Array.isArray(e[i]) ? e[i].map((function(e) {
                        return a + encodeURIComponent(t(e))
                    })).join(r) : a + encodeURIComponent(t(e[i]))
                })).join(r) : i ? encodeURIComponent(t(i)) + n + encodeURIComponent(t(e)) : ""
            }
        },
        5659: (e, t, r) => {
            var n = r(2159);
            e.exports = n
        },
        5708: (e, t, r) => {
            var n = r(4993);
            e.exports = n
        },
        5852: e => {
            "use strict";
            var t = Object.prototype.hasOwnProperty,
                r = "~";

            function n() {}

            function i(e, t, r) {
                this.fn = e, this.context = t, this.once = r || !1
            }

            function a(e, t, n, a, s) {
                if ("function" != typeof n) throw new TypeError("The listener must be a function");
                var o = new i(n, a || e, s),
                    l = r ? r + t : t;
                return e._events[l] ? e._events[l].fn ? e._events[l] = [e._events[l], o] : e._events[l].push(o) : (e._events[l] = o, e._eventsCount++), e
            }

            function s(e, t) {
                0 == --e._eventsCount ? e._events = new n : delete e._events[t]
            }

            function o() {
                this._events = new n, this._eventsCount = 0
            }
            Object.create && (n.prototype = Object.create(null), (new n).__proto__ || (r = !1)), o.prototype.eventNames = function() {
                var e, n, i = [];
                if (0 === this._eventsCount) return i;
                for (n in e = this._events) t.call(e, n) && i.push(r ? n.slice(1) : n);
                return Object.getOwnPropertySymbols ? i.concat(Object.getOwnPropertySymbols(e)) : i
            }, o.prototype.listeners = function(e) {
                var t = r ? r + e : e,
                    n = this._events[t];
                if (!n) return [];
                if (n.fn) return [n.fn];
                for (var i = 0, a = n.length, s = new Array(a); i < a; i++) s[i] = n[i].fn;
                return s
            }, o.prototype.listenerCount = function(e) {
                var t = r ? r + e : e,
                    n = this._events[t];
                return n ? n.fn ? 1 : n.length : 0
            }, o.prototype.emit = function(e, t, n, i, a, s) {
                var o = r ? r + e : e;
                if (!this._events[o]) return !1;
                var l, u, c = this._events[o],
                    d = arguments.length;
                if (c.fn) {
                    switch (c.once && this.removeListener(e, c.fn, void 0, !0), d) {
                        case 1:
                            return c.fn.call(c.context), !0;
                        case 2:
                            return c.fn.call(c.context, t), !0;
                        case 3:
                            return c.fn.call(c.context, t, n), !0;
                        case 4:
                            return c.fn.call(c.context, t, n, i), !0;
                        case 5:
                            return c.fn.call(c.context, t, n, i, a), !0;
                        case 6:
                            return c.fn.call(c.context, t, n, i, a, s), !0
                    }
                    for (u = 1, l = new Array(d - 1); u < d; u++) l[u - 1] = arguments[u];
                    c.fn.apply(c.context, l)
                } else {
                    var h, f = c.length;
                    for (u = 0; u < f; u++) switch (c[u].once && this.removeListener(e, c[u].fn, void 0, !0), d) {
                        case 1:
                            c[u].fn.call(c[u].context);
                            break;
                        case 2:
                            c[u].fn.call(c[u].context, t);
                            break;
                        case 3:
                            c[u].fn.call(c[u].context, t, n);
                            break;
                        case 4:
                            c[u].fn.call(c[u].context, t, n, i);
                            break;
                        default:
                            if (!l)
                                for (h = 1, l = new Array(d - 1); h < d; h++) l[h - 1] = arguments[h];
                            c[u].fn.apply(c[u].context, l)
                    }
                }
                return !0
            }, o.prototype.on = function(e, t, r) {
                return a(this, e, t, r, !1)
            }, o.prototype.once = function(e, t, r) {
                return a(this, e, t, r, !0)
            }, o.prototype.removeListener = function(e, t, n, i) {
                var a = r ? r + e : e;
                if (!this._events[a]) return this;
                if (!t) return s(this, a), this;
                var o = this._events[a];
                if (o.fn) o.fn !== t || i && !o.once || n && o.context !== n || s(this, a);
                else {
                    for (var l = 0, u = [], c = o.length; l < c; l++)(o[l].fn !== t || i && !o[l].once || n && o[l].context !== n) && u.push(o[l]);
                    u.length ? this._events[a] = 1 === u.length ? u[0] : u : s(this, a)
                }
                return this
            }, o.prototype.removeAllListeners = function(e) {
                var t;
                return e ? (t = r ? r + e : e, this._events[t] && s(this, t)) : (this._events = new n, this._eventsCount = 0), this
            }, o.prototype.off = o.prototype.removeListener, o.prototype.addListener = o.prototype.on, o.prefixed = r, o.EventEmitter = o, e.exports = o
        },
        5896: (e, t, r) => {
            var n = r(33);
            e.exports = n
        },
        6137: e => {
            e.exports = {
                debug: !1,
                enableWorker: !0,
                lowLatencyMode: !1,
                backBufferLength: 30,
                maxBufferLength: 50,
                maxMaxBufferLength: 80,
                maxFragLookUpTolerance: 0,
                maxBufferHole: 0,
                appendErrorMaxRetry: 20,
                nudgeMaxRetry: 20,
                manifestLoadingTimeOut: 3e4,
                manifestLoadingMaxRetry: 10,
                fragLoadPolicy: {
                    default: {
                        maxTimeToFirstByteMs: 1e4,
                        maxLoadTimeMs: 12e4,
                        timeoutRetry: {
                            maxNumRetry: 20,
                            retryDelayMs: 0,
                            maxRetryDelayMs: 15
                        },
                        errorRetry: {
                            maxNumRetry: 6,
                            retryDelayMs: 1e3,
                            maxRetryDelayMs: 15
                        }
                    }
                }
            }
        },
        6138: (e, t, r) => {
            var n = r(4877),
                i = r(301),
                a = Object.hasOwnProperty,
                s = Object.create(null);
            for (var o in n) a.call(n, o) && (s[n[o]] = o);
            var l = e.exports = {
                to: {},
                get: {}
            };

            function u(e, t, r) {
                return Math.min(Math.max(t, e), r)
            }

            function c(e) {
                var t = Math.round(e).toString(16).toUpperCase();
                return t.length < 2 ? "0" + t : t
            }
            l.get = function(e) {
                var t, r;
                switch (e.substring(0, 3).toLowerCase()) {
                    case "hsl":
                        t = l.get.hsl(e), r = "hsl";
                        break;
                    case "hwb":
                        t = l.get.hwb(e), r = "hwb";
                        break;
                    default:
                        t = l.get.rgb(e), r = "rgb"
                }
                return t ? {
                    model: r,
                    value: t
                } : null
            }, l.get.rgb = function(e) {
                if (!e) return null;
                var t, r, i, s = [0, 0, 0, 1];
                if (t = e.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)) {
                    for (i = t[2], t = t[1], r = 0; r < 3; r++) {
                        var o = 2 * r;
                        s[r] = parseInt(t.slice(o, o + 2), 16)
                    }
                    i && (s[3] = parseInt(i, 16) / 255)
                } else if (t = e.match(/^#([a-f0-9]{3,4})$/i)) {
                    for (i = (t = t[1])[3], r = 0; r < 3; r++) s[r] = parseInt(t[r] + t[r], 16);
                    i && (s[3] = parseInt(i + i, 16) / 255)
                } else if (t = e.match(/^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/)) {
                    for (r = 0; r < 3; r++) s[r] = parseInt(t[r + 1], 0);
                    t[4] && (t[5] ? s[3] = .01 * parseFloat(t[4]) : s[3] = parseFloat(t[4]))
                } else {
                    if (!(t = e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/))) return (t = e.match(/^(\w+)$/)) ? "transparent" === t[1] ? [0, 0, 0, 0] : a.call(n, t[1]) ? ((s = n[t[1]])[3] = 1, s) : null : null;
                    for (r = 0; r < 3; r++) s[r] = Math.round(2.55 * parseFloat(t[r + 1]));
                    t[4] && (t[5] ? s[3] = .01 * parseFloat(t[4]) : s[3] = parseFloat(t[4]))
                }
                for (r = 0; r < 3; r++) s[r] = u(s[r], 0, 255);
                return s[3] = u(s[3], 0, 1), s
            }, l.get.hsl = function(e) {
                if (!e) return null;
                var t = e.match(/^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
                if (t) {
                    var r = parseFloat(t[4]);
                    return [(parseFloat(t[1]) % 360 + 360) % 360, u(parseFloat(t[2]), 0, 100), u(parseFloat(t[3]), 0, 100), u(isNaN(r) ? 1 : r, 0, 1)]
                }
                return null
            }, l.get.hwb = function(e) {
                if (!e) return null;
                var t = e.match(/^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/);
                if (t) {
                    var r = parseFloat(t[4]);
                    return [(parseFloat(t[1]) % 360 + 360) % 360, u(parseFloat(t[2]), 0, 100), u(parseFloat(t[3]), 0, 100), u(isNaN(r) ? 1 : r, 0, 1)]
                }
                return null
            }, l.to.hex = function() {
                var e = i(arguments);
                return "#" + c(e[0]) + c(e[1]) + c(e[2]) + (e[3] < 1 ? c(Math.round(255 * e[3])) : "")
            }, l.to.rgb = function() {
                var e = i(arguments);
                return e.length < 4 || 1 === e[3] ? "rgb(" + Math.round(e[0]) + ", " + Math.round(e[1]) + ", " + Math.round(e[2]) + ")" : "rgba(" + Math.round(e[0]) + ", " + Math.round(e[1]) + ", " + Math.round(e[2]) + ", " + e[3] + ")"
            }, l.to.rgb.percent = function() {
                var e = i(arguments),
                    t = Math.round(e[0] / 255 * 100),
                    r = Math.round(e[1] / 255 * 100),
                    n = Math.round(e[2] / 255 * 100);
                return e.length < 4 || 1 === e[3] ? "rgb(" + t + "%, " + r + "%, " + n + "%)" : "rgba(" + t + "%, " + r + "%, " + n + "%, " + e[3] + ")"
            }, l.to.hsl = function() {
                var e = i(arguments);
                return e.length < 4 || 1 === e[3] ? "hsl(" + e[0] + ", " + e[1] + "%, " + e[2] + "%)" : "hsla(" + e[0] + ", " + e[1] + "%, " + e[2] + "%, " + e[3] + ")"
            }, l.to.hwb = function() {
                var e = i(arguments),
                    t = "";
                return e.length >= 4 && 1 !== e[3] && (t = ", " + e[3]), "hwb(" + e[0] + ", " + e[1] + "%, " + e[2] + "%" + t + ")"
            }, l.to.keyword = function(e) {
                return s[e.slice(0, 3)]
            }
        },
        6226: e => {
            "use strict";
            e.exports = {
                isString: function(e) {
                    return "string" == typeof e
                },
                isObject: function(e) {
                    return "object" == typeof e && null !== e
                },
                isNull: function(e) {
                    return null === e
                },
                isNullOrUndefined: function(e) {
                    return null == e
                }
            }
        },
        6359: (e, t, r) => {
            var n = r(2383);
            e.exports = n
        },
        6479: (e, t, r) => {
            "use strict";
            var n = r(2798),
                i = r(6597),
                a = r(2786),
                s = r(4915),
                o = r(6071),
                l = r(4340);
            n({
                target: "Promise",
                stat: !0,
                forced: r(1137)
            }, {
                allSettled: function(e) {
                    var t = this,
                        r = s.f(t),
                        n = r.resolve,
                        u = r.reject,
                        c = o((function() {
                            var r = a(t.resolve),
                                s = [],
                                o = 0,
                                u = 1;
                            l(e, (function(e) {
                                var a = o++,
                                    l = !1;
                                u++, i(r, t, e).then((function(e) {
                                    l || (l = !0, s[a] = {
                                        status: "fulfilled",
                                        value: e
                                    }, --u || n(s))
                                }), (function(e) {
                                    l || (l = !0, s[a] = {
                                        status: "rejected",
                                        reason: e
                                    }, --u || n(s))
                                }))
                            })), --u || n(s)
                        }));
                    return c.error && u(c.value), r.promise
                }
            })
        },
        6684: (e, t, r) => {
            "use strict";
            r.d(t, {
                Mj: () => D
            });
            var n = {
                    grad: .9,
                    turn: 360,
                    rad: 360 / (2 * Math.PI)
                },
                i = function(e) {
                    return "string" == typeof e ? e.length > 0 : "number" == typeof e
                },
                a = function(e, t, r) {
                    return void 0 === t && (t = 0), void 0 === r && (r = Math.pow(10, t)), Math.round(r * e) / r + 0
                },
                s = function(e, t, r) {
                    return void 0 === t && (t = 0), void 0 === r && (r = 1), e > r ? r : e > t ? e : t
                },
                o = function(e) {
                    return (e = isFinite(e) ? e % 360 : 0) > 0 ? e : e + 360
                },
                l = function(e) {
                    return {
                        r: s(e.r, 0, 255),
                        g: s(e.g, 0, 255),
                        b: s(e.b, 0, 255),
                        a: s(e.a)
                    }
                },
                u = function(e) {
                    return {
                        r: a(e.r),
                        g: a(e.g),
                        b: a(e.b),
                        a: a(e.a, 3)
                    }
                },
                c = /^#([0-9a-f]{3,8})$/i,
                d = function(e) {
                    var t = e.toString(16);
                    return t.length < 2 ? "0" + t : t
                },
                h = function(e) {
                    var t = e.r,
                        r = e.g,
                        n = e.b,
                        i = e.a,
                        a = Math.max(t, r, n),
                        s = a - Math.min(t, r, n),
                        o = s ? a === t ? (r - n) / s : a === r ? 2 + (n - t) / s : 4 + (t - r) / s : 0;
                    return {
                        h: 60 * (o < 0 ? o + 6 : o),
                        s: a ? s / a * 100 : 0,
                        v: a / 255 * 100,
                        a: i
                    }
                },
                f = function(e) {
                    var t = e.h,
                        r = e.s,
                        n = e.v,
                        i = e.a;
                    t = t / 360 * 6, r /= 100, n /= 100;
                    var a = Math.floor(t),
                        s = n * (1 - r),
                        o = n * (1 - (t - a) * r),
                        l = n * (1 - (1 - t + a) * r),
                        u = a % 6;
                    return {
                        r: 255 * [n, o, s, s, l, n][u],
                        g: 255 * [l, n, n, o, s, s][u],
                        b: 255 * [s, s, l, n, n, o][u],
                        a: i
                    }
                },
                g = function(e) {
                    return {
                        h: o(e.h),
                        s: s(e.s, 0, 100),
                        l: s(e.l, 0, 100),
                        a: s(e.a)
                    }
                },
                p = function(e) {
                    return {
                        h: a(e.h),
                        s: a(e.s),
                        l: a(e.l),
                        a: a(e.a, 3)
                    }
                },
                m = function(e) {
                    return f((r = (t = e).s, {
                        h: t.h,
                        s: (r *= ((n = t.l) < 50 ? n : 100 - n) / 100) > 0 ? 2 * r / (n + r) * 100 : 0,
                        v: n + r,
                        a: t.a
                    }));
                    var t, r, n
                },
                v = function(e) {
                    return {
                        h: (t = h(e)).h,
                        s: (i = (200 - (r = t.s)) * (n = t.v) / 100) > 0 && i < 200 ? r * n / 100 / (i <= 100 ? i : 200 - i) * 100 : 0,
                        l: i / 2,
                        a: t.a
                    };
                    var t, r, n, i
                },
                y = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
                T = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
                b = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
                E = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,
                S = {
                    string: [
                        [function(e) {
                            var t = c.exec(e);
                            return t ? (e = t[1]).length <= 4 ? {
                                r: parseInt(e[0] + e[0], 16),
                                g: parseInt(e[1] + e[1], 16),
                                b: parseInt(e[2] + e[2], 16),
                                a: 4 === e.length ? a(parseInt(e[3] + e[3], 16) / 255, 2) : 1
                            } : 6 === e.length || 8 === e.length ? {
                                r: parseInt(e.substr(0, 2), 16),
                                g: parseInt(e.substr(2, 2), 16),
                                b: parseInt(e.substr(4, 2), 16),
                                a: 8 === e.length ? a(parseInt(e.substr(6, 2), 16) / 255, 2) : 1
                            } : null : null
                        }, "hex"],
                        [function(e) {
                            var t = b.exec(e) || E.exec(e);
                            return t ? t[2] !== t[4] || t[4] !== t[6] ? null : l({
                                r: Number(t[1]) / (t[2] ? 100 / 255 : 1),
                                g: Number(t[3]) / (t[4] ? 100 / 255 : 1),
                                b: Number(t[5]) / (t[6] ? 100 / 255 : 1),
                                a: void 0 === t[7] ? 1 : Number(t[7]) / (t[8] ? 100 : 1)
                            }) : null
                        }, "rgb"],
                        [function(e) {
                            var t = y.exec(e) || T.exec(e);
                            if (!t) return null;
                            var r, i, a = g({
                                h: (r = t[1], i = t[2], void 0 === i && (i = "deg"), Number(r) * (n[i] || 1)),
                                s: Number(t[3]),
                                l: Number(t[4]),
                                a: void 0 === t[5] ? 1 : Number(t[5]) / (t[6] ? 100 : 1)
                            });
                            return m(a)
                        }, "hsl"]
                    ],
                    object: [
                        [function(e) {
                            var t = e.r,
                                r = e.g,
                                n = e.b,
                                a = e.a,
                                s = void 0 === a ? 1 : a;
                            return i(t) && i(r) && i(n) ? l({
                                r: Number(t),
                                g: Number(r),
                                b: Number(n),
                                a: Number(s)
                            }) : null
                        }, "rgb"],
                        [function(e) {
                            var t = e.h,
                                r = e.s,
                                n = e.l,
                                a = e.a,
                                s = void 0 === a ? 1 : a;
                            if (!i(t) || !i(r) || !i(n)) return null;
                            var o = g({
                                h: Number(t),
                                s: Number(r),
                                l: Number(n),
                                a: Number(s)
                            });
                            return m(o)
                        }, "hsl"],
                        [function(e) {
                            var t = e.h,
                                r = e.s,
                                n = e.v,
                                a = e.a,
                                l = void 0 === a ? 1 : a;
                            if (!i(t) || !i(r) || !i(n)) return null;
                            var u = function(e) {
                                return {
                                    h: o(e.h),
                                    s: s(e.s, 0, 100),
                                    v: s(e.v, 0, 100),
                                    a: s(e.a)
                                }
                            }({
                                h: Number(t),
                                s: Number(r),
                                v: Number(n),
                                a: Number(l)
                            });
                            return f(u)
                        }, "hsv"]
                    ]
                },
                A = function(e, t) {
                    for (var r = 0; r < t.length; r++) {
                        var n = t[r][0](e);
                        if (n) return [n, t[r][1]]
                    }
                    return [null, void 0]
                },
                k = function(e) {
                    return "string" == typeof e ? A(e.trim(), S.string) : "object" == typeof e && null !== e ? A(e, S.object) : [null, void 0]
                },
                L = function(e, t) {
                    var r = v(e);
                    return {
                        h: r.h,
                        s: s(r.s + 100 * t, 0, 100),
                        l: r.l,
                        a: r.a
                    }
                },
                R = function(e) {
                    return (299 * e.r + 587 * e.g + 114 * e.b) / 1e3 / 255
                },
                I = function(e, t) {
                    var r = v(e);
                    return {
                        h: r.h,
                        s: r.s,
                        l: s(r.l + 100 * t, 0, 100),
                        a: r.a
                    }
                },
                w = function() {
                    function e(e) {
                        this.parsed = k(e)[0], this.rgba = this.parsed || {
                            r: 0,
                            g: 0,
                            b: 0,
                            a: 1
                        }
                    }
                    return e.prototype.isValid = function() {
                        return null !== this.parsed
                    }, e.prototype.brightness = function() {
                        return a(R(this.rgba), 2)
                    }, e.prototype.isDark = function() {
                        return R(this.rgba) < .5
                    }, e.prototype.isLight = function() {
                        return R(this.rgba) >= .5
                    }, e.prototype.toHex = function() {
                        return t = (e = u(this.rgba)).r, r = e.g, n = e.b, s = (i = e.a) < 1 ? d(a(255 * i)) : "", "#" + d(t) + d(r) + d(n) + s;
                        var e, t, r, n, i, s
                    }, e.prototype.toRgb = function() {
                        return u(this.rgba)
                    }, e.prototype.toRgbString = function() {
                        return t = (e = u(this.rgba)).r, r = e.g, n = e.b, (i = e.a) < 1 ? "rgba(" + t + ", " + r + ", " + n + ", " + i + ")" : "rgb(" + t + ", " + r + ", " + n + ")";
                        var e, t, r, n, i
                    }, e.prototype.toHsl = function() {
                        return p(v(this.rgba))
                    }, e.prototype.toHslString = function() {
                        return t = (e = p(v(this.rgba))).h, r = e.s, n = e.l, (i = e.a) < 1 ? "hsla(" + t + ", " + r + "%, " + n + "%, " + i + ")" : "hsl(" + t + ", " + r + "%, " + n + "%)";
                        var e, t, r, n, i
                    }, e.prototype.toHsv = function() {
                        return e = h(this.rgba), {
                            h: a(e.h),
                            s: a(e.s),
                            v: a(e.v),
                            a: a(e.a, 3)
                        };
                        var e
                    }, e.prototype.invert = function() {
                        return D({
                            r: 255 - (e = this.rgba).r,
                            g: 255 - e.g,
                            b: 255 - e.b,
                            a: e.a
                        });
                        var e
                    }, e.prototype.saturate = function(e) {
                        return void 0 === e && (e = .1), D(L(this.rgba, e))
                    }, e.prototype.desaturate = function(e) {
                        return void 0 === e && (e = .1), D(L(this.rgba, -e))
                    }, e.prototype.grayscale = function() {
                        return D(L(this.rgba, -1))
                    }, e.prototype.lighten = function(e) {
                        return void 0 === e && (e = .1), D(I(this.rgba, e))
                    }, e.prototype.darken = function(e) {
                        return void 0 === e && (e = .1), D(I(this.rgba, -e))
                    }, e.prototype.rotate = function(e) {
                        return void 0 === e && (e = 15), this.hue(this.hue() + e)
                    }, e.prototype.alpha = function(e) {
                        return "number" == typeof e ? D({
                            r: (t = this.rgba).r,
                            g: t.g,
                            b: t.b,
                            a: e
                        }) : a(this.rgba.a, 3);
                        var t
                    }, e.prototype.hue = function(e) {
                        var t = v(this.rgba);
                        return "number" == typeof e ? D({
                            h: e,
                            s: t.s,
                            l: t.l,
                            a: t.a
                        }) : a(t.h)
                    }, e.prototype.isEqual = function(e) {
                        return this.toHex() === D(e).toHex()
                    }, e
                }(),
                D = function(e) {
                    return e instanceof w ? e : new w(e)
                }
        },
        6694: function(e, t, r) {
            var n;
            e = r.nmd(e),
                function() {
                    t && t.nodeType, e && e.nodeType;
                    var i = "object" == typeof r.g && r.g;
                    i.global !== i && i.window !== i && i.self;
                    var a, s = 2147483647,
                        o = 36,
                        l = /^xn--/,
                        u = /[^\x20-\x7E]/,
                        c = /[\x2E\u3002\uFF0E\uFF61]/g,
                        d = {
                            overflow: "Overflow: input needs wider integers to process",
                            "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                            "invalid-input": "Invalid input"
                        },
                        h = Math.floor,
                        f = String.fromCharCode;

                    function g(e) {
                        throw RangeError(d[e])
                    }

                    function p(e, t) {
                        for (var r = e.length, n = []; r--;) n[r] = t(e[r]);
                        return n
                    }

                    function m(e, t) {
                        var r = e.split("@"),
                            n = "";
                        return r.length > 1 && (n = r[0] + "@", e = r[1]), n + p((e = e.replace(c, ".")).split("."), t).join(".")
                    }

                    function v(e) {
                        for (var t, r, n = [], i = 0, a = e.length; i < a;)(t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < a ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);
                        return n
                    }

                    function y(e) {
                        return p(e, (function(e) {
                            var t = "";
                            return e > 65535 && (t += f((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += f(e)
                        })).join("")
                    }

                    function T(e, t) {
                        return e + 22 + 75 * (e < 26) - ((0 != t) << 5)
                    }

                    function b(e, t, r) {
                        var n = 0;
                        for (e = r ? h(e / 700) : e >> 1, e += h(e / t); e > 455; n += o) e = h(e / 35);
                        return h(n + 36 * e / (e + 38))
                    }

                    function E(e) {
                        var t, r, n, i, a, l, u, c, d, f, p, m = [],
                            v = e.length,
                            T = 0,
                            E = 128,
                            S = 72;
                        for ((r = e.lastIndexOf("-")) < 0 && (r = 0), n = 0; n < r; ++n) e.charCodeAt(n) >= 128 && g("not-basic"), m.push(e.charCodeAt(n));
                        for (i = r > 0 ? r + 1 : 0; i < v;) {
                            for (a = T, l = 1, u = o; i >= v && g("invalid-input"), ((c = (p = e.charCodeAt(i++)) - 48 < 10 ? p - 22 : p - 65 < 26 ? p - 65 : p - 97 < 26 ? p - 97 : o) >= o || c > h((s - T) / l)) && g("overflow"), T += c * l, !(c < (d = u <= S ? 1 : u >= S + 26 ? 26 : u - S)); u += o) l > h(s / (f = o - d)) && g("overflow"), l *= f;
                            S = b(T - a, t = m.length + 1, 0 == a), h(T / t) > s - E && g("overflow"), E += h(T / t), T %= t, m.splice(T++, 0, E)
                        }
                        return y(m)
                    }

                    function S(e) {
                        var t, r, n, i, a, l, u, c, d, p, m, y, E, S, A, k = [];
                        for (y = (e = v(e)).length, t = 128, r = 0, a = 72, l = 0; l < y; ++l)(m = e[l]) < 128 && k.push(f(m));
                        for (n = i = k.length, i && k.push("-"); n < y;) {
                            for (u = s, l = 0; l < y; ++l)(m = e[l]) >= t && m < u && (u = m);
                            for (u - t > h((s - r) / (E = n + 1)) && g("overflow"), r += (u - t) * E, t = u, l = 0; l < y; ++l)
                                if ((m = e[l]) < t && ++r > s && g("overflow"), m == t) {
                                    for (c = r, d = o; !(c < (p = d <= a ? 1 : d >= a + 26 ? 26 : d - a)); d += o) A = c - p, S = o - p, k.push(f(T(p + A % S, 0))), c = h(A / S);
                                    k.push(f(T(c, 0))), a = b(r, E, n == i), r = 0, ++n
                                }++r, ++t
                        }
                        return k.join("")
                    }
                    a = {
                        version: "1.3.2",
                        ucs2: {
                            decode: v,
                            encode: y
                        },
                        decode: E,
                        encode: S,
                        toASCII: function(e) {
                            return m(e, (function(e) {
                                return u.test(e) ? "xn--" + S(e) : e
                            }))
                        },
                        toUnicode: function(e) {
                            return m(e, (function(e) {
                                return l.test(e) ? E(e.slice(4).toLowerCase()) : e
                            }))
                        }
                    }, void 0 === (n = function() {
                        return a
                    }.call(t, r, t, e)) || (e.exports = n)
                }()
        },
        7084: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(4044);

            function o(e) {
                var t = (e = e || {}).containerElement;
                if (!(t instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var r = document.createElement("video");
                r.style.width = "100%", r.style.height = "100%", r.style.backgroundColor = "black", r.controls = !1, r.playsInline = !0, r.onerror = function() {
                    ! function() {
                        if (u) return;
                        var e;
                        switch (r.error.code) {
                            case 1:
                                e = s.HTML_VIDEO.MEDIA_ERR_ABORTED;
                                break;
                            case 2:
                                e = s.HTML_VIDEO.MEDIA_ERR_NETWORK;
                                break;
                            case 3:
                                e = s.HTML_VIDEO.MEDIA_ERR_DECODE;
                                break;
                            case 4:
                                e = s.HTML_VIDEO.MEDIA_ERR_SRC_NOT_SUPPORTED;
                                break;
                            default:
                                e = s.UNKNOWN_ERROR
                        }
                        g(Object.assign({}, e, {
                            critical: !0,
                            error: r.error
                        }))
                    }()
                }, r.onended = function() {
                    l.emit("ended")
                }, r.onpause = function() {
                    p("paused")
                }, r.onplay = function() {
                    p("paused")
                }, r.ontimeupdate = function() {
                    p("time")
                }, r.ondurationchange = function() {
                    p("duration")
                }, r.onwaiting = function() {
                    p("buffering")
                }, r.onseeking = function() {
                    p("time"), p("buffering")
                }, r.onseeked = function() {
                    p("time"), p("buffering")
                }, r.onstalled = function() {
                    p("buffering")
                }, r.onplaying = function() {
                    p("time"), p("buffering")
                }, r.oncanplay = function() {
                    p("buffering")
                }, r.canplaythrough = function() {
                    p("buffering")
                }, r.onloadedmetadata = function() {
                    p("loaded")
                }, r.onloadeddata = function() {
                    p("buffering")
                }, r.onvolumechange = function() {
                    p("volume"), p("muted")
                }, r.onratechange = function() {
                    p("playbackSpeed")
                }, r.textTracks.onchange = function() {
                    p("subtitlesTracks"), p("selectedSubtitlesTrackId"), f(), Array.from(r.textTracks).forEach((function(e) {
                        e.oncuechange = f
                    }))
                }, t.appendChild(r);
                var o = document.createElement("div");
                o.style.position = "absolute", o.style.right = "0", o.style.bottom = "0", o.style.left = "0", o.style.zIndex = "1", o.style.textAlign = "center", t.style.position = "relative", t.style.zIndex = "0", t.appendChild(o);
                var l = new n,
                    u = !1,
                    c = null,
                    d = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        subtitlesTracks: !1,
                        selectedSubtitlesTrackId: !1,
                        audioTracks: !1,
                        selectedAudioTrackId: !1,
                        volume: !1,
                        muted: !1,
                        playbackSpeed: !1
                    };

                function h(e) {
                    switch (e) {
                        case "stream":
                            return c;
                        case "loaded":
                            return null === c ? null : r.readyState >= r.HAVE_METADATA;
                        case "paused":
                            return null === c ? null : !!r.paused;
                        case "time":
                            return null !== c && null !== r.currentTime && isFinite(r.currentTime) ? Math.floor(1e3 * r.currentTime) : null;
                        case "duration":
                            return null !== c && null !== r.duration && isFinite(r.duration) ? Math.floor(1e3 * r.duration) : null;
                        case "buffering":
                            return null === c ? null : r.readyState < r.HAVE_FUTURE_DATA;
                        case "subtitlesTracks":
                            return null === c ? [] : Array.from(r.textTracks).map((function(e, t) {
                                return Object.freeze({
                                    id: "EMBEDDED_" + String(t),
                                    lang: e.language,
                                    label: e.label || null,
                                    origin: "EMBEDDED",
                                    embedded: !0
                                })
                            }));
                        case "selectedSubtitlesTrackId":
                            return null === c ? null : Array.from(r.textTracks).reduce((function(e, t, r) {
                                return null === e && "showing" === t.mode ? "EMBEDDED_" + String(r) : e
                            }), null);
                        case "audioTracks":
                            return null === c ? [] : r.audioTracks && Array.from(r.audioTracks).length ? Array.from(r.audioTracks).map((function(e, t) {
                                return Object.freeze({
                                    id: "EMBEDDED_" + String(t),
                                    lang: e.language,
                                    label: e.label || null,
                                    origin: "EMBEDDED",
                                    embedded: !0
                                })
                            })) : [];
                        case "selectedAudioTrackId":
                            return null === c ? null : r.audioTracks && Array.from(r.audioTracks).length ? Array.from(r.audioTracks).reduce((function(e, t, r) {
                                return null === e && t.enabled ? "EMBEDDED_" + String(r) : e
                            }), null) : null;
                        case "volume":
                            return u || null === r.volume || !isFinite(r.volume) ? null : Math.floor(100 * r.volume);
                        case "muted":
                            return u ? null : !!r.muted;
                        case "playbackSpeed":
                            return u || null === r.playbackRate || !isFinite(r.playbackRate) ? null : r.playbackRate;
                        default:
                            return null
                    }
                }

                function f() {
                    Array.from(r.textTracks).forEach((function(e) {
                        Array.from(e.cues || []).forEach((function(e) {
                            e.snapToLines = !1, e.line = 100
                        }))
                    }))
                }

                function g(e) {
                    l.emit("error", e), e.critical && m("unload")
                }

                function p(e) {
                    d[e] && l.emit("propChanged", e, h(e))
                }

                function m(e, n) {
                    switch (e) {
                        case "load":
                            m("unload"), n && n.stream && "string" == typeof n.stream.url ? (c = n.stream, p("stream"), p("loaded"), r.autoplay = "boolean" != typeof n.autoplay || n.autoplay, r.currentTime = null !== n.time && isFinite(n.time) ? parseInt(n.time, 10) / 1e3 : 0, p("paused"), p("time"), p("duration"), p("buffering"), r.textTracks && (r.textTracks.onaddtrack = function() {
                                r.textTracks.onaddtrack = null, setTimeout((function() {
                                    p("subtitlesTracks"), p("selectedSubtitlesTrackId")
                                }))
                            }), r.audioTracks && (r.audioTracks.onaddtrack = function() {
                                r.audioTracks.onaddtrack = null, setTimeout((function() {
                                    p("audioTracks"), p("selectedAudioTrackId")
                                }))
                            }), r.src = c.url) : g(Object.assign({}, s.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: n ? n.stream : null
                            }));
                            break;
                        case "unload":
                            c = null, Array.from(r.textTracks).forEach((function(e) {
                                e.oncuechange = null
                            })), r.removeAttribute("src"), r.load(), r.currentTime = 0, p("stream"), p("loaded"), p("paused"), p("time"), p("duration"), p("buffering"), p("subtitlesTracks"), p("selectedSubtitlesTrackId"), p("audioTracks"), p("selectedAudioTrackId");
                            break;
                        case "destroy":
                            m("unload"), u = !0, p("volume"), p("muted"), p("playbackSpeed"), l.removeAllListeners(), r.onerror = null, r.onended = null, r.onpause = null, r.onplay = null, r.ontimeupdate = null, r.ondurationchange = null, r.onwaiting = null, r.onseeking = null, r.onseeked = null, r.onstalled = null, r.onplaying = null, r.oncanplay = null, r.canplaythrough = null, r.onloadeddata = null, r.onvolumechange = null, r.onratechange = null, r.textTracks.onchange = null, t.removeChild(r)
                    }
                }
                this.on = function(e, t) {
                    if (u) throw new Error("Video is destroyed");
                    l.on(e, t)
                }, this.dispatch = function(e) {
                    if (u) throw new Error("Video is destroyed");
                    if (e) switch ((e = a(i(e))).type) {
                        case "observeProp":
                            return t = e.propName, void(d.hasOwnProperty(t) && (l.emit("propValue", t, h(t)), d[t] = !0));
                        case "setProp":
                            return void
                            function(e, t) {
                                switch (e) {
                                    case "paused":
                                        null !== c && (t ? r.pause() : r.play(), p("paused"));
                                        break;
                                    case "time":
                                        null !== c && null !== t && isFinite(t) && (r.currentTime = parseInt(t, 10) / 1e3, p("time"));
                                        break;
                                    case "selectedSubtitlesTrackId":
                                        if (null !== c) {
                                            Array.from(r.textTracks).forEach((function(e, r) {
                                                e.mode = "EMBEDDED_" + String(r) === t ? "showing" : "disabled"
                                            }));
                                            var n = h("subtitlesTracks").find((function(e) {
                                                return e.id === t
                                            }));
                                            n && (p("selectedSubtitlesTrackId"), l.emit("subtitlesTrackLoaded", n))
                                        }
                                        break;
                                    case "selectedAudioTrackId":
                                        if (null !== c)
                                            for (var i = 0; i < r.audioTracks.length; i++) r.audioTracks[i].enabled = !("EMBEDDED_" + String(i) !== t);
                                        var a = h("audioTracks").find((function(e) {
                                            return e.id === t
                                        }));
                                        a && (p("selectedAudioTrackId"), l.emit("audioTrackLoaded", a));
                                        break;
                                    case "volume":
                                        null !== t && isFinite(t) && (r.muted = !1, r.volume = Math.max(0, Math.min(100, parseInt(t, 10))) / 100, p("muted"), p("volume"));
                                        break;
                                    case "muted":
                                        r.muted = !!t, p("muted");
                                        break;
                                    case "playbackSpeed":
                                        null !== t && isFinite(t) && (r.playbackRate = parseFloat(t), p("playbackSpeed"))
                                }
                            }(e.propName, e.propValue);
                        case "command":
                            return void m(e.commandName, e.commandArgs)
                    }
                    var t;
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            o.canPlayStream = function(e) {
                return e ? Promise.resolve(!0) : Promise.resolve(!1)
            }, o.manifest = {
                name: "VidaaVideo",
                external: !1,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "audioTracks", "selectedAudioTrackId", "subtitlesTracks", "selectedSubtitlesTrackId", "volume", "muted", "playbackSpeed"],
                commands: ["load", "unload", "destroy"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded", "audioTrackLoaded"]
            }, e.exports = o
        },
        7149: (e, t, r) => {
            var n = r(1417),
                i = r(2410);
            e.exports = {
                parse: function(e) {
                    return new Promise((function(t, r) {
                        var a = new n.WebVTT.Parser(window, n.WebVTT.StringDecoder()),
                            s = [],
                            o = [],
                            l = {};
                        a.oncue = function(e) {
                            var t = {
                                startTime: 1e3 * e.startTime | 0,
                                endTime: 1e3 * e.endTime | 0,
                                text: e.text
                            };
                            o.push(t), l[t.startTime] = l[t.startTime] || [], l[t.endTime] = l[t.endTime] || []
                        }, a.onparsingerror = function(e) {
                            0 === e.code ? (a.oncue = null, a.onparsingerror = null, a.onflush = null, r(e)) : (console.warn("Subtitles parsing error", e), s.push(e))
                        }, a.onflush = function() {
                            l.times = Object.keys(l).map((function(e) {
                                return parseInt(e, 10)
                            })).sort((function(e, t) {
                                return e - t
                            }));
                            for (var e = 0; e < o.length; e++) {
                                l[o[e].startTime].push(o[e]);
                                for (var n = i(l.times, o[e].startTime) + 1; n < l.times.length && !(o[e].endTime <= l.times[n]); n++) l[l.times[n]].push(o[e])
                            }
                            for (var u = 0; u < l.times.length; u++) l[l.times[u]].sort((function(e, t) {
                                return e.startTime - t.startTime || e.endTime - t.endTime
                            }));
                            a.oncue = null, a.onparsingerror = null, a.onflush = null, 0 === o.length && s.length ? r(s[0]) : 0 === l.times.length ? r(new Error("Missing subtitle track cues")) : t(l)
                        }, a.parse(e)
                    }))
                }
            }
        },
        7193: (e, t, r) => {
            var n = r(8109);
            e.exports = n
        },
        7384: e => {
            var t, r, n = [{
                    codec: "h264",
                    force: window.chrome || window.cast,
                    mime: 'video/mp4; codecs="avc1.42E01E"'
                }, {
                    codec: "h265",
                    mime: 'video/mp4; codecs="hev1.1.6.L150.B0"',
                    aliases: ["hevc"]
                }, {
                    codec: "vp8",
                    mime: 'video/mp4; codecs="vp8"'
                }, {
                    codec: "vp9",
                    mime: 'video/mp4; codecs="vp9"'
                }],
                i = [{
                    codec: "aac",
                    mime: 'audio/mp4; codecs="mp4a.40.2"'
                }, {
                    codec: "mp3",
                    mime: 'audio/mp4; codecs="mp3"'
                }, {
                    codec: "ac3",
                    mime: 'audio/mp4; codecs="ac-3"'
                }, {
                    codec: "eac3",
                    mime: 'audio/mp4; codecs="ec-3"'
                }, {
                    codec: "vorbis",
                    mime: 'audio/mp4; codecs="vorbis"'
                }, {
                    codec: "opus",
                    mime: 'audio/mp4; codecs="opus"'
                }];

            function a(e, t) {
                return e.force || t.mediaElement.canPlayType(e.mime) ? [e.codec].concat(e.aliases || []) : []
            }
            e.exports = (t = document.createElement("video"), r = ["mp4"], (window.chrome || window.cast) && r.push("matroska,webm"), {
                formats: r,
                videoCodecs: n.map((function(e) {
                    return a(e, {
                        mediaElement: t
                    })
                })).reduce((function(e, t) {
                    return e.concat(t)
                }), []),
                audioCodecs: i.map((function(e) {
                    return a(e, {
                        mediaElement: t
                    })
                })).reduce((function(e, t) {
                    return e.concat(t)
                }), []),
                maxAudioChannels: function() {
                    if (/firefox/i.test(window.navigator.userAgent)) return 6;
                    if (!window.AudioContext || window.chrome || window.cast) return 2;
                    var e = (new AudioContext).destination.maxChannelCount;
                    return e > 0 ? e : 2
                }()
            })
        },
        7385: function(e, t, r) {
            var n;
            e.exports && (this.VTTRegion = r(1615).VTTRegion), (n = this).VTTRegion.create = function(e) {
                var t = new n.VTTRegion;
                for (var r in e) t.hasOwnProperty(r) && (t[r] = e[r]);
                return t
            }, n.VTTRegion.fromJSON = function(e) {
                return this.create(JSON.parse(e))
            }
        },
        7444: e => {
            var t = e.exports = function(e, r) {
                if (r || (r = 16), void 0 === e && (e = 128), e <= 0) return "0";
                for (var n = Math.log(Math.pow(2, e)) / Math.log(r), i = 2; n === 1 / 0; i *= 2) n = Math.log(Math.pow(2, e / i)) / Math.log(r) * i;
                var a = n - Math.floor(n),
                    s = "";
                for (i = 0; i < Math.floor(n); i++) {
                    s = Math.floor(Math.random() * r).toString(r) + s
                }
                if (a) {
                    var o = Math.pow(r, a);
                    s = Math.floor(Math.random() * o).toString(r) + s
                }
                var l = parseInt(s, r);
                return l !== 1 / 0 && l >= Math.pow(2, e) ? t(e, r) : s
            };
            t.rack = function(e, r, n) {
                var i = function(i) {
                        var s = 0;
                        do {
                            if (s++ > 10) {
                                if (!n) throw new Error("too many ID collisions, use more bits");
                                e += n
                            }
                            var o = t(e, r)
                        } while (Object.hasOwnProperty.call(a, o));
                        return a[o] = i, o
                    },
                    a = i.hats = {};
                return i.get = function(e) {
                    return i.hats[e]
                }, i.set = function(e, t) {
                    return i.hats[e] = t, i
                }, i.bits = e || 128, i.base = r || 16, i
            }
        },
        7787: e => {
            const t = "AVPlay";
            e.exports = e => ({
                getState: () => e.request(t, "getState"),
                getCurrentTime: () => e.request(t, "getCurrentTime"),
                getDuration: () => e.request(t, "getDuration"),
                getTotalTrackInfo: () => e.request(t, "getTotalTrackInfo"),
                getCurrentStreamInfo: () => e.request(t, "getCurrentStreamInfo"),
                open: r => e.request(t, "open", r),
                prepareAsync: async (r, n) => {
                    const [i, a] = await e.request(t, "prepareAsync", "handler:success", "handler:error");
                    "handler:success" === i && r(), "handler:error" === i && n(...a)
                },
                pause: () => e.request(t, "pause"),
                play: () => e.request(t, "play"),
                stop: () => e.request(t, "stop"),
                seekTo: r => e.request(t, "seekTo", r),
                setSpeed: r => e.request(t, "setSpeed", r),
                setSelectTrack: (r, n) => e.request(t, "setSelectTrack", r, n),
                setDisplayRect: (r, n, i, a) => e.request(t, "setDisplayRect", r, n, i, a),
                setDisplayMethod: r => e.request(t, "setDisplayMethod", r),
                setListener: r => {
                    const n = Object.keys(r).map((e => `handler:${e}`));
                    e.listen(t, "setListener", ((e, t) => {
                        const n = e.replace("handler:", "");
                        r[n] && (t ? r[n](...t) : r[n]())
                    }), ...n)
                }
            })
        },
        8099: function() {
            ! function(e) {
                function t(e, t) {
                    return void 0 === t && (t = 1), "rgba(" + [parseInt(e.substring(0, 2), 16), parseInt(e.substring(2, 4), 16), parseInt(e.substring(4, 6), 16), t].join(",") + ")"
                }
                var r = 1;

                function n(e, n, a) {
                    switch (a) {
                        case "webvtt.font.color":
                        case "webvtt.font.opacity":
                            var s = Services.prefs.getCharPref("webvtt.font.color"),
                                o = Services.prefs.getIntPref("webvtt.font.opacity") / 100;
                            i.fontSet = t(s, o);
                            break;
                        case "webvtt.font.scale":
                            r = Services.prefs.getIntPref("webvtt.font.scale") / 100;
                            break;
                        case "webvtt.bg.color":
                        case "webvtt.bg.opacity":
                            var l = Services.prefs.getCharPref("webvtt.bg.color"),
                                u = Services.prefs.getIntPref("webvtt.bg.opacity") / 100;
                            i.backgroundSet = t(l, u);
                            break;
                        case "webvtt.edge.color":
                        case "webvtt.edge.type":
                            var c = Services.prefs.getIntPref("webvtt.edge.type"),
                                d = Services.prefs.getCharPref("webvtt.edge.color");
                            i.edgeSet = ["", "0px 0px ", "4px 4px 4px ", "-2px -2px ", "2px 2px "][c] + t(d)
                    }
                }
                if ("undefined" != typeof Services) {
                    var i = {};
                    ["webvtt.font.color", "webvtt.font.opacity", "webvtt.font.scale", "webvtt.bg.color", "webvtt.bg.opacity", "webvtt.edge.color", "webvtt.edge.type"].forEach((function(e) {
                        n(0, 0, e), Services.prefs.addObserver(e, n, !1)
                    }))
                }
                var a = Object.create || function() {
                    function e() {}
                    return function(t) {
                        if (1 !== arguments.length) throw new Error("Object.create shim only accepts one parameter.");
                        return e.prototype = t, new e
                    }
                }();

                function s(e, t) {
                    this.name = "ParsingError", this.code = e.code, this.message = t || e.message
                }

                function o(e) {
                    function t(e, t, r, n) {
                        return 3600 * (0 | e) + 60 * (0 | t) + (0 | r) + (0 | n) / 1e3
                    }
                    var r = e.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
                    return r ? r[3] ? t(r[1], r[2], r[3].replace(":", ""), r[4]) : r[1] > 59 ? t(r[1], r[2], 0, r[4]) : t(0, r[1], r[2], r[4]) : null
                }

                function l() {
                    this.values = a(null)
                }

                function u(e, t, r, n) {
                    var i = n ? e.split(n) : [e];
                    for (var a in i)
                        if ("string" == typeof i[a]) {
                            var s = i[a].split(r);
                            if (2 === s.length) t(s[0], s[1])
                        }
                }
                s.prototype = a(Error.prototype), s.prototype.constructor = s, s.Errors = {
                    BadSignature: {
                        code: 0,
                        message: "Malformed WebVTT signature."
                    },
                    BadTimeStamp: {
                        code: 1,
                        message: "Malformed time stamp."
                    }
                }, l.prototype = {
                    set: function(e, t) {
                        this.get(e) || "" === t || (this.values[e] = t)
                    },
                    get: function(e, t, r) {
                        return r ? this.has(e) ? this.values[e] : t[r] : this.has(e) ? this.values[e] : t
                    },
                    has: function(e) {
                        return e in this.values
                    },
                    alt: function(e, t, r) {
                        for (var n = 0; n < r.length; ++n)
                            if (t === r[n]) {
                                this.set(e, t);
                                break
                            }
                    },
                    integer: function(e, t) {
                        /^-?\d+$/.test(t) && this.set(e, parseInt(t, 10))
                    },
                    percent: function(e, t) {
                        return !!(t.match(/^([\d]{1,3})(\.[\d]*)?%$/) && (t = parseFloat(t)) >= 0 && t <= 100) && (this.set(e, t), !0)
                    }
                };
                var c = {
                        "&amp;": "&",
                        "&lt;": "<",
                        "&gt;": ">",
                        "&lrm;": "‎",
                        "&rlm;": "‏",
                        "&nbsp;": " "
                    },
                    d = {
                        c: "span",
                        i: "i",
                        b: "b",
                        u: "u",
                        ruby: "ruby",
                        rt: "rt",
                        v: "span",
                        lang: "span"
                    },
                    h = {
                        v: "title",
                        lang: "lang"
                    },
                    f = {
                        rt: "ruby"
                    };

                function g(e, t) {
                    function r() {
                        if (!t) return null;
                        var e, r = t.match(/^([^<]*)(<[^>]+>?)?/);
                        return e = r[1] ? r[1] : r[2], t = t.substr(e.length), e
                    }

                    function n(e) {
                        return c[e]
                    }

                    function i(e) {
                        for (; y = e.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);) e = e.replace(y[0], n);
                        return e
                    }

                    function a(e, t) {
                        return !f[t.localName] || f[t.localName] === e.localName
                    }

                    function s(t, r) {
                        var n = d[t];
                        if (!n) return null;
                        var i = e.document.createElement(n);
                        i.localName = n;
                        var a = h[t];
                        return a && r && (i[a] = r.trim()), i
                    }
                    for (var l, u = e.document.createElement("div"), g = u, p = []; null !== (l = r());)
                        if ("<" !== l[0]) g.appendChild(e.document.createTextNode(i(l)));
                        else {
                            if ("/" === l[1]) {
                                p.length && p[p.length - 1] === l.substr(2).replace(">", "") && (p.pop(), g = g.parentNode);
                                continue
                            }
                            var m, v = o(l.substr(1, l.length - 2));
                            if (v) {
                                m = e.document.createProcessingInstruction("timestamp", v), g.appendChild(m);
                                continue
                            }
                            var y = l.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
                            if (!y) continue;
                            if (!(m = s(y[1], y[3]))) continue;
                            if (!a(g, m)) continue;
                            y[2] && (m.className = y[2].substr(1).replace(".", " ")), p.push(y[1]), g.appendChild(m), g = m
                        }
                    return u
                }
                var p = [
                    [1470, 1470],
                    [1472, 1472],
                    [1475, 1475],
                    [1478, 1478],
                    [1488, 1514],
                    [1520, 1524],
                    [1544, 1544],
                    [1547, 1547],
                    [1549, 1549],
                    [1563, 1563],
                    [1566, 1610],
                    [1645, 1647],
                    [1649, 1749],
                    [1765, 1766],
                    [1774, 1775],
                    [1786, 1805],
                    [1807, 1808],
                    [1810, 1839],
                    [1869, 1957],
                    [1969, 1969],
                    [1984, 2026],
                    [2036, 2037],
                    [2042, 2042],
                    [2048, 2069],
                    [2074, 2074],
                    [2084, 2084],
                    [2088, 2088],
                    [2096, 2110],
                    [2112, 2136],
                    [2142, 2142],
                    [2208, 2208],
                    [2210, 2220],
                    [8207, 8207],
                    [64285, 64285],
                    [64287, 64296],
                    [64298, 64310],
                    [64312, 64316],
                    [64318, 64318],
                    [64320, 64321],
                    [64323, 64324],
                    [64326, 64449],
                    [64467, 64829],
                    [64848, 64911],
                    [64914, 64967],
                    [65008, 65020],
                    [65136, 65140],
                    [65142, 65276],
                    [67584, 67589],
                    [67592, 67592],
                    [67594, 67637],
                    [67639, 67640],
                    [67644, 67644],
                    [67647, 67669],
                    [67671, 67679],
                    [67840, 67867],
                    [67872, 67897],
                    [67903, 67903],
                    [67968, 68023],
                    [68030, 68031],
                    [68096, 68096],
                    [68112, 68115],
                    [68117, 68119],
                    [68121, 68147],
                    [68160, 68167],
                    [68176, 68184],
                    [68192, 68223],
                    [68352, 68405],
                    [68416, 68437],
                    [68440, 68466],
                    [68472, 68479],
                    [68608, 68680],
                    [126464, 126467],
                    [126469, 126495],
                    [126497, 126498],
                    [126500, 126500],
                    [126503, 126503],
                    [126505, 126514],
                    [126516, 126519],
                    [126521, 126521],
                    [126523, 126523],
                    [126530, 126530],
                    [126535, 126535],
                    [126537, 126537],
                    [126539, 126539],
                    [126541, 126543],
                    [126545, 126546],
                    [126548, 126548],
                    [126551, 126551],
                    [126553, 126553],
                    [126555, 126555],
                    [126557, 126557],
                    [126559, 126559],
                    [126561, 126562],
                    [126564, 126564],
                    [126567, 126570],
                    [126572, 126578],
                    [126580, 126583],
                    [126585, 126588],
                    [126590, 126590],
                    [126592, 126601],
                    [126603, 126619],
                    [126625, 126627],
                    [126629, 126633],
                    [126635, 126651],
                    [1114109, 1114109]
                ];

                function m(e) {
                    for (var t = 0; t < p.length; t++) {
                        var r = p[t];
                        if (e >= r[0] && e <= r[1]) return !0
                    }
                    return !1
                }

                function v() {}

                function y(e, t, r) {
                    var n = "undefined" != typeof navigator && /MSIE\s8\.0/.test(navigator.userAgent),
                        a = "rgba(255, 255, 255, 1)",
                        s = "rgba(0, 0, 0, 0.8)",
                        o = "";
                    void 0 !== i && (a = i.fontSet, s = i.backgroundSet, o = i.edgeSet), n && (a = "rgb(255, 255, 255)", s = "rgb(0, 0, 0)"), v.call(this), this.cue = t, this.cueDiv = g(e, t.text);
                    var l = {
                        color: a,
                        backgroundColor: s,
                        textShadow: o,
                        position: "relative",
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0,
                        display: "inline"
                    };
                    n || (l.writingMode = "" === t.vertical ? "horizontal-tb" : "lr" === t.vertical ? "vertical-lr" : "vertical-rl", l.unicodeBidi = "plaintext"), this.applyStyles(l, this.cueDiv), this.div = e.document.createElement("div"), l = {
                        textAlign: "middle" === t.align ? "center" : t.align,
                        font: r.font,
                        whiteSpace: "pre-line",
                        position: "absolute"
                    }, n || (l.direction = function(e) {
                        var t = [],
                            r = "";
                        if (!e || !e.childNodes) return "ltr";

                        function n(e, t) {
                            for (var r = t.childNodes.length - 1; r >= 0; r--) e.push(t.childNodes[r])
                        }

                        function i(e) {
                            if (!e || !e.length) return null;
                            var t = e.pop(),
                                r = t.textContent || t.innerText;
                            if (r) {
                                var a = r.match(/^.*(\n|\r)/);
                                return a ? (e.length = 0, a[0]) : r
                            }
                            return "ruby" === t.tagName ? i(e) : t.childNodes ? (n(e, t), i(e)) : void 0
                        }
                        for (n(t, e); r = i(t);)
                            for (var a = 0; a < r.length; a++)
                                if (m(r.charCodeAt(a))) return "rtl";
                        return "ltr"
                    }(this.cueDiv), l.writingMode = "" === t.vertical ? "horizontal-tb" : "lr" === t.vertical ? "vertical-lr" : "vertical-rl".stylesunicodeBidi = "plaintext"), this.applyStyles(l), this.div.appendChild(this.cueDiv);
                    var u = 0;
                    switch (t.positionAlign) {
                        case "start":
                            u = t.position;
                            break;
                        case "middle":
                            u = t.position - t.size / 2;
                            break;
                        case "end":
                            u = t.position - t.size
                    }
                    "" === t.vertical ? this.applyStyles({
                        left: this.formatStyle(u, "%"),
                        width: this.formatStyle(t.size, "%")
                    }) : this.applyStyles({
                        top: this.formatStyle(u, "%"),
                        height: this.formatStyle(t.size, "%")
                    }), this.move = function(e) {
                        this.applyStyles({
                            top: this.formatStyle(e.top, "px"),
                            bottom: this.formatStyle(e.bottom, "px"),
                            left: this.formatStyle(e.left, "px"),
                            right: this.formatStyle(e.right, "px"),
                            height: this.formatStyle(e.height, "px"),
                            width: this.formatStyle(e.width, "px")
                        })
                    }
                }

                function T(e) {
                    var t, r, n, i, a = "undefined" != typeof navigator && /MSIE\s8\.0/.test(navigator.userAgent);
                    if (e.div) {
                        r = e.div.offsetHeight, n = e.div.offsetWidth, i = e.div.offsetTop;
                        var s = (s = e.div.childNodes) && (s = s[0]) && s.getClientRects && s.getClientRects();
                        e = e.div.getBoundingClientRect(), t = s ? Math.max(s[0] && s[0].height || 0, e.height / s.length) : 0
                    }
                    this.left = e.left, this.right = e.right, this.top = e.top || i, this.height = e.height || r, this.bottom = e.bottom || i + (e.height || r), this.width = e.width || n, this.lineHeight = void 0 !== t ? t : e.lineHeight, a && !this.lineHeight && (this.lineHeight = 13)
                }

                function b(e, t, r, n) {
                    var i = new T(t),
                        a = t.cue,
                        s = function(e) {
                            if ("number" == typeof e.line && (e.snapToLines || e.line >= 0 && e.line <= 100)) return e.line;
                            if (!e.track || !e.track.textTrackList || !e.track.textTrackList.mediaElement) return -1;
                            for (var t = e.track, r = t.textTrackList, n = 0, i = 0; i < r.length && r[i] !== t; i++) "showing" === r[i].mode && n++;
                            return -1 * ++n
                        }(a),
                        o = [];
                    if (a.snapToLines) {
                        var l;
                        switch (a.vertical) {
                            case "":
                                o = ["+y", "-y"], l = "height";
                                break;
                            case "rl":
                                o = ["+x", "-x"], l = "width";
                                break;
                            case "lr":
                                o = ["-x", "+x"], l = "width"
                        }
                        var u = i.lineHeight,
                            c = u * Math.round(s),
                            d = r[l] + u,
                            h = o[0];
                        Math.abs(c) > d && (c = c < 0 ? -1 : 1, c *= Math.ceil(d / u) * u), s < 0 && (c += "" === a.vertical ? r.height : r.width, o = o.reverse()), i.move(h, c)
                    } else {
                        var f = i.lineHeight / r.height * 100;
                        switch (a.lineAlign) {
                            case "middle":
                                s -= f / 2;
                                break;
                            case "end":
                                s -= f
                        }
                        switch (a.vertical) {
                            case "":
                                t.applyStyles({
                                    top: t.formatStyle(s, "%")
                                });
                                break;
                            case "rl":
                                t.applyStyles({
                                    left: t.formatStyle(s, "%")
                                });
                                break;
                            case "lr":
                                t.applyStyles({
                                    right: t.formatStyle(s, "%")
                                })
                        }
                        o = ["+y", "-x", "+x", "-y"], i = new T(t)
                    }
                    var g = function(e, t) {
                        for (var i, a = new T(e), s = 1, o = 0; o < t.length; o++) {
                            for (; e.overlapsOppositeAxis(r, t[o]) || e.within(r) && e.overlapsAny(n);) e.move(t[o]);
                            if (e.within(r)) return e;
                            var l = e.intersectPercentage(r);
                            s > l && (i = new T(e), s = l), e = new T(a)
                        }
                        return i || a
                    }(i, o);
                    t.move(g.toCSSCompatValues(r))
                }

                function E() {}
                v.prototype.applyStyles = function(e, t) {
                    for (var r in t = t || this.div, e) e.hasOwnProperty(r) && (t.style[r] = e[r])
                }, v.prototype.formatStyle = function(e, t) {
                    return 0 === e ? 0 : e + t
                }, y.prototype = a(v.prototype), y.prototype.constructor = y, T.prototype.move = function(e, t) {
                    switch (t = void 0 !== t ? t : this.lineHeight, e) {
                        case "+x":
                            this.left += t, this.right += t;
                            break;
                        case "-x":
                            this.left -= t, this.right -= t;
                            break;
                        case "+y":
                            this.top += t, this.bottom += t;
                            break;
                        case "-y":
                            this.top -= t, this.bottom -= t
                    }
                }, T.prototype.overlaps = function(e) {
                    return this.left < e.right && this.right > e.left && this.top < e.bottom && this.bottom > e.top
                }, T.prototype.overlapsAny = function(e) {
                    for (var t = 0; t < e.length; t++)
                        if (this.overlaps(e[t])) return !0;
                    return !1
                }, T.prototype.within = function(e) {
                    return this.top >= e.top && this.bottom <= e.bottom && this.left >= e.left && this.right <= e.right
                }, T.prototype.overlapsOppositeAxis = function(e, t) {
                    switch (t) {
                        case "+x":
                            return this.left < e.left;
                        case "-x":
                            return this.right > e.right;
                        case "+y":
                            return this.top < e.top;
                        case "-y":
                            return this.bottom > e.bottom
                    }
                }, T.prototype.intersectPercentage = function(e) {
                    return Math.max(0, Math.min(this.right, e.right) - Math.max(this.left, e.left)) * Math.max(0, Math.min(this.bottom, e.bottom) - Math.max(this.top, e.top)) / (this.height * this.width)
                }, T.prototype.toCSSCompatValues = function(e) {
                    return {
                        top: this.top - e.top,
                        bottom: e.bottom - this.bottom,
                        left: this.left - e.left,
                        right: e.right - this.right,
                        height: this.height,
                        width: this.width
                    }
                }, T.getSimpleBoxPosition = function(e) {
                    var t = e.div ? e.div.offsetHeight : e.tagName ? e.offsetHeight : 0,
                        r = e.div ? e.div.offsetWidth : e.tagName ? e.offsetWidth : 0,
                        n = e.div ? e.div.offsetTop : e.tagName ? e.offsetTop : 0;
                    return {
                        left: (e = e.div ? e.div.getBoundingClientRect() : e.tagName ? e.getBoundingClientRect() : e).left,
                        right: e.right,
                        top: e.top || n,
                        height: e.height || t,
                        bottom: e.bottom || n + (e.height || t),
                        width: e.width || r
                    }
                }, E.StringDecoder = function() {
                    return {
                        decode: function(e) {
                            if (!e) return "";
                            if ("string" != typeof e) throw new Error("Error - expected string data.");
                            return decodeURIComponent(encodeURIComponent(e))
                        }
                    }
                }, E.convertCueToDOMTree = function(e, t) {
                    return e && t ? g(e, t) : null
                };
                E.processCues = function(e, t, n) {
                    if (!e || !t || !n) return null;
                    for (; n.firstChild;) n.removeChild(n.firstChild);
                    var i = e.document.createElement("div");
                    if (i.style.position = "absolute", i.style.left = "0", i.style.right = "0", i.style.top = "0", i.style.bottom = "0", i.style.margin = "1.5%", n.appendChild(i), function(e) {
                            for (var t = 0; t < e.length; t++)
                                if (e[t].hasBeenReset || !e[t].displayState) return !0;
                            return !1
                        }(t)) {
                        var a = [],
                            s = T.getSimpleBoxPosition(i),
                            o = {
                                font: Math.round(.05 * s.height * 100) / 100 * r + "px sans-serif"
                            };
                        ! function() {
                            for (var r, n, l = 0; l < t.length; l++) n = t[l], r = new y(e, n, o), i.appendChild(r.div), b(0, r, s, a), n.displayState = r.div, a.push(T.getSimpleBoxPosition(r))
                        }()
                    } else
                        for (var l = 0; l < t.length; l++) i.appendChild(t[l].displayState)
                }, E.Parser = function(e, t, r) {
                    this.window = e, this.state = "INITIAL", this.buffer = "", this.decoder = t || new TextDecoder("utf8"), this.regionList = [], this.VTTCue = r
                }, E.Parser.prototype = {
                    reportOrThrowError: function(e) {
                        if (!(e instanceof s)) throw e;
                        this.onparsingerror && this.onparsingerror(e)
                    },
                    parse: function(e) {
                        var t, r, n = this;

                        function i() {
                            for (var e = n.buffer, t = 0; t < e.length && "\r" !== e[t] && "\n" !== e[t];) ++t;
                            var r = e.substr(0, t);
                            return "\r" === e[t] && ++t, "\n" === e[t] && ++t, n.buffer = e.substr(t), r
                        }

                        function a(e) {
                            e.match(/X-TIMESTAMP-MAP/) ? u(e, (function(e, t) {
                                if ("X-TIMESTAMP-MAP" === e) ! function(e) {
                                    var t = new l;
                                    u(e, (function(e, r) {
                                        switch (e) {
                                            case "MPEGT":
                                                t.integer(e + "S", r);
                                                break;
                                            case "LOCA":
                                                t.set(e + "L", o(r))
                                        }
                                    }), /[^\d]:/, /,/), n.ontimestampmap && n.ontimestampmap({
                                        MPEGTS: t.get("MPEGTS"),
                                        LOCAL: t.get("LOCAL")
                                    })
                                }(t)
                            }), /=/) : u(e, (function(e, t) {
                                if ("Region" === e) ! function(e) {
                                    var t = new l;
                                    if (u(e, (function(e, r) {
                                            switch (e) {
                                                case "id":
                                                    t.set(e, r);
                                                    break;
                                                case "width":
                                                    t.percent(e, r);
                                                    break;
                                                case "lines":
                                                    t.integer(e, r);
                                                    break;
                                                case "regionanchor":
                                                case "viewportanchor":
                                                    var n = r.split(",");
                                                    if (2 !== n.length) break;
                                                    var i = new l;
                                                    if (i.percent("x", n[0]), i.percent("y", n[1]), !i.has("x") || !i.has("y")) break;
                                                    t.set(e + "X", i.get("x")), t.set(e + "Y", i.get("y"));
                                                    break;
                                                case "scroll":
                                                    t.alt(e, r, ["up"])
                                            }
                                        }), /=/, /\s/), t.has("id")) {
                                        var r = new n.window.VTTRegion;
                                        r.width = t.get("width", 100), r.lines = t.get("lines", 3), r.regionAnchorX = t.get("regionanchorX", 0), r.regionAnchorY = t.get("regionanchorY", 100), r.viewportAnchorX = t.get("viewportanchorX", 0), r.viewportAnchorY = t.get("viewportanchorY", 100), r.scroll = t.get("scroll", ""), n.onregion && n.onregion(r), n.regionList.push({
                                            id: t.get("id"),
                                            region: r
                                        })
                                    }
                                }(t)
                            }), /:/)
                        }
                        if (e && (n.buffer += n.decoder.decode(e, {
                                stream: !0
                            })), "INITIAL" === n.state) {
                            if (!/\r\n|\n/.test(n.buffer)) return this;
                            var c = (t = i()).match(/^WEBVTT([ \t].*)?$/);
                            if (!c || !c[0]) return r = new s(s.Errors.BadSignature), n.reportOrThrowError(r), "CUETEXT" === n.state && n.cue && n.oncue && n.oncue(n.cue), n.cue = null, void(n.state = "INITIAL" === n.state ? "BADWEBVTT" : "BADCUE");
                            n.state = "HEADER"
                        }
                        var d = !1,
                            h = 0;
                        var f, g = (f = function() {
                            if (n.buffer && /\r\n|\n/.test(n.buffer)) switch (d ? d = !1 : t = i(), n.state) {
                                case "HEADER":
                                    /:/.test(t) ? a(t) : t || (n.state = "ID"), g();
                                    break;
                                case "NOTE":
                                    t || (n.state = "ID"), g();
                                    break;
                                case "ID":
                                    if (/^NOTE($|[ \t])/.test(t)) {
                                        n.state = "NOTE", g();
                                        break
                                    }
                                    if (!t) {
                                        g();
                                        break
                                    }
                                    if (n.cue = new(n.VTTCue || n.window.VTTCue)(0, 0, ""), n.state = "CUE", -1 === t.indexOf("--\x3e")) {
                                        n.cue.id = t, g();
                                        break
                                    }
                                case "CUE":
                                    ! function(e, t, r, n, i) {
                                        var a, c = e;

                                        function d() {
                                            var t = o(e);
                                            if (null !== t || !i) return e = e.replace(/^[^\sa-zA-Z-]+/, ""), t;
                                            i(new s(s.Errors.BadTimeStamp, "Malformed timestamp: " + c))
                                        }

                                        function h() {
                                            e = e.replace(/^\s+/, "")
                                        }
                                        h(), void 0 !== (a = d()) && (t.startTime = a, h(), "--\x3e" === e.substr(0, 3) ? (e = e.substr(3), h(), void 0 !== (a = d()) && (t.endTime = a, h(), function(e, t) {
                                            var i = new l;
                                            u(e, (function(e, t) {
                                                switch (e) {
                                                    case "region":
                                                        for (var n = r.length - 1; n >= 0; n--)
                                                            if (r[n].id === t) {
                                                                i.set(e, r[n].region);
                                                                break
                                                            }
                                                        break;
                                                    case "vertical":
                                                        i.alt(e, t, ["rl", "lr"]);
                                                        break;
                                                    case "line":
                                                        var a = t.split(","),
                                                            s = a[0];
                                                        i.integer(e, s), i.percent(e, s) && i.set("snapToLines", !1), i.alt(e, s, ["auto"]), 2 === a.length && i.alt("lineAlign", a[1], ["start", "middle", "end"]);
                                                        break;
                                                    case "position":
                                                        a = t.split(","), i.percent(e, a[0]), 2 === a.length && i.alt("positionAlign", a[1], ["start", "middle", "end"]);
                                                        break;
                                                    case "size":
                                                        i.percent(e, t);
                                                        break;
                                                    case "align":
                                                        i.alt(e, t, ["start", "middle", "end", "left", "right"])
                                                }
                                            }), /:/, /\s/), t.region = i.get("region", null), t.vertical = i.get("vertical", ""), t.line = i.get("line", "auto"), t.lineAlign = i.get("lineAlign", "start"), t.snapToLines = i.get("snapToLines", !0), t.size = i.get("size", 100), t.align = i.get("align", "center"), t.position = i.get("position", "auto"), t.positionAlign = i.get("positionAlign", {
                                                start: "start",
                                                left: "start",
                                                middle: "middle",
                                                end: "end",
                                                right: "end",
                                                center: "center"
                                            }, t.align), n()
                                        }(e, t))) : i(new s(s.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '--\x3e'): " + c)))
                                    }(t, n.cue, n.regionList, (function() {
                                        n.state = "CUETEXT", g()
                                    }), (function(e) {
                                        n.reportOrThrowError(e), n.cue = null, n.state = "BADCUE", g()
                                    }));
                                    break;
                                case "CUETEXT":
                                    var e = -1 !== t.indexOf("--\x3e");
                                    if (!t || e && (d = !0)) {
                                        n.oncue && n.oncue(n.cue), n.cue = null, n.state = "ID", g();
                                        break
                                    }
                                    n.cue.text && (n.cue.text += "\n"), n.cue.text += t, g();
                                    break;
                                case "BADCUE":
                                    t || (n.state = "ID"), g()
                            } else n.flush()
                        }, function() {
                            if (++h < 1e3) return f();
                            setTimeout((function() {
                                h = 0, f()
                            }))
                        });
                        return g(), this
                    },
                    flush: function() {
                        var e = this;
                        try {
                            if (e.buffer += e.decoder.decode(), (e.cue || "HEADER" === e.state) && (e.buffer += "\n\n", e.parse()), "INITIAL" === e.state) throw new s(s.Errors.BadSignature)
                        } catch (t) {
                            e.reportOrThrowError(t)
                        }
                        return e.onflush && e.onflush(), this
                    }
                }, e.WebVTT = E
            }(this)
        },
        8109: (e, t, r) => {
            var n = r(5852),
                i = r(2258),
                a = r(5126),
                s = r(8816),
                o = r(8742),
                l = r(4044),
                u = r(3924),
                c = r(6137);

            function d(e) {
                var t = (e = e || {}).containerElement;
                if (!(t instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var r = document.createElement("style");
                t.appendChild(r), r.sheet.insertRule("video::cue { font-size: 4vmin; color: rgb(255, 255, 255); background-color: rgba(0, 0, 0, 0); text-shadow: rgb(34, 34, 34) 1px 1px 0.1em; }");
                var d = document.createElement("video");
                d.style.width = "100%", d.style.height = "100%", d.style.backgroundColor = "black", d.controls = !1, d.playsInline = !0, d.onerror = function() {
                    ! function() {
                        if (g) return;
                        var e;
                        switch (d.error.code) {
                            case 1:
                                e = l.HTML_VIDEO.MEDIA_ERR_ABORTED;
                                break;
                            case 2:
                                e = l.HTML_VIDEO.MEDIA_ERR_NETWORK;
                                break;
                            case 3:
                                e = l.HTML_VIDEO.MEDIA_ERR_DECODE;
                                break;
                            case 4:
                                e = l.HTML_VIDEO.MEDIA_ERR_SRC_NOT_SUPPORTED;
                                break;
                            default:
                                e = l.UNKNOWN_ERROR
                        }
                        E(Object.assign({}, e, {
                            critical: !0,
                            error: d.error
                        }))
                    }()
                }, d.onended = function() {
                    f.emit("ended")
                }, d.onpause = function() {
                    S("paused")
                }, d.onplay = function() {
                    S("paused")
                }, d.ontimeupdate = function() {
                    S("time"), S("buffered")
                }, d.ondurationchange = function() {
                    S("duration")
                }, d.onwaiting = function() {
                    S("buffering"), S("buffered")
                }, d.onseeking = function() {
                    S("time"), S("buffering"), S("buffered")
                }, d.onseeked = function() {
                    S("time"), S("buffering"), S("buffered")
                }, d.onstalled = function() {
                    S("buffering"), S("buffered")
                }, d.onplaying = function() {
                    S("time"), S("buffering"), S("buffered")
                }, d.oncanplay = function() {
                    S("buffering"), S("buffered")
                }, d.canplaythrough = function() {
                    S("buffering"), S("buffered")
                }, d.onloadedmetadata = function() {
                    S("loaded")
                }, d.onloadeddata = function() {
                    S("buffering"), S("buffered")
                }, d.onvolumechange = function() {
                    S("volume"), S("muted")
                }, d.onratechange = function() {
                    S("playbackSpeed")
                }, d.textTracks.onchange = function() {
                    S("subtitlesTracks"), S("selectedSubtitlesTrackId"), b(), Array.from(d.textTracks).forEach((function(e) {
                        e.oncuechange = b
                    }))
                }, t.appendChild(d);
                var h = null,
                    f = new n,
                    g = !1,
                    p = null,
                    m = 0,
                    v = 1,
                    y = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        buffered: !1,
                        subtitlesTracks: !1,
                        selectedSubtitlesTrackId: !1,
                        subtitlesOffset: !1,
                        subtitlesSize: !1,
                        subtitlesTextColor: !1,
                        subtitlesBackgroundColor: !1,
                        subtitlesOutlineColor: !1,
                        audioTracks: !1,
                        selectedAudioTrackId: !1,
                        volume: !1,
                        muted: !1,
                        playbackSpeed: !1
                    };

                function T(e) {
                    switch (e) {
                        case "stream":
                            return p;
                        case "loaded":
                            return null === p ? null : d.readyState >= d.HAVE_METADATA;
                        case "paused":
                            return null === p ? null : !!d.paused;
                        case "time":
                            return null !== p && null !== d.currentTime && isFinite(d.currentTime) ? Math.floor(1e3 * d.currentTime) : null;
                        case "duration":
                            return null !== p && null !== d.duration && isFinite(d.duration) ? Math.floor(1e3 * d.duration) : null;
                        case "buffering":
                            return null === p ? null : d.readyState < d.HAVE_FUTURE_DATA;
                        case "buffered":
                            if (null === p) return null;
                            for (var t = null !== d.currentTime && isFinite(d.currentTime) ? d.currentTime : 0, n = 0; n < d.buffered.length; n++)
                                if (d.buffered.start(n) <= t && t <= d.buffered.end(n)) return Math.floor(1e3 * d.buffered.end(n));
                            return Math.floor(1e3 * t);
                        case "subtitlesTracks":
                            return null === p ? [] : Array.from(d.textTracks).map((function(e, t) {
                                return Object.freeze({
                                    id: "EMBEDDED_" + String(t),
                                    lang: e.language,
                                    label: e.label || null,
                                    origin: "EMBEDDED",
                                    embedded: !0
                                })
                            }));
                        case "selectedSubtitlesTrackId":
                            return null === p ? null : Array.from(d.textTracks).reduce((function(e, t, r) {
                                return null === e && "showing" === t.mode ? "EMBEDDED_" + String(r) : e
                            }), null);
                        case "subtitlesOffset":
                            return g ? null : m;
                        case "subtitlesSize":
                            return g ? null : 25 * parseInt(r.sheet.cssRules[0].style.fontSize, 10);
                        case "subtitlesTextColor":
                            return g ? null : r.sheet.cssRules[0].style.color;
                        case "subtitlesBackgroundColor":
                            return g ? null : r.sheet.cssRules[0].style.backgroundColor;
                        case "subtitlesOutlineColor":
                            return g ? null : r.sheet.cssRules[0].style.textShadow.slice(0, r.sheet.cssRules[0].style.textShadow.indexOf(")") + 1);
                        case "subtitlesOpacity":
                            return g ? null : Math.round(100 * v);
                        case "audioTracks":
                            return null !== h && Array.isArray(h.audioTracks) ? h.audioTracks.map((function(e) {
                                return Object.freeze({
                                    id: "EMBEDDED_" + String(e.id),
                                    lang: "string" == typeof e.lang && e.lang.length > 0 ? e.lang : "string" == typeof e.name && e.name.length > 0 ? e.name : String(e.id),
                                    label: "string" == typeof e.name && e.name.length > 0 ? e.name : "string" == typeof e.lang && e.lang.length > 0 ? e.lang : String(e.id),
                                    origin: "EMBEDDED",
                                    embedded: !0
                                })
                            })) : [];
                        case "selectedAudioTrackId":
                            return null !== h && null !== h.audioTrack && isFinite(h.audioTrack) && -1 !== h.audioTrack ? "EMBEDDED_" + String(h.audioTrack) : null;
                        case "volume":
                            return g || null === d.volume || !isFinite(d.volume) ? null : Math.floor(100 * d.volume);
                        case "muted":
                            return g ? null : !!d.muted;
                        case "playbackSpeed":
                            return g || null === d.playbackRate || !isFinite(d.playbackRate) ? null : d.playbackRate;
                        default:
                            return null
                    }
                }

                function b() {
                    Array.from(d.textTracks).forEach((function(e) {
                        Array.from(e.cues || []).forEach((function(e) {
                            e.snapToLines = !1, e.line = 100 - m
                        }))
                    }))
                }

                function E(e) {
                    f.emit("error", e), e.critical && A("unload")
                }

                function S(e) {
                    y[e] && f.emit("propChanged", e, T(e))
                }

                function A(e, n) {
                    switch (e) {
                        case "load":
                            A("unload"), n && n.stream && "string" == typeof n.stream.url ? (p = n.stream, S("stream"), S("loaded"), d.autoplay = "boolean" != typeof n.autoplay || n.autoplay, d.currentTime = null !== n.time && isFinite(n.time) ? parseInt(n.time, 10) / 1e3 : 0, S("paused"), S("time"), S("duration"), S("buffering"), S("buffered"), S("subtitlesTracks"), S("selectedSubtitlesTrackId"), S("audioTracks"), S("selectedAudioTrackId"), u(p).then((function(e) {
                                p === n.stream && ("application/vnd.apple.mpegurl" === e && i.isSupported() ? ((h = new i(c)).on(i.Events.AUDIO_TRACKS_UPDATED, (function() {
                                    S("audioTracks"), S("selectedAudioTrackId")
                                })), h.on(i.Events.AUDIO_TRACK_SWITCHED, (function() {
                                    S("audioTracks"), S("selectedAudioTrackId")
                                })), h.loadSource(p.url), h.attachMedia(d)) : d.src = p.url)
                            })).catch((function() {
                                p === n.stream && (d.src = p.url)
                            }))) : E(Object.assign({}, l.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: n ? n.stream : null
                            }));
                            break;
                        case "unload":
                            p = null, Array.from(d.textTracks).forEach((function(e) {
                                e.oncuechange = null
                            })), null !== h && (h.removeAllListeners(), h.detachMedia(d), h.destroy(), h = null), d.removeAttribute("src"), d.load(), d.currentTime = 0, S("stream"), S("loaded"), S("paused"), S("time"), S("duration"), S("buffering"), S("buffered"), S("subtitlesTracks"), S("selectedSubtitlesTrackId"), S("audioTracks"), S("selectedAudioTrackId");
                            break;
                        case "destroy":
                            A("unload"), g = !0, S("subtitlesOffset"), S("subtitlesSize"), S("subtitlesTextColor"), S("subtitlesBackgroundColor"), S("subtitlesOutlineColor"), S("subtitlesOpacity"), S("volume"), S("muted"), S("playbackSpeed"), f.removeAllListeners(), d.onerror = null, d.onended = null, d.onpause = null, d.onplay = null, d.ontimeupdate = null, d.ondurationchange = null, d.onwaiting = null, d.onseeking = null, d.onseeked = null, d.onstalled = null, d.onplaying = null, d.oncanplay = null, d.canplaythrough = null, d.onloadeddata = null, d.onvolumechange = null, d.onratechange = null, d.textTracks.onchange = null, t.removeChild(d), t.removeChild(r)
                    }
                }
                this.on = function(e, t) {
                    if (g) throw new Error("Video is destroyed");
                    f.on(e, t)
                }, this.dispatch = function(e) {
                    if (g) throw new Error("Video is destroyed");
                    if (e) switch ((e = s(a(e))).type) {
                        case "observeProp":
                            return t = e.propName, void(y.hasOwnProperty(t) && (f.emit("propValue", t, T(t)), y[t] = !0));
                        case "setProp":
                            return void
                            function(e, t) {
                                switch (e) {
                                    case "paused":
                                        null !== p && (t ? d.pause() : d.play(), S("paused"));
                                        break;
                                    case "time":
                                        null !== p && null !== t && isFinite(t) && (d.currentTime = parseInt(t, 10) / 1e3, S("time"));
                                        break;
                                    case "selectedSubtitlesTrackId":
                                        if (null !== p) {
                                            Array.from(d.textTracks).forEach((function(e, r) {
                                                e.mode = "EMBEDDED_" + String(r) === t ? "showing" : "disabled"
                                            }));
                                            var n = T("subtitlesTracks").find((function(e) {
                                                return e.id === t
                                            }));
                                            n && (S("selectedSubtitlesTrackId"), f.emit("subtitlesTrackLoaded", n))
                                        }
                                        break;
                                    case "subtitlesOffset":
                                        null !== t && isFinite(t) && (m = Math.max(0, Math.min(100, parseInt(t, 10))), b(), S("subtitlesOffset"));
                                        break;
                                    case "subtitlesSize":
                                        null !== t && isFinite(t) && (r.sheet.cssRules[0].style.fontSize = Math.floor(Math.max(0, parseInt(t, 10)) / 25) + "vmin", S("subtitlesSize"));
                                        break;
                                    case "subtitlesTextColor":
                                        if ("string" == typeof t) {
                                            try {
                                                r.sheet.cssRules[0].style.color = o(t).rgb().string()
                                            } catch (e) {
                                                console.error("HTMLVideo", e)
                                            }
                                            S("subtitlesTextColor")
                                        }
                                        break;
                                    case "subtitlesBackgroundColor":
                                        if ("string" == typeof t) {
                                            try {
                                                r.sheet.cssRules[0].style.backgroundColor = o(t).rgb().string()
                                            } catch (e) {
                                                console.error("HTMLVideo", e)
                                            }
                                            S("subtitlesBackgroundColor")
                                        }
                                        break;
                                    case "subtitlesOutlineColor":
                                        if ("string" == typeof t) {
                                            try {
                                                r.sheet.cssRules[0].style.textShadow = o(t).rgb().string() + " 1px 1px 0.1em"
                                            } catch (e) {
                                                console.error("HTMLVideo", e)
                                            }
                                            S("subtitlesOutlineColor")
                                        }
                                        break;
                                    case "subtitlesOpacity":
                                        if ("number" == typeof t) {
                                            try {
                                                v = Math.min(Math.max(t / 100, 0), 1), r.sheet.cssRules[0].style.opacity = v + ""
                                            } catch (e) {
                                                console.error("VVideo with HTML Subtitles", e)
                                            }
                                            S("subtitlesOpacity")
                                        }
                                        break;
                                    case "selectedAudioTrackId":
                                        if (null !== h) {
                                            var i = T("audioTracks").find((function(e) {
                                                return e.id === t
                                            }));
                                            h.audioTrack = i ? parseInt(i.id.split("_").pop(), 10) : -1, i && (S("selectedAudioTrackId"), f.emit("audioTrackLoaded", i))
                                        }
                                        break;
                                    case "volume":
                                        null !== t && isFinite(t) && (d.muted = !1, d.volume = Math.max(0, Math.min(100, parseInt(t, 10))) / 100, S("muted"), S("volume"));
                                        break;
                                    case "muted":
                                        d.muted = !!t, S("muted");
                                        break;
                                    case "playbackSpeed":
                                        null !== t && isFinite(t) && (d.playbackRate = parseFloat(t), S("playbackSpeed"))
                                }
                            }(e.propName, e.propValue);
                        case "command":
                            return void A(e.commandName, e.commandArgs)
                    }
                    var t;
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            d.canPlayStream = function(e) {
                return !e || e.behaviorHints && e.behaviorHints.notWebReady ? Promise.resolve(!1) : u(e).then((function(e) {
                    return !!document.createElement("video").canPlayType(e) || "application/vnd.apple.mpegurl" === e && i.isSupported()
                })).catch((function() {
                    return !1
                }))
            }, d.manifest = {
                name: "HTMLVideo",
                external: !1,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "buffered", "audioTracks", "selectedAudioTrackId", "subtitlesTracks", "selectedSubtitlesTrackId", "subtitlesOffset", "subtitlesSize", "subtitlesTextColor", "subtitlesBackgroundColor", "subtitlesOutlineColor", "subtitlesOpacity", "volume", "muted", "playbackSpeed"],
                commands: ["load", "unload", "destroy"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded", "audioTrackLoaded"]
            }, e.exports = d
        },
        8270: (e, t, r) => {
            var n = r(6359);
            e.exports = n
        },
        8336: e => {
            e.exports = function(e) {
                return !(!e || "string" == typeof e) && (e instanceof Array || Array.isArray(e) || e.length >= 0 && (e.splice instanceof Function || Object.getOwnPropertyDescriptor(e, e.length - 1) && "String" !== e.constructor.name))
            }
        },
        8684: function() {
            ! function(e) {
                var t = {
                        "": !0,
                        lr: !0,
                        rl: !0
                    },
                    r = {
                        start: !0,
                        middle: !0,
                        end: !0,
                        left: !0,
                        right: !0
                    };

                function n(e) {
                    return "string" == typeof e && (!!r[e.toLowerCase()] && e.toLowerCase())
                }

                function i(e) {
                    for (var t = 1; t < arguments.length; t++) {
                        var r = arguments[t];
                        for (var n in r) e[n] = r[n]
                    }
                    return e
                }

                function a(e, r, a) {
                    var s = this,
                        o = /MSIE\s8\.0/.test(navigator.userAgent),
                        l = {};
                    o ? s = document.createElement("custom") : l.enumerable = !0, s.hasBeenReset = !1;
                    var u = "",
                        c = !1,
                        d = e,
                        h = r,
                        f = a,
                        g = null,
                        p = "",
                        m = !0,
                        v = "auto",
                        y = "start",
                        T = 50,
                        b = "middle",
                        E = 50,
                        S = "middle";
                    if (Object.defineProperty(s, "id", i({}, l, {
                            get: function() {
                                return u
                            },
                            set: function(e) {
                                u = "" + e
                            }
                        })), Object.defineProperty(s, "pauseOnExit", i({}, l, {
                            get: function() {
                                return c
                            },
                            set: function(e) {
                                c = !!e
                            }
                        })), Object.defineProperty(s, "startTime", i({}, l, {
                            get: function() {
                                return d
                            },
                            set: function(e) {
                                if ("number" != typeof e) throw new TypeError("Start time must be set to a number.");
                                d = e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "endTime", i({}, l, {
                            get: function() {
                                return h
                            },
                            set: function(e) {
                                if ("number" != typeof e) throw new TypeError("End time must be set to a number.");
                                h = e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "text", i({}, l, {
                            get: function() {
                                return f
                            },
                            set: function(e) {
                                f = "" + e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "region", i({}, l, {
                            get: function() {
                                return g
                            },
                            set: function(e) {
                                g = e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "vertical", i({}, l, {
                            get: function() {
                                return p
                            },
                            set: function(e) {
                                var r = function(e) {
                                    return "string" == typeof e && !!t[e.toLowerCase()] && e.toLowerCase()
                                }(e);
                                if (!1 === r) throw new SyntaxError("An invalid or illegal string was specified.");
                                p = r, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "snapToLines", i({}, l, {
                            get: function() {
                                return m
                            },
                            set: function(e) {
                                m = !!e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "line", i({}, l, {
                            get: function() {
                                return v
                            },
                            set: function(e) {
                                if ("number" != typeof e && "auto" !== e) throw new SyntaxError("An invalid number or illegal string was specified.");
                                v = e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "lineAlign", i({}, l, {
                            get: function() {
                                return y
                            },
                            set: function(e) {
                                var t = n(e);
                                if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                                y = t, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "position", i({}, l, {
                            get: function() {
                                return T
                            },
                            set: function(e) {
                                if (e < 0 || e > 100) throw new Error("Position must be between 0 and 100.");
                                T = e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "positionAlign", i({}, l, {
                            get: function() {
                                return b
                            },
                            set: function(e) {
                                var t = n(e);
                                if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                                b = t, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "size", i({}, l, {
                            get: function() {
                                return E
                            },
                            set: function(e) {
                                if (e < 0 || e > 100) throw new Error("Size must be between 0 and 100.");
                                E = e, this.hasBeenReset = !0
                            }
                        })), Object.defineProperty(s, "align", i({}, l, {
                            get: function() {
                                return S
                            },
                            set: function(e) {
                                var t = n(e);
                                if (!t) throw new SyntaxError("An invalid or illegal string was specified.");
                                S = t, this.hasBeenReset = !0
                            }
                        })), s.displayState = void 0, o) return s
                }
                a.prototype.getCueAsHTML = function() {
                    return WebVTT.convertCueToDOMTree(window, this.text)
                }, e.VTTCue = e.VTTCue || a
            }(this)
        },
        8742: (e, t, r) => {
            const n = r(6138),
                i = r(1880),
                a = ["keyword", "gray", "hex"],
                s = {};
            for (const e of Object.keys(i)) s[[...i[e].labels].sort().join("")] = e;
            const o = {};

            function l(e, t) {
                if (!(this instanceof l)) return new l(e, t);
                if (t && t in a && (t = null), t && !(t in i)) throw new Error("Unknown model: " + t);
                let r, u;
                if (null == e) this.model = "rgb", this.color = [0, 0, 0], this.valpha = 1;
                else if (e instanceof l) this.model = e.model, this.color = [...e.color], this.valpha = e.valpha;
                else if ("string" == typeof e) {
                    const t = n.get(e);
                    if (null === t) throw new Error("Unable to parse color from string: " + e);
                    this.model = t.model, u = i[this.model].channels, this.color = t.value.slice(0, u), this.valpha = "number" == typeof t.value[u] ? t.value[u] : 1
                } else if (e.length > 0) {
                    this.model = t || "rgb", u = i[this.model].channels;
                    const r = Array.prototype.slice.call(e, 0, u);
                    this.color = h(r, u), this.valpha = "number" == typeof e[u] ? e[u] : 1
                } else if ("number" == typeof e) this.model = "rgb", this.color = [e >> 16 & 255, e >> 8 & 255, 255 & e], this.valpha = 1;
                else {
                    this.valpha = 1;
                    const t = Object.keys(e);
                    "alpha" in e && (t.splice(t.indexOf("alpha"), 1), this.valpha = "number" == typeof e.alpha ? e.alpha : 0);
                    const n = t.sort().join("");
                    if (!(n in s)) throw new Error("Unable to parse color from object: " + JSON.stringify(e));
                    this.model = s[n];
                    const {
                        labels: a
                    } = i[this.model], o = [];
                    for (r = 0; r < a.length; r++) o.push(e[a[r]]);
                    this.color = h(o)
                }
                if (o[this.model])
                    for (u = i[this.model].channels, r = 0; r < u; r++) {
                        const e = o[this.model][r];
                        e && (this.color[r] = e(this.color[r]))
                    }
                this.valpha = Math.max(0, Math.min(1, this.valpha)), Object.freeze && Object.freeze(this)
            }
            l.prototype = {
                toString() {
                    return this.string()
                },
                toJSON() {
                    return this[this.model]()
                },
                string(e) {
                    let t = this.model in n.to ? this : this.rgb();
                    t = t.round("number" == typeof e ? e : 1);
                    const r = 1 === t.valpha ? t.color : [...t.color, this.valpha];
                    return n.to[t.model](r)
                },
                percentString(e) {
                    const t = this.rgb().round("number" == typeof e ? e : 1),
                        r = 1 === t.valpha ? t.color : [...t.color, this.valpha];
                    return n.to.rgb.percent(r)
                },
                array() {
                    return 1 === this.valpha ? [...this.color] : [...this.color, this.valpha]
                },
                object() {
                    const e = {},
                        {
                            channels: t
                        } = i[this.model],
                        {
                            labels: r
                        } = i[this.model];
                    for (let n = 0; n < t; n++) e[r[n]] = this.color[n];
                    return 1 !== this.valpha && (e.alpha = this.valpha), e
                },
                unitArray() {
                    const e = this.rgb().color;
                    return e[0] /= 255, e[1] /= 255, e[2] /= 255, 1 !== this.valpha && e.push(this.valpha), e
                },
                unitObject() {
                    const e = this.rgb().object();
                    return e.r /= 255, e.g /= 255, e.b /= 255, 1 !== this.valpha && (e.alpha = this.valpha), e
                },
                round(e) {
                    return e = Math.max(e || 0, 0), new l([...this.color.map(u(e)), this.valpha], this.model)
                },
                alpha(e) {
                    return void 0 !== e ? new l([...this.color, Math.max(0, Math.min(1, e))], this.model) : this.valpha
                },
                red: c("rgb", 0, d(255)),
                green: c("rgb", 1, d(255)),
                blue: c("rgb", 2, d(255)),
                hue: c(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, (e => (e % 360 + 360) % 360)),
                saturationl: c("hsl", 1, d(100)),
                lightness: c("hsl", 2, d(100)),
                saturationv: c("hsv", 1, d(100)),
                value: c("hsv", 2, d(100)),
                chroma: c("hcg", 1, d(100)),
                gray: c("hcg", 2, d(100)),
                white: c("hwb", 1, d(100)),
                wblack: c("hwb", 2, d(100)),
                cyan: c("cmyk", 0, d(100)),
                magenta: c("cmyk", 1, d(100)),
                yellow: c("cmyk", 2, d(100)),
                black: c("cmyk", 3, d(100)),
                x: c("xyz", 0, d(95.047)),
                y: c("xyz", 1, d(100)),
                z: c("xyz", 2, d(108.833)),
                l: c("lab", 0, d(100)),
                a: c("lab", 1),
                b: c("lab", 2),
                keyword(e) {
                    return void 0 !== e ? new l(e) : i[this.model].keyword(this.color)
                },
                hex(e) {
                    return void 0 !== e ? new l(e) : n.to.hex(this.rgb().round().color)
                },
                hexa(e) {
                    if (void 0 !== e) return new l(e);
                    const t = this.rgb().round().color;
                    let r = Math.round(255 * this.valpha).toString(16).toUpperCase();
                    return 1 === r.length && (r = "0" + r), n.to.hex(t) + r
                },
                rgbNumber() {
                    const e = this.rgb().color;
                    return (255 & e[0]) << 16 | (255 & e[1]) << 8 | 255 & e[2]
                },
                luminosity() {
                    const e = this.rgb().color,
                        t = [];
                    for (const [r, n] of e.entries()) {
                        const e = n / 255;
                        t[r] = e <= .04045 ? e / 12.92 : ((e + .055) / 1.055) ** 2.4
                    }
                    return .2126 * t[0] + .7152 * t[1] + .0722 * t[2]
                },
                contrast(e) {
                    const t = this.luminosity(),
                        r = e.luminosity();
                    return t > r ? (t + .05) / (r + .05) : (r + .05) / (t + .05)
                },
                level(e) {
                    const t = this.contrast(e);
                    return t >= 7 ? "AAA" : t >= 4.5 ? "AA" : ""
                },
                isDark() {
                    const e = this.rgb().color;
                    return (2126 * e[0] + 7152 * e[1] + 722 * e[2]) / 1e4 < 128
                },
                isLight() {
                    return !this.isDark()
                },
                negate() {
                    const e = this.rgb();
                    for (let t = 0; t < 3; t++) e.color[t] = 255 - e.color[t];
                    return e
                },
                lighten(e) {
                    const t = this.hsl();
                    return t.color[2] += t.color[2] * e, t
                },
                darken(e) {
                    const t = this.hsl();
                    return t.color[2] -= t.color[2] * e, t
                },
                saturate(e) {
                    const t = this.hsl();
                    return t.color[1] += t.color[1] * e, t
                },
                desaturate(e) {
                    const t = this.hsl();
                    return t.color[1] -= t.color[1] * e, t
                },
                whiten(e) {
                    const t = this.hwb();
                    return t.color[1] += t.color[1] * e, t
                },
                blacken(e) {
                    const t = this.hwb();
                    return t.color[2] += t.color[2] * e, t
                },
                grayscale() {
                    const e = this.rgb().color,
                        t = .3 * e[0] + .59 * e[1] + .11 * e[2];
                    return l.rgb(t, t, t)
                },
                fade(e) {
                    return this.alpha(this.valpha - this.valpha * e)
                },
                opaquer(e) {
                    return this.alpha(this.valpha + this.valpha * e)
                },
                rotate(e) {
                    const t = this.hsl();
                    let r = t.color[0];
                    return r = (r + e) % 360, r = r < 0 ? 360 + r : r, t.color[0] = r, t
                },
                mix(e, t) {
                    if (!e || !e.rgb) throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof e);
                    const r = e.rgb(),
                        n = this.rgb(),
                        i = void 0 === t ? .5 : t,
                        a = 2 * i - 1,
                        s = r.alpha() - n.alpha(),
                        o = ((a * s == -1 ? a : (a + s) / (1 + a * s)) + 1) / 2,
                        u = 1 - o;
                    return l.rgb(o * r.red() + u * n.red(), o * r.green() + u * n.green(), o * r.blue() + u * n.blue(), r.alpha() * i + n.alpha() * (1 - i))
                }
            };
            for (const e of Object.keys(i)) {
                if (a.includes(e)) continue;
                const {
                    channels: t
                } = i[e];
                l.prototype[e] = function(...t) {
                    return this.model === e ? new l(this) : t.length > 0 ? new l(t, e) : new l([...(r = i[this.model][e].raw(this.color), Array.isArray(r) ? r : [r]), this.valpha], e);
                    var r
                }, l[e] = function(...r) {
                    let n = r[0];
                    return "number" == typeof n && (n = h(r, t)), new l(n, e)
                }
            }

            function u(e) {
                return function(t) {
                    return function(e, t) {
                        return Number(e.toFixed(t))
                    }(t, e)
                }
            }

            function c(e, t, r) {
                e = Array.isArray(e) ? e : [e];
                for (const n of e)(o[n] || (o[n] = []))[t] = r;
                return e = e[0],
                    function(n) {
                        let i;
                        return void 0 !== n ? (r && (n = r(n)), i = this[e](), i.color[t] = n, i) : (i = this[e]().color[t], r && (i = r(i)), i)
                    }
            }

            function d(e) {
                return function(t) {
                    return Math.max(0, Math.min(e, t))
                }
            }

            function h(e, t) {
                for (let r = 0; r < t; r++) "number" != typeof e[r] && (e[r] = 0);
                return e
            }
            e.exports = l
        },
        8816: e => {
            e.exports = function e(t) {
                return Object.freeze(t), Object.getOwnPropertyNames(t).forEach((function(r) {
                    !t.hasOwnProperty(r) || null === t[r] || "object" != typeof t[r] && "function" != typeof t[r] || Object.isFrozen(t[r]) || e(t[r])
                })), t
            }
        },
        8868: (e, t, r) => {
            "use strict";
            var n = r(6694),
                i = r(6226);

            function a() {
                this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null
            }
            t.parse = T, t.resolve = function(e, t) {
                return T(e, !1, !0).resolve(t)
            }, t.resolveObject = function(e, t) {
                return e ? T(e, !1, !0).resolveObject(t) : t
            }, t.format = function(e) {
                i.isString(e) && (e = T(e));
                return e instanceof a ? e.format() : a.prototype.format.call(e)
            }, t.Url = a;
            var s = /^([a-z0-9.+-]+:)/i,
                o = /:[0-9]*$/,
                l = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
                u = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]),
                c = ["'"].concat(u),
                d = ["%", "/", "?", ";", "#"].concat(c),
                h = ["/", "?", "#"],
                f = /^[+a-z0-9A-Z_-]{0,63}$/,
                g = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
                p = {
                    javascript: !0,
                    "javascript:": !0
                },
                m = {
                    javascript: !0,
                    "javascript:": !0
                },
                v = {
                    http: !0,
                    https: !0,
                    ftp: !0,
                    gopher: !0,
                    file: !0,
                    "http:": !0,
                    "https:": !0,
                    "ftp:": !0,
                    "gopher:": !0,
                    "file:": !0
                },
                y = r(4329);

            function T(e, t, r) {
                if (e && i.isObject(e) && e instanceof a) return e;
                var n = new a;
                return n.parse(e, t, r), n
            }
            a.prototype.parse = function(e, t, r) {
                if (!i.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
                var a = e.indexOf("?"),
                    o = -1 !== a && a < e.indexOf("#") ? "?" : "#",
                    u = e.split(o);
                u[0] = u[0].replace(/\\/g, "/");
                var T = e = u.join(o);
                if (T = T.trim(), !r && 1 === e.split("#").length) {
                    var b = l.exec(T);
                    if (b) return this.path = T, this.href = T, this.pathname = b[1], b[2] ? (this.search = b[2], this.query = t ? y.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this
                }
                var E = s.exec(T);
                if (E) {
                    var S = (E = E[0]).toLowerCase();
                    this.protocol = S, T = T.substr(E.length)
                }
                if (r || E || T.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                    var A = "//" === T.substr(0, 2);
                    !A || E && m[E] || (T = T.substr(2), this.slashes = !0)
                }
                if (!m[E] && (A || E && !v[E])) {
                    for (var k, L, R = -1, I = 0; I < h.length; I++) {
                        -1 !== (w = T.indexOf(h[I])) && (-1 === R || w < R) && (R = w)
                    } - 1 !== (L = -1 === R ? T.lastIndexOf("@") : T.lastIndexOf("@", R)) && (k = T.slice(0, L), T = T.slice(L + 1), this.auth = decodeURIComponent(k)), R = -1;
                    for (I = 0; I < d.length; I++) {
                        var w; - 1 !== (w = T.indexOf(d[I])) && (-1 === R || w < R) && (R = w)
                    } - 1 === R && (R = T.length), this.host = T.slice(0, R), T = T.slice(R), this.parseHost(), this.hostname = this.hostname || "";
                    var D = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
                    if (!D)
                        for (var C = this.hostname.split(/\./), x = (I = 0, C.length); I < x; I++) {
                            var _ = C[I];
                            if (_ && !_.match(f)) {
                                for (var O = "", P = 0, M = _.length; P < M; P++) _.charCodeAt(P) > 127 ? O += "x" : O += _[P];
                                if (!O.match(f)) {
                                    var F = C.slice(0, I),
                                        N = C.slice(I + 1),
                                        U = _.match(g);
                                    U && (F.push(U[1]), N.unshift(U[2])), N.length && (T = "/" + N.join(".") + T), this.hostname = F.join(".");
                                    break
                                }
                            }
                        }
                    this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), D || (this.hostname = n.toASCII(this.hostname));
                    var B = this.port ? ":" + this.port : "",
                        G = this.hostname || "";
                    this.host = G + B, this.href += this.host, D && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== T[0] && (T = "/" + T))
                }
                if (!p[S])
                    for (I = 0, x = c.length; I < x; I++) {
                        var V = c[I];
                        if (-1 !== T.indexOf(V)) {
                            var H = encodeURIComponent(V);
                            H === V && (H = escape(V)), T = T.split(V).join(H)
                        }
                    }
                var K = T.indexOf("#"); - 1 !== K && (this.hash = T.substr(K), T = T.slice(0, K));
                var j = T.indexOf("?");
                if (-1 !== j ? (this.search = T.substr(j), this.query = T.substr(j + 1), t && (this.query = y.parse(this.query)), T = T.slice(0, j)) : t && (this.search = "", this.query = {}), T && (this.pathname = T), v[S] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
                    B = this.pathname || "";
                    var Y = this.search || "";
                    this.path = B + Y
                }
                return this.href = this.format(), this
            }, a.prototype.format = function() {
                var e = this.auth || "";
                e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");
                var t = this.protocol || "",
                    r = this.pathname || "",
                    n = this.hash || "",
                    a = !1,
                    s = "";
                this.host ? a = e + this.host : this.hostname && (a = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (a += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = y.stringify(this.query));
                var o = this.search || s && "?" + s || "";
                return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || v[t]) && !1 !== a ? (a = "//" + (a || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : a || (a = ""), n && "#" !== n.charAt(0) && (n = "#" + n), o && "?" !== o.charAt(0) && (o = "?" + o), t + a + (r = r.replace(/[?#]/g, (function(e) {
                    return encodeURIComponent(e)
                }))) + (o = o.replace("#", "%23")) + n
            }, a.prototype.resolve = function(e) {
                return this.resolveObject(T(e, !1, !0)).format()
            }, a.prototype.resolveObject = function(e) {
                if (i.isString(e)) {
                    var t = new a;
                    t.parse(e, !1, !0), e = t
                }
                for (var r = new a, n = Object.keys(this), s = 0; s < n.length; s++) {
                    var o = n[s];
                    r[o] = this[o]
                }
                if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;
                if (e.slashes && !e.protocol) {
                    for (var l = Object.keys(e), u = 0; u < l.length; u++) {
                        var c = l[u];
                        "protocol" !== c && (r[c] = e[c])
                    }
                    return v[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r
                }
                if (e.protocol && e.protocol !== r.protocol) {
                    if (!v[e.protocol]) {
                        for (var d = Object.keys(e), h = 0; h < d.length; h++) {
                            var f = d[h];
                            r[f] = e[f]
                        }
                        return r.href = r.format(), r
                    }
                    if (r.protocol = e.protocol, e.host || m[e.protocol]) r.pathname = e.pathname;
                    else {
                        for (var g = (e.pathname || "").split("/"); g.length && !(e.host = g.shift()););
                        e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== g[0] && g.unshift(""), g.length < 2 && g.unshift(""), r.pathname = g.join("/")
                    }
                    if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {
                        var p = r.pathname || "",
                            y = r.search || "";
                        r.path = p + y
                    }
                    return r.slashes = r.slashes || e.slashes, r.href = r.format(), r
                }
                var T = r.pathname && "/" === r.pathname.charAt(0),
                    b = e.host || e.pathname && "/" === e.pathname.charAt(0),
                    E = b || T || r.host && e.pathname,
                    S = E,
                    A = r.pathname && r.pathname.split("/") || [],
                    k = (g = e.pathname && e.pathname.split("/") || [], r.protocol && !v[r.protocol]);
                if (k && (r.hostname = "", r.port = null, r.host && ("" === A[0] ? A[0] = r.host : A.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === g[0] ? g[0] = e.host : g.unshift(e.host)), e.host = null), E = E && ("" === g[0] || "" === A[0])), b) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, A = g;
                else if (g.length) A || (A = []), A.pop(), A = A.concat(g), r.search = e.search, r.query = e.query;
                else if (!i.isNullOrUndefined(e.search)) {
                    if (k) r.hostname = r.host = A.shift(), (D = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = D.shift(), r.host = r.hostname = D.shift());
                    return r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r
                }
                if (!A.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;
                for (var L = A.slice(-1)[0], R = (r.host || e.host || A.length > 1) && ("." === L || ".." === L) || "" === L, I = 0, w = A.length; w >= 0; w--) "." === (L = A[w]) ? A.splice(w, 1) : ".." === L ? (A.splice(w, 1), I++) : I && (A.splice(w, 1), I--);
                if (!E && !S)
                    for (; I--; I) A.unshift("..");
                !E || "" === A[0] || A[0] && "/" === A[0].charAt(0) || A.unshift(""), R && "/" !== A.join("/").substr(-1) && A.push("");
                var D, C = "" === A[0] || A[0] && "/" === A[0].charAt(0);
                k && (r.hostname = r.host = C ? "" : A.length ? A.shift() : "", (D = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = D.shift(), r.host = r.hostname = D.shift()));
                return (E = E || r.host && A.length) && !C && A.unshift(""), A.length ? r.pathname = A.join("/") : (r.pathname = null, r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r
            }, a.prototype.parseHost = function() {
                var e = this.host,
                    t = o.exec(e);
                t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e)
            }
        },
        8914: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(4044),
                o = .0066,
                l = {
                    loaded: "loaded",
                    stream: null,
                    paused: "pause",
                    time: "time-pos",
                    duration: "duration",
                    buffering: "buffering",
                    volume: "volume",
                    muted: "mute",
                    playbackSpeed: "speed",
                    audioTracks: "audioTracks",
                    selectedAudioTrackId: "aid",
                    subtitlesTracks: "subtitlesTracks",
                    selectedSubtitlesTrackId: "sid",
                    subtitlesSize: "sub-scale",
                    subtitlesOffset: "sub-pos",
                    subtitlesDelay: "sub-delay",
                    subtitlesTextColor: "sub-color",
                    subtitlesBackgroundColor: "sub-back-color",
                    subtitlesOutlineColor: "sub-border-color"
                };

            function u(e) {
                return e.split(".").slice(0, 2).map((function(e) {
                    return parseInt(e)
                }))
            }

            function c(e) {
                var t, r = (e = e || {}).shellTransport,
                    c = {},
                    d = {},
                    h = {};
                Object.keys(l).forEach((function(e) {
                    l[e] && (h[l[e]] = e)
                }));
                var f = new Promise((function(e) {
                    t = e
                }));
                k("unload"), r.send("mpv-command", ["stop"]), r.send("mpv-observe-prop", "path"), r.send("mpv-observe-prop", "time-pos"), r.send("mpv-observe-prop", "volume"), r.send("mpv-observe-prop", "pause"), r.send("mpv-observe-prop", "seeking"), r.send("mpv-observe-prop", "eof-reached"), r.send("mpv-observe-prop", "duration"), r.send("mpv-observe-prop", "metadata"), r.send("mpv-observe-prop", "video-params"), r.send("mpv-observe-prop", "track-list"), r.send("mpv-observe-prop", "paused-for-cache"), r.send("mpv-observe-prop", "cache-buffering-state"), r.send("mpv-observe-prop", "aid"), r.send("mpv-observe-prop", "vid"), r.send("mpv-observe-prop", "sid"), r.send("mpv-observe-prop", "sub-scale"), r.send("mpv-observe-prop", "sub-pos"), r.send("mpv-observe-prop", "sub-delay"), r.send("mpv-observe-prop", "speed"), r.send("mpv-observe-prop", "mpv-version"), r.send("mpv-observe-prop", "ffmpeg-version");
                var g = new n,
                    p = !1,
                    m = null,
                    v = 0;

                function y(t) {
                    for (var r = t ? "" : "transparent", n = e.containerElement; n; n = n.parentElement) n.style.background = r;
                    if (((window || {}).document || {}).getElementsByTagName) {
                        var i = window.document.getElementsByTagName("body");
                        (i || [])[0] && (i[0].style.background = r)
                    }
                }

                function T(e) {
                    console.log(e.name + ": " + e.data)
                }
                var b = 0;

                function E(e) {
                    return l[e] ? d[l[e]] : (console.log("Unsupported prop requested", e), null)
                }

                function S(e) {
                    g.emit("error", e), e.critical && k("unload")
                }

                function A(e) {
                    c[e] && g.emit("propChanged", e, E(e))
                }

                function k(t, n) {
                    switch (t) {
                        case "load":
                            k("unload"), n && n.stream && "string" == typeof n.stream.url ? f.then((function(t) {
                                m = n.stream, A("stream"), r.send("mpv-set-prop", ["no-sub-ass"]);
                                var i = n.hardwareDecoding ? "auto-copy" : "no";
                                r.send("mpv-set-prop", ["hwdec", i]);
                                var a = "Win32" === navigator.platform ? "direct3d" : "opengl",
                                    s = e.mpvSeparateWindow ? a : "opengl-cb",
                                    o = e.mpvSeparateWindow ? "yes" : "no";
                                r.send("mpv-set-prop", ["vo", s]), r.send("mpv-set-prop", ["osc", o]), r.send("mpv-set-prop", ["input-default-bindings", o]), r.send("mpv-set-prop", ["input-vo-keyboard", o]);
                                var l, c, h, f = Math.floor(parseInt(n.time, 10) / 1e3) || 0;
                                0 !== f ? (l = "0.39", c = u(t), h = u(l), c[0] > h[0] || !(c[0] < h[0]) && c[1] >= h[1] ? r.send("mpv-command", ["loadfile", m.url, "replace", "-1", "start=+" + f]) : r.send("mpv-command", ["loadfile", m.url, "replace", "start=+" + f])) : r.send("mpv-command", ["loadfile", m.url]), r.send("mpv-set-prop", ["pause", !1]), r.send("mpv-set-prop", ["speed", d.speed]), d.aid && ("string" == typeof d.aid && d.aid.startsWith("EMBEDDED_") ? r.send("mpv-set-prop", ["aid", d.aid.slice(9)]) : r.send("mpv-set-prop", ["aid", d.aid])), r.send("mpv-set-prop", ["mute", "no"]), A("paused"), A("time"), A("duration"), A("buffering"), A("volume"), A("muted"), A("subtitlesTracks"), A("selectedSubtitlesTrackId")
                            })) : S(Object.assign({}, s.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: n ? n.stream : null
                            }));
                            break;
                        case "unload":
                            d = {
                                loaded: !1,
                                pause: !1,
                                mute: !1,
                                speed: 1,
                                subtitlesTracks: [],
                                audioTracks: [],
                                buffering: !1,
                                aid: null,
                                sid: null
                            }, v = 0, r.send("mpv-command", ["stop"]), A("loaded"), A("stream"), A("paused"), A("time"), A("duration"), A("buffering"), A("volume"), A("muted"), A("subtitlesTracks"), A("selectedSubtitlesTrackId"), y(!0);
                            break;
                        case "destroy":
                            k("unload"), p = !0, g.removeAllListeners()
                    }
                }
                r.on("mpv-prop-change", (function(e) {
                    switch (e.name) {
                        case "mpv-version":
                            t(e.data), d[e.name] = T(e);
                            break;
                        case "ffmpeg-version":
                            d[e.name] = T(e);
                            break;
                        case "duration":
                            var r = 0 | e.data;
                            d[e.name] = e.data >= 30 && (!v || r === v) ? Math.round(1e3 * e.data) : null, v = v ? v + r >> 1 : r, d.loaded = r > 0, d.loaded && (y(!1), A("loaded"));
                            break;
                        case "time-pos":
                        case "sub-delay":
                            d[e.name] = Math.round(1e3 * e.data);
                            break;
                        case "sub-scale":
                            d[e.name] = Math.round(e.data / o);
                            break;
                        case "sub-pos":
                            d[e.name] = 100 - e.data;
                            break;
                        case "paused-for-cache":
                        case "seeking":
                            d.buffering !== e.data && (d.buffering = e.data, A("buffering"));
                            break;
                        case "aid":
                        case "sid":
                        case "vid":
                            d[e.name] = function(e) {
                                return e.data ? "EMBEDDED_" + e.data.toString() : null
                            }(e);
                            break;
                        case "track-list":
                            d.audioTracks = e.data.filter((function(e) {
                                return "audio" === e.type
                            })).map((function(e, t) {
                                return {
                                    id: "EMBEDDED_" + e.id,
                                    lang: void 0 === e.lang ? "Track" + (t + 1) : e.lang,
                                    label: void 0 === e.title || void 0 === e.lang ? "" : e.title || e.lang,
                                    origin: "EMBEDDED",
                                    embedded: !0,
                                    mode: e.id === d.aid ? "showing" : "disabled"
                                }
                            })), A("audioTracks"), d.subtitlesTracks = e.data.filter((function(e) {
                                return "sub" === e.type
                            })).map((function(e, t) {
                                return {
                                    id: "EMBEDDED_" + e.id,
                                    lang: void 0 === e.lang ? "Track " + (t + 1) : e.lang,
                                    label: void 0 === e.title || void 0 === e.lang ? "" : e.title || e.lang,
                                    origin: "EMBEDDED",
                                    embedded: !0,
                                    mode: e.id === d.sid ? "showing" : "disabled"
                                }
                            })), A("subtitlesTracks");
                            break;
                        default:
                            d[e.name] = e.data
                    }
                    var n = "time-pos" === e.name ? Math.floor(d["time-pos"] / 1e3) : null;
                    n && b === n || !h[e.name] || (n && (b = n), A(h[e.name]))
                })), r.on("mpv-event-ended", (function(e) {
                    e.error ? S(e.error) : g.emit("ended")
                })), this.on = function(e, t) {
                    if (p) throw new Error("Video is destroyed");
                    g.on(e, t)
                }, this.dispatch = function(e) {
                    if (p) throw new Error("Video is destroyed");
                    if (e) switch ((e = a(i(e))).type) {
                        case "observeProp":
                            t = e.propName, g.emit("propValue", t, E(t)), c[t] = !0;
                            break;
                        case "setProp":
                            return void
                            function(e, t) {
                                switch (e) {
                                    case "paused":
                                        null !== m && r.send("mpv-set-prop", ["pause", t]);
                                        break;
                                    case "time":
                                        null !== m && null !== t && isFinite(t) && r.send("mpv-set-prop", ["time-pos", t / 1e3]);
                                        break;
                                    case "playbackSpeed":
                                        null !== m && null !== t && isFinite(t) && r.send("mpv-set-prop", ["speed", t]);
                                        break;
                                    case "volume":
                                        null !== m && null !== t && isFinite(t) && (d.mute = !1, r.send("mpv-set-prop", ["mute", "no"]), r.send("mpv-set-prop", ["volume", t]), A("muted"), A("volume"));
                                        break;
                                    case "muted":
                                        null !== m && (r.send("mpv-set-prop", ["mute", t ? "yes" : "no"]), d.mute = t, A("muted"));
                                        break;
                                    case "selectedAudioTrackId":
                                        if (null !== m) {
                                            var n = t.slice(9);
                                            r.send("mpv-set-prop", ["aid", n])
                                        }
                                        break;
                                    case "selectedSubtitlesTrackId":
                                        null !== m && (t ? (n = t.slice(9), r.send("mpv-set-prop", ["sid", n]), g.emit("subtitlesTrackLoaded", t)) : (r.send("mpv-set-prop", ["sid", "no"]), d.sid = null)), A("selectedSubtitlesTrackId");
                                        break;
                                    case "subtitlesSize":
                                        r.send("mpv-set-prop", [l[e], t * o]);
                                        break;
                                    case "subtitlesDelay":
                                        r.send("mpv-set-prop", [l[e], t]);
                                        break;
                                    case "subtitlesOffset":
                                        r.send("mpv-set-prop", [l[e], 100 - t]);
                                        break;
                                    case "subtitlesTextColor":
                                    case "subtitlesBackgroundColor":
                                    case "subtitlesOutlineColor":
                                        var i = t.replace(/^#(\w{6})(\w{2})$/, "#$2$1");
                                        r.send("mpv-set-prop", [l[e], i]);
                                        break;
                                    default:
                                        console.log("Unhandled setProp for", e)
                                }
                            }(e.propName, e.propValue);
                        case "command":
                            return void k(e.commandName, e.commandArgs)
                    }
                    var t
                }
            }
            c.canPlayStream = function() {
                return Promise.resolve(!0)
            }, c.manifest = {
                name: "ShellVideo",
                external: !1,
                props: Object.keys(l),
                commands: ["load", "unload", "destroy"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded"]
            }, e.exports = c
        },
        9049: (e, t, r) => {
            var n = r(5852),
                i = r(5126),
                a = r(8816),
                s = r(4044),
                o = r(4412);

            function l(e, t, r, n) {
                t && (e.onSuccess = t || function() {}), e.onFailure = function(t) {
                    console.log("WebOS", (e.method || n) + " [fail][" + t.errorCode + "] " + t.errorText), console.log("fail result", JSON.stringify(t)), r && r()
                }, window.webOS.service.request(n || "luna://com.webos.media", e)
            }

            function u(e, t, r) {
                window.webOS.service.request("luna://com.webos.applicationManager", {
                    method: "launch",
                    parameters: {
                        id: e.id,
                        params: {
                            payload: [{
                                fullPath: e.url,
                                artist: "",
                                subtitle: "",
                                dlnaInfo: {
                                    flagVal: 4096,
                                    cleartextSize: "-1",
                                    contentLength: "-1",
                                    opVal: 1,
                                    protocolInfo: "http-get:*:video/x-matroska:DLNA.ORG_OP=01;DLNA.ORG_CI=0;DLNA.ORG_FLAGS=01700000000000000000000000000000",
                                    duration: 0
                                },
                                mediaType: "VIDEO",
                                thumbnail: "",
                                deviceType: "DMR",
                                album: "",
                                fileName: e.name,
                                lastPlayPosition: e.position
                            }]
                        }
                    },
                    onSuccess: function() {
                        t && t()
                    },
                    onFailure: function() {
                        r && r(new Error("Failed to launch" + e.id)), "com.webos.app.photovideo" === e.id ? (e.id = "com.webos.app.smartshare", u(e, t, r)) : "com.webos.app.smartshare" === e.id && (e.id = "com.webos.app.mediadiscovery", u(e, t, r))
                    }
                })
            }
            var c = ["none", "black", "white", "yellow", "red", "green", "blue"],
                d = {
                    "rgba(0, 0, 0, 0)": "none",
                    "rgba(0, 0, 0, 255)": "black",
                    "rgba(255, 255, 255, 255)": "white",
                    "rgba(255, 255, 0, 255)": "yellow",
                    "rgba(255, 0, 0, 255)": "red",
                    "rgba(0, 255, 0, 255)": "green",
                    "rgba(0, 0, 255, 255)": "blue",
                    "rgba(0, 0, 0, 1)": "black",
                    "rgba(255, 255, 255, 1)": "white",
                    "rgba(255, 255, 0, 1)": "yellow",
                    "rgba(255, 0, 0, 1)": "red",
                    "rgba(0, 255, 0, 1)": "green",
                    "rgba(0, 0, 255, 1)": "blue",
                    "rgb(0, 0, 0)": "black",
                    "rgb(255, 255, 255)": "white",
                    "rgb(255, 255, 0)": "yellow",
                    "rgb(255, 0, 0)": "red",
                    "rgb(0, 255, 0)": "green",
                    "rgb(0, 0, 255)": "blue",
                    "#000000FF": "black",
                    "#FFFFFFFF": "white",
                    "#FFFF00FF": "yellow",
                    "#FF0000FF": "red",
                    "#00FF00FF": "green",
                    "#0000FFFF": "blue",
                    "#000000": "black",
                    "#FFFFFF": "white",
                    "#FFFF00": "yellow",
                    "#FF0000": "red",
                    "#00FF00": "green",
                    "#0000FF": "blue"
                };
            var h = {
                    unsupportedAudio: ["DTS", "TRUEHD"],
                    unsupportedSubs: ["HDMV/PGS", "VOBSUB"]
                },
                f = !1;

            function g() {
                f || window.webOS.service.request("luna://com.webos.service.config", {
                    method: "getConfigs",
                    parameters: {
                        configNames: ["tv.model.edidType"]
                    },
                    onSuccess: function(e) {
                        if (((e || {}).configs || {})["tv.model.edidType"]) {
                            f = !0;
                            var t = e.configs["tv.model.edidType"].toLowerCase();
                            t.includes("dts") && (h.unsupportedAudio = h.unsupportedAudio.filter((function(e) {
                                return "DTS" !== e
                            }))), t.includes("truehd") && (h.unsupportedAudio = h.unsupportedAudio.filter((function(e) {
                                return "TRUEHD" !== e
                            })))
                        }
                    },
                    onFailure: function(e) {
                        console.log("could not get deviceInfo", e)
                    }
                })
            }

            function p(e) {
                var t = (e = e || {}).containerElement;
                if (!(t instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var r = null,
                    f = 75,
                    p = !0,
                    m = !1,
                    v = !1,
                    y = [],
                    T = [],
                    b = {
                        color: "white",
                        font_size: 1,
                        bg_color: "none",
                        position: -1,
                        bg_opacity: 0,
                        char_opacity: 255
                    },
                    E = function(e) {
                        A.mediaId && (p = !e, l({
                            method: "setSubtitleEnable",
                            parameters: {
                                mediaId: A.mediaId,
                                enable: e
                            }
                        }))
                    },
                    S = document.createElement("style");
                t.appendChild(S), S.sheet.insertRule("video::cue { font-size: 4vmin; color: rgb(255, 255, 255); background-color: rgba(0, 0, 0, 0); text-shadow: rgb(34, 34, 34) 1px 1px 0.1em; }");
                var A = document.createElement("video");
                A.style.width = "100%", A.style.height = "100%", A.style.backgroundColor = "black", A.controls = !1, A.onerror = function() {
                    ! function() {
                        if (w) return;
                        var e;
                        switch ((A.error || {}).code) {
                            case 1:
                                e = s.HTML_VIDEO.MEDIA_ERR_ABORTED;
                                break;
                            case 2:
                                e = s.HTML_VIDEO.MEDIA_ERR_NETWORK;
                                break;
                            case 3:
                                e = s.HTML_VIDEO.MEDIA_ERR_DECODE, u({
                                    id: "com.webos.app.photovideo",
                                    url: D.url,
                                    name: "Stremio",
                                    position: -1
                                }, null, (function(e) {
                                    console.error(e)
                                }));
                                break;
                            case 4:
                                e = s.HTML_VIDEO.MEDIA_ERR_SRC_NOT_SUPPORTED, u({
                                    id: "com.webos.app.photovideo",
                                    url: D.url,
                                    name: "Stremio",
                                    position: -1
                                }, null, (function(e) {
                                    console.error(e)
                                }));
                                break;
                            default:
                                e = s.UNKNOWN_ERROR
                        }
                        B(Object.assign({}, e, {
                            critical: !0,
                            error: A.error
                        }))
                    }()
                }, A.onended = function() {
                    I.emit("ended")
                }, A.onpause = function() {
                    G("paused")
                }, A.onplay = function() {
                    G("paused")
                }, A.ontimeupdate = function() {
                    G("time"), G("buffered")
                }, A.ondurationchange = function() {
                    G("duration")
                }, A.onwaiting = function() {
                    G("buffering"), G("buffered")
                }, A.onseeking = function() {
                    G("buffering"), G("buffered")
                }, A.onseeked = function() {
                    G("buffering"), G("buffered")
                }, A.onstalled = function() {
                    G("buffering"), G("buffered")
                }, A.onplaying = function() {
                    G("buffering"), G("buffered"), r || (r = !0, G("loaded"))
                }, A.oncanplay = function() {
                    G("buffering"), G("buffered")
                }, A.canplaythrough = function() {
                    G("buffering"), G("buffered")
                }, A.onloadeddata = function() {
                    G("buffering"), G("buffered")
                }, A.onloadedmetadata = function() {
                    G("buffering"), G("buffered"), V("time", C)
                }, A.onvolumechange = function() {
                    G("volume"), G("muted")
                }, A.onratechange = function() {
                    G("playbackSpeed")
                }, A.textTracks.onchange = function() {
                    G("subtitlesTracks"), G("selectedSubtitlesTrackId"), U(), Array.from(A.textTracks).forEach((function(e) {
                        e.oncuechange = U
                    }))
                }, t.appendChild(A);
                var k = null,
                    L = null,
                    R = 1,
                    I = new n,
                    w = !1,
                    D = null,
                    C = null,
                    x = 0,
                    _ = 100,
                    O = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        buffered: !1,
                        subtitlesTracks: !1,
                        selectedSubtitlesTrackId: !1,
                        subtitlesOffset: !1,
                        subtitlesSize: !1,
                        subtitlesTextColor: !1,
                        subtitlesBackgroundColor: !1,
                        subtitlesOpacity: !1,
                        audioTracks: !1,
                        selectedAudioTrackId: !1,
                        volume: !1,
                        muted: !1,
                        playbackSpeed: !1
                    },
                    P = !1,
                    M = {
                        audio: [],
                        subs: []
                    };

                function F() {
                    P || null === D || (P = !0, o(D.url, (function(e) {
                        var t = 0,
                            r = 0;
                        y = [], T = [], e && (M = e), ((M || {}).subs || []).length && (M.subs.forEach((function(e) {
                            if (!h.unsupportedSubs.includes(e.codec || "")) {
                                var r = t;
                                t++, m || y.length || (m = r), y.push({
                                    id: "EMBEDDED_" + r,
                                    lang: e.lang || "eng",
                                    label: e.label || null,
                                    origin: "EMBEDDED",
                                    embedded: !0,
                                    mode: r === m ? "showing" : "disabled"
                                })
                            }
                        })), G("subtitlesTracks"), G("selectedSubtitlesTrackId")), ((M || {}).audio || []).length && (M.audio.forEach((function(e) {
                            if (!h.unsupportedAudio.includes(e.codec || "")) {
                                var t = r;
                                r++, v || T.length || (v = t), T.push({
                                    id: "EMBEDDED_" + t,
                                    lang: e.lang || "eng",
                                    label: e.label || null,
                                    origin: "EMBEDDED",
                                    embedded: !0,
                                    mode: t === v ? "showing" : "disabled"
                                })
                            }
                        })), v = "EMBEDDED_0", G("audioTracks"), G("selectedAudioTrackId"))
                    })))
                }

                function N(e) {
                    switch (e) {
                        case "stream":
                            return D;
                        case "loaded":
                            return r;
                        case "paused":
                            return null === D ? null : !!A.paused;
                        case "time":
                            return null !== D && null !== A.currentTime && isFinite(A.currentTime) ? Math.floor(1e3 * A.currentTime) : null;
                        case "duration":
                            return null !== D && null !== A.duration && isFinite(A.duration) ? Math.floor(1e3 * A.duration) : null;
                        case "buffering":
                            return null === D ? null : A.readyState < A.HAVE_FUTURE_DATA;
                        case "buffered":
                            if (null === D) return null;
                            for (var t = null !== A.currentTime && isFinite(A.currentTime) ? A.currentTime : 0, n = 0; n < A.buffered.length; n++)
                                if (A.buffered.start(n) <= t && t <= A.buffered.end(n)) return Math.floor(1e3 * A.buffered.end(n));
                            return Math.floor(1e3 * t);
                        case "subtitlesTracks":
                            return null === D ? [] : y;
                        case "selectedSubtitlesTrackId":
                            return null === D || p ? null : m;
                        case "subtitlesOffset":
                            return w ? null : x;
                        case "subtitlesSize":
                            return w ? null : f;
                        case "subtitlesTextColor":
                            return w ? null : k || "rgb(255, 255, 255)";
                        case "subtitlesBackgroundColor":
                            return w ? null : L || "rgba(0, 0, 0, 0)";
                        case "subtitlesOpacity":
                            return w ? null : _ || 100;
                        case "audioTracks":
                            return T;
                        case "selectedAudioTrackId":
                            return v;
                        case "volume":
                            return w || null === A.volume || !isFinite(A.volume) ? null : Math.floor(100 * A.volume);
                        case "muted":
                            return w ? null : !!A.muted;
                        case "playbackSpeed":
                            return w || null === R || !isFinite(R) ? null : R;
                        default:
                            return null
                    }
                }

                function U() {
                    Array.from(A.textTracks).forEach((function(e) {
                        Array.from(e.cues || []).forEach((function(e) {
                            e.snapToLines = !1, e.line = 100 - x
                        }))
                    }))
                }

                function B(e) {
                    I.emit("error", e), e.critical && H("unload")
                }

                function G(e) {
                    O[e] && I.emit("propChanged", e, N(e))
                }

                function V(e, t) {
                    switch (e) {
                        case "paused":
                            null !== D && (t ? A.pause() : A.play());
                            break;
                        case "time":
                            if (null !== D && A.readyState >= A.HAVE_METADATA && null !== t && isFinite(t)) try {
                                A.currentTime = parseInt(t, 10) / 1e3, G("time")
                            } catch (e) {}
                            break;
                        case "selectedSubtitlesTrackId":
                            if (A.mediaId && null !== D && 0 === (t || "").indexOf("EMBEDDED_")) {
                                E(!0), b.bg_opacity = "none" === b.bg_color ? 0 : 255, ["setSubtitleCharacterColor", "setSubtitleBackgroundColor", "setSubtitlePosition", "setSubtitleFontSize", "setSubtitleBackgroundOpacity", "setSubtitleCharacterOpacity"].forEach((function(e) {
                                    l({
                                        method: e,
                                        parameters: {
                                            mediaId: A.mediaId,
                                            charColor: b.color,
                                            bgColor: "none" === b.bg_color ? "black" : b.bg_color,
                                            position: b.position,
                                            fontSize: b.font_size,
                                            bgOpacity: b.bg_opacity,
                                            charOpacity: b.char_opacity
                                        }
                                    })
                                })), console.log("WebOS", "change subtitles for id: ", A.mediaId, " index:", t), m = t;
                                var r = parseInt(t.replace("EMBEDDED_", ""));
                                console.log("set subs to track idx: " + r), setTimeout((function() {
                                    var e = function() {
                                        var e = N("subtitlesTracks").find((function(e) {
                                            return e.id === t
                                        }));
                                        y = y.map((function(e) {
                                            return e.mode = e.id === m ? "showing" : "disabled", e
                                        })), e && (I.emit("subtitlesTrackLoaded", e), G("selectedSubtitlesTrackId"))
                                    };
                                    l({
                                        method: "selectTrack",
                                        parameters: {
                                            type: "text",
                                            mediaId: A.mediaId,
                                            index: r
                                        }
                                    }, e, e)
                                }), 500)
                            } - 1 === (t || "").indexOf("EMBEDDED_") && (m = null, G("selectedSubtitlesTrackId"), E(!1));
                            break;
                        case "subtitlesOffset":
                            if (null !== t && isFinite(t)) {
                                x = t;
                                var n = (h = Math.max(0, Math.min(100, parseInt(x, 10)))) <= 0 ? -3 : h <= 5 ? -2 : h <= 10 ? 0 : h <= 15 ? 2 : h <= 20 && 4;
                                !1 === n && (n = -2), b.position = n, A.mediaId && l({
                                    method: "setSubtitlePosition",
                                    parameters: {
                                        mediaId: A.mediaId,
                                        position: n
                                    }
                                }), G("subtitlesOffset")
                            }
                            break;
                        case "subtitlesSize":
                            if (null !== t && isFinite(t)) {
                                f = t;
                                var i = (u = Math.max(0, parseInt(f, 10))) <= 100 ? 1 : u <= 125 ? 2 : u <= 150 ? 3 : u <= 200 && 4;
                                !1 === i && (i = 1), b.font_size = i, A.mediaId && l({
                                    method: "setSubtitleFontSize",
                                    parameters: {
                                        mediaId: A.mediaId,
                                        fontSize: i
                                    }
                                }), G("subtitlesSize")
                            }
                            break;
                        case "subtitlesTextColor":
                            if ("string" == typeof t) {
                                var a = "white";
                                d[t] && c.indexOf(d[t]) > -1 && (a = d[t]), b.color = a, A.mediaId && l({
                                    method: "setSubtitleCharacterColor",
                                    parameters: {
                                        mediaId: A.mediaId,
                                        charColor: a
                                    }
                                }), k = t, G("subtitlesTextColor")
                            }
                            break;
                        case "subtitlesBackgroundColor":
                            "string" == typeof t && (d[t] && c.indexOf(d[t]) > -1 && (b.bg_color = d[t], A.mediaId && (l({
                                method: "setSubtitleBackgroundColor",
                                parameters: {
                                    mediaId: A.mediaId,
                                    bgColor: "none" === d[t] ? "black" : d[t]
                                }
                            }), l("none" === d[t] ? {
                                method: "setSubtitleBackgroundOpacity",
                                parameters: {
                                    mediaId: A.mediaId,
                                    bgOpacity: 0
                                }
                            } : {
                                method: "setSubtitleBackgroundOpacity",
                                parameters: {
                                    mediaId: A.mediaId,
                                    bgOpacity: 255
                                }
                            }))), L = t, G("subtitlesBackgroundColor"));
                            break;
                        case "subtitlesOpacity":
                            if ("number" == typeof t) {
                                var s = Math.floor(t / 100 * 255);
                                b.char_opacity = s, A.mediaId && l({
                                    method: "setSubtitleCharacterOpacity",
                                    parameters: {
                                        mediaId: A.mediaId,
                                        charOpacity: s
                                    }
                                }), _ = t, G("subtitlesOpacity")
                            }
                            break;
                        case "selectedAudioTrackId":
                            if (0 === (t || "").indexOf("EMBEDDED_")) {
                                v = t;
                                r = parseInt(t.replace("EMBEDDED_", ""));
                                if (A.mediaId && l({
                                        method: "selectTrack",
                                        parameters: {
                                            type: "audio",
                                            mediaId: A.mediaId,
                                            index: r
                                        }
                                    }, (function() {
                                        var e = N("audioTracks").find((function(e) {
                                            return e.id === t
                                        }));
                                        T = T.map((function(e) {
                                            return e.mode = e.id === v ? "showing" : "disabled", e
                                        })), e && (I.emit("audioTrackLoaded", e), G("selectedAudioTrackId"))
                                    })), A && A.audioTracks) {
                                    for (var o = 0; o < A.audioTracks.length; o++) A.audioTracks[o].enabled = !1;
                                    A.audioTracks[r] && (A.audioTracks[r].enabled = !0)
                                }
                            }
                            break;
                        case "volume":
                            null !== t && isFinite(t) && (A.muted = !1, A.volume = Math.max(0, Math.min(100, parseInt(t, 10))) / 100);
                            break;
                        case "muted":
                            A.muted = !!t;
                            break;
                        case "playbackSpeed":
                            null !== t && isFinite(t) && (R = parseFloat(t), A.mediaId && l({
                                method: "setPlayRate",
                                parameters: {
                                    mediaId: A.mediaId,
                                    playRate: R,
                                    audioOutput: !0
                                }
                            }), G("playbackSpeed"))
                    }
                    var u, h
                }

                function H(e, r) {
                    switch (e) {
                        case "load":
                            if (r && r.stream && "string" == typeof r.stream.url) {
                                D = r.stream, C = r.time, G("stream"), A.autoplay = "boolean" != typeof r.autoplay || r.autoplay, G("loaded"), G("paused"), G("time"), G("duration"), G("buffering"), G("buffered"), G("subtitlesTracks"), G("selectedSubtitlesTrackId"), G("audioTracks"), G("selectedAudioTrackId");
                                var n = 0;
                                A.src = D.url, i = function() {
                                    try {
                                        A.load()
                                    } catch (e) {}
                                    try {
                                        A.play()
                                    } catch (e) {}
                                }, a = setInterval((function() {
                                    if (A.mediaId) return clearInterval(a), F(), g(), void i();
                                    ++n > 4 && (clearInterval(a), F(), g(), i())
                                }), 300)
                            } else B(Object.assign({}, s.UNSUPPORTED_STREAM, {
                                critical: !0,
                                stream: r ? r.stream : null
                            }));
                            break;
                        case "unload":
                            D = null, C = null, Array.from(A.textTracks).forEach((function(e) {
                                e.oncuechange = null
                            })), A.removeAttribute("src"), A.load(), G("stream"), G("paused"), G("time"), G("duration"), G("buffering"), G("buffered"), G("subtitlesTracks"), G("selectedSubtitlesTrackId"), G("audioTracks"), G("selectedAudioTrackId");
                            break;
                        case "destroy":
                            H("unload"), w = !0, G("subtitlesOffset"), G("subtitlesSize"), G("subtitlesTextColor"), G("subtitlesBackgroundColor"), G("subtitlesOpacity"), G("volume"), G("muted"), G("playbackSpeed"), I.removeAllListeners(), A.onerror = null, A.onended = null, A.onpause = null, A.onplay = null, A.ontimeupdate = null, A.ondurationchange = null, A.onwaiting = null, A.onseeking = null, A.onseeked = null, A.onstalled = null, A.onplaying = null, A.oncanplay = null, A.canplaythrough = null, A.onloadeddata = null, A.onloadedmetadata = null, A.onvolumechange = null, A.onratechange = null, A.textTracks.onchange = null, t.removeChild(A), t.removeChild(S)
                    }
                    var i, a
                }
                this.on = function(e, t) {
                    if (w) throw new Error("Video is destroyed");
                    I.on(e, t)
                }, this.dispatch = function(e) {
                    if (w) throw new Error("Video is destroyed");
                    if (e) switch ((e = a(i(e))).type) {
                        case "observeProp":
                            return t = e.propName, void(O.hasOwnProperty(t) && (I.emit("propValue", t, N(t)), O[t] = !0));
                        case "setProp":
                            return void V(e.propName, e.propValue);
                        case "command":
                            return void H(e.commandName, e.commandArgs)
                    }
                    var t;
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            p.canPlayStream = function() {
                return Promise.resolve(!0)
            }, p.manifest = {
                name: "WebOsVideo",
                external: !1,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "buffered", "audioTracks", "selectedAudioTrackId", "subtitlesTracks", "selectedSubtitlesTrackId", "subtitlesOffset", "subtitlesSize", "subtitlesTextColor", "subtitlesBackgroundColor", "subtitlesOpacity", "volume", "muted", "playbackSpeed"],
                commands: ["load", "unload", "destroy"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded", "audioTrackLoaded"]
            }, e.exports = p
        },
        9066: (e, t, r) => {
            var n = r(2381);
            e.exports = n
        },
        9413: (e, t, r) => {
            var n = r(5852),
                i = r(4044);

            function a(e) {
                var t = (e = e || {}).containerElement;
                if (!(t instanceof HTMLElement)) throw new Error("Container element required to be instance of HTMLElement");
                var r = e.chromecastTransport;
                if (!r) throw new Error("Chromecast transport required");
                var a = r.getCastDevice();
                if (null === a) throw new Error("Chromecast session must be started");
                var s = document.createElement("div");
                s.style.display = "flex", s.style.flexDirection = "row", s.style.alignItems = "center", s.style.justifyContent = "center", s.style.width = "100%", s.style.height = "100%", s.style.backgroundColor = "black";
                var o = document.createElement("div");
                o.style.flex = "none", o.style.maxWidth = "80%", o.style.fontSize = "5vmin", o.style.lineHeight = "1.2em", o.style.maxHeight = "3.6em", o.style.textAlign = "center", o.style.color = "#FFFFFF90", o.innerText = "Casting to " + a.friendlyName, s.appendChild(o), t.appendChild(s), r.on("message", f), r.on("message-error", h);
                var l = new n,
                    u = !1,
                    c = {
                        stream: !1,
                        loaded: !1,
                        paused: !1,
                        time: !1,
                        duration: !1,
                        buffering: !1,
                        buffered: !1,
                        audioTracks: !1,
                        selectedAudioTrackId: !1,
                        subtitlesTracks: !1,
                        selectedSubtitlesTrackId: !1,
                        subtitlesOffset: !1,
                        subtitlesSize: !1,
                        subtitlesTextColor: !1,
                        subtitlesBackgroundColor: !1,
                        subtitlesOutlineColor: !1,
                        volume: !1,
                        muted: !1,
                        playbackSpeed: !1,
                        videoParams: !1,
                        extraSubtitlesTracks: !1,
                        selectedExtraSubtitlesTrackId: !1,
                        extraSubtitlesDelay: !1,
                        extraSubtitlesSize: !1,
                        extraSubtitlesOffset: !1,
                        extraSubtitlesTextColor: !1,
                        extraSubtitlesBackgroundColor: !1,
                        extraSubtitlesOutlineColor: !1
                    };

                function d(e, t) {
                    l.emit("error", Object.assign({}, i.CHROMECAST_SENDER_VIDEO.MESSAGE_SEND_FAILED, {
                        error: e,
                        action: t
                    }))
                }

                function h(e) {
                    l.emit("error", Object.assign({}, i.CHROMECAST_SENDER_VIDEO.INVALID_MESSAGE_RECEIVED, {
                        error: e
                    }))
                }

                function f(e) {
                    if (e && "string" == typeof e.event) {
                        var t = Array.isArray(e.args) ? e.args : [];
                        l.emit.apply(l, [e.event].concat(t))
                    } else h(new Error("Invalid message: " + e))
                }

                function g(e, t) {
                    c[e] && l.emit("propChanged", e, t)
                }
                this.on = function(e, t) {
                    if (u) throw new Error("Video is destroyed");
                    l.on(e, t)
                }, this.dispatch = function(e) {
                    if (u) throw new Error("Video is destroyed");
                    if (e) switch (e.type) {
                        case "observeProp":
                            return i = e.propName, c.hasOwnProperty(i) && (c[i] = !0), void r.sendMessage(e).catch((function(t) {
                                d(t, e)
                            }));
                        case "setProp":
                            return void r.sendMessage(e).catch((function(t) {
                                d(t, e)
                            }));
                        case "command":
                            return n = e.commandName, e.commandArgs, "destroy" === n && (u = !0, g("stream", null), g("loaded", null), g("paused", null), g("time", null), g("duration", null), g("buffering", null), g("buffered", null), g("audioTracks", []), g("selectedAudioTrackId", []), g("subtitlesTracks", []), g("selectedSubtitlesTrackId", null), g("subtitlesOffset", null), g("subtitlesSize", null), g("subtitlesTextColor", null), g("subtitlesBackgroundColor", null), g("subtitlesOutlineColor", null), g("volume", null), g("muted", null), g("playbackSpeed", null), g("videoParams", null), g("extraSubtitlesTracks", []), g("selectedExtraSubtitlesTrackId", null), g("extraSubtitlesDelay", null), g("extraSubtitlesSize", null), g("extraSubtitlesOffset", null), g("extraSubtitlesTextColor", null), g("extraSubtitlesBackgroundColor", null), g("extraSubtitlesOutlineColor", null), l.removeAllListeners(), r.off("message", f), t.removeChild(s)), void r.sendMessage(e).catch((function(t) {
                                d(t, e)
                            }))
                    }
                    var n, i;
                    throw new Error("Invalid action dispatched: " + JSON.stringify(e))
                }
            }
            a.canPlayStream = function() {
                return Promise.resolve(!0)
            }, a.manifest = {
                name: "ChromecastSenderVideo",
                external: !0,
                props: ["stream", "loaded", "paused", "time", "duration", "buffering", "buffered", "audioTracks", "selectedAudioTrackId", "subtitlesTracks", "selectedSubtitlesTrackId", "subtitlesOffset", "subtitlesSize", "subtitlesTextColor", "subtitlesBackgroundColor", "subtitlesOutlineColor", "volume", "muted", "playbackSpeed", "videoParams", "extraSubtitlesTracks", "selectedExtraSubtitlesTrackId", "extraSubtitlesDelay", "extraSubtitlesSize", "extraSubtitlesOffset", "extraSubtitlesTextColor", "extraSubtitlesBackgroundColor", "extraSubtitlesOutlineColor"],
                commands: ["load", "unload", "destroy", "addExtraSubtitlesTracks"],
                events: ["propValue", "propChanged", "ended", "error", "subtitlesTrackLoaded", "audioTrackLoaded", "extraSubtitlesTrackLoaded", "implementationChanged"]
            }, e.exports = a
        },
        9932: (e, t, r) => {
            var n = r(8868);

            function i(e, t, r, i) {
                var a = Array.isArray(i) && i.length > 0 ? "?" + new URLSearchParams(i.map((function(e) {
                    return ["tr", e]
                }))) : "";
                return {
                    url: n.resolve(e, "/" + encodeURIComponent(t) + "/" + encodeURIComponent(r)) + a,
                    infoHash: t,
                    fileIdx: r,
                    sources: i
                }
            }
            e.exports = function(e, t, r, a, s) {
                if ((!Array.isArray(a) || 0 === a.length) && null !== r && isFinite(r)) return Promise.resolve(i(e, t, r, a));
                var o = {
                    torrent: {
                        infoHash: t
                    }
                };
                return Array.isArray(a) && a.length > 0 && (o.peerSearch = {
                    sources: ["dht:" + t].concat(a).filter((function(e, t, r) {
                        return r.indexOf(e) === t
                    })),
                    min: 40,
                    max: 200
                }), null !== r && isFinite(r) ? o.guessFileIdx = !1 : (o.guessFileIdx = {}, s && (null !== s.season && isFinite(s.season) && (o.guessFileIdx.season = s.season), null !== s.episode && isFinite(s.episode) && (o.guessFileIdx.episode = s.episode))), fetch(n.resolve(e, "/" + encodeURIComponent(t) + "/create"), {
                    method: "POST",
                    headers: {
                        "content-type": "application/json"
                    },
                    body: JSON.stringify(o)
                }).then((function(e) {
                    if (e.ok) return e.json();
                    throw new Error(e.status + " (" + e.statusText + ")")
                })).then((function(n) {
                    return i(e, t, o.guessFileIdx ? n.guessedFileIdx : r, o.peerSearch ? o.peerSearch.sources : [])
                }))
            }
        }
    }
]);